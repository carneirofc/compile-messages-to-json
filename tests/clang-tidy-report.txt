./include/trackcpp/kicktable.h:46:72: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
  template <typename T> unsigned int get_ix(const T& x) const { return (int) ((x - x_min) / ((x_max - x_min) / (x_nrpts - 1))); }
                                                                       ^
./include/trackcpp/kicktable.h:85:38: note: in instantiation of function template specialization 'Kicktable::get_ix<double>' requested here
  const unsigned int ix = kicktable->get_ix(rx);
                                     ^
./include/trackcpp/kicktable.h:122:10: note: in instantiation of function template specialization 'kicktable_getkicks_bilinear<double>' requested here
  return kicktable_getkicks_bilinear(kicktable_idx, rx, ry, hkick, vkick);
         ^
./include/trackcpp/passmethods.hpp:97:25: note: in instantiation of function template specialization 'kicktable_getkicks<double>' requested here
  Status::type status = kicktable_getkicks(kicktable_idx, pos.rx, pos.ry, hkick, vkick);
                        ^
./include/trackcpp/passmethods.hpp:402:29: note: in instantiation of function template specialization 'kicktablethinkick<double>' requested here
      Status::type status = kicktablethinkick(pos, elem.kicktable_idx, brho, elem.nr_steps, elem.rescale_kicks);
                            ^
./include/trackcpp/tracking.h:88:17: note: in instantiation of function template specialization 'pm_kickmap_pass<double>' requested here
                if ((status = pm_kickmap_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/kicktable.h:47:72: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
  template <typename T> unsigned int get_iy(const T& y) const { return (int) ((y - y_min) / ((y_max - y_min) / (y_nrpts - 1))); }
                                                                       ^
./include/trackcpp/kicktable.h:86:38: note: in instantiation of function template specialization 'Kicktable::get_iy<double>' requested here
  const unsigned int iy = kicktable->get_iy(ry);
                                     ^
./include/trackcpp/kicktable.h:122:10: note: in instantiation of function template specialization 'kicktable_getkicks_bilinear<double>' requested here
  return kicktable_getkicks_bilinear(kicktable_idx, rx, ry, hkick, vkick);
         ^
./include/trackcpp/passmethods.hpp:97:25: note: in instantiation of function template specialization 'kicktable_getkicks<double>' requested here
  Status::type status = kicktable_getkicks(kicktable_idx, pos.rx, pos.ry, hkick, vkick);
                        ^
./include/trackcpp/passmethods.hpp:402:29: note: in instantiation of function template specialization 'kicktablethinkick<double>' requested here
      Status::type status = kicktablethinkick(pos, elem.kicktable_idx, brho, elem.nr_steps, elem.rescale_kicks);
                            ^
./include/trackcpp/tracking.h:88:17: note: in instantiation of function template specialization 'pm_kickmap_pass<double>' requested here
                if ((status = pm_kickmap_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/kicktable.h:64:48: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  const Kicktable* kicktable = &kicktable_list[kicktable_idx];
                                               ^
./include/trackcpp/kicktable.h:122:10: note: in instantiation of function template specialization 'kicktable_getkicks_bilinear<double>' requested here
  return kicktable_getkicks_bilinear(kicktable_idx, rx, ry, hkick, vkick);
         ^
./include/trackcpp/passmethods.hpp:97:25: note: in instantiation of function template specialization 'kicktable_getkicks<double>' requested here
  Status::type status = kicktable_getkicks(kicktable_idx, pos.rx, pos.ry, hkick, vkick);
                        ^
./include/trackcpp/passmethods.hpp:402:29: note: in instantiation of function template specialization 'kicktablethinkick<double>' requested here
      Status::type status = kicktablethinkick(pos, elem.kicktable_idx, brho, elem.nr_steps, elem.rescale_kicks);
                            ^
./include/trackcpp/tracking.h:88:17: note: in instantiation of function template specialization 'pm_kickmap_pass<double>' requested here
                if ((status = pm_kickmap_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/lattice.h:47:33: warning: implicit conversion changes signedness: '__gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type' (aka 'int') to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                        r.push_back(*((T*)(&(lattice[idx[i]].fam_name))));
                                                     ^
src/lattice.cpp:161:35: note: in instantiation of function template specialization 'latt_getcellstruct<double>' requested here
  std::vector<double> bends_len = latt_getcellstruct<double>(lattice, "length", bends);
                                  ^
./include/trackcpp/passmethods.hpp:63:27: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    real_sum = polynom_b[n-1];
                          ^
./include/trackcpp/passmethods.hpp:133:3: note: in instantiation of function template specialization 'calcpolykick<double>' requested here
  calcpolykick<T>(pos, polynom_a, polynom_b, real_sum, imag_sum);
  ^
./include/trackcpp/passmethods.hpp:264:5: note: in instantiation of function template specialization 'strthinkick<double>' requested here
    strthinkick<T>(pos, k1, polynom_a, polynom_b, accelerator);
    ^
./include/trackcpp/tracking.h:70:17: note: in instantiation of function template specialization 'pm_str_mpole_symplectic4_pass<double>' requested here
                if ((status = pm_str_mpole_symplectic4_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/passmethods.hpp:101:13: error: call to 'isfinite' is ambiguous [clang-diagnostic-error]
    if (not isfinite(pos.px)) {
            ^
./include/trackcpp/passmethods.hpp:402:29: note: in instantiation of function template specialization 'kicktablethinkick<double>' requested here
      Status::type status = kicktablethinkick(pos, elem.kicktable_idx, brho, elem.nr_steps, elem.rescale_kicks);
                            ^
./include/trackcpp/tracking.h:88:17: note: in instantiation of function template specialization 'pm_kickmap_pass<double>' requested here
                if ((status = pm_kickmap_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cmath:566:3: note: candidate function
  isfinite(double __x)
  ^
./include/trackcpp/auxiliary.h:163:8: note: candidate function
  bool isfinite(const double& v);
       ^
./include/trackcpp/passmethods.hpp:104:13: error: call to 'isfinite' is ambiguous [clang-diagnostic-error]
    if (not isfinite(pos.py)) {
            ^
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cmath:566:3: note: candidate function
  isfinite(double __x)
  ^
./include/trackcpp/auxiliary.h:163:8: note: candidate function
  bool isfinite(const double& v);
       ^
./include/trackcpp/passmethods.hpp:262:26: warning: comparison of integers of different signs: 'unsigned int' and 'const int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<elem.nr_steps; ++i) {
                         ^
./include/trackcpp/tracking.h:70:17: note: in instantiation of function template specialization 'pm_str_mpole_symplectic4_pass<double>' requested here
                if ((status = pm_str_mpole_symplectic4_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/passmethods.hpp:290:26: warning: comparison of integers of different signs: 'unsigned int' and 'const int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<elem.nr_steps; ++i) {
                         ^
./include/trackcpp/tracking.h:73:17: note: in instantiation of function template specialization 'pm_bnd_mpole_symplectic4_pass<double>' requested here
                if ((status = pm_bnd_mpole_symplectic4_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/passmethods.hpp:389:52: warning: comparison of integers of different signs: 'const int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
  if (elem.kicktable_idx < 0 or elem.kicktable_idx >= kicktable_list.size()) return Status::kicktable_not_defined;
                                                   ^
./include/trackcpp/tracking.h:88:17: note: in instantiation of function template specialization 'pm_kickmap_pass<double>' requested here
                if ((status = pm_kickmap_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/passmethods.hpp:427:28: warning: comparison of integers of different signs: 'unsigned int' and 'const int' [clang-diagnostic-sign-compare]
    for(unsigned int i=0; i<elem.nr_steps; ++i) {
                           ^
./include/trackcpp/tracking.h:91:17: note: in instantiation of function template specialization 'pm_matrix_pass<double>' requested here
                if ((status = pm_matrix_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<double>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/tpsa.h:113:2: warning: definition of implicit copy assignment operator for 'Tpsa<6, 1>' is deprecated because it has a user-declared copy constructor [clang-diagnostic-deprecated-copy]
        Tpsa(const Tpsa& a_);
        ^
src/tracking.cpp:61:10: note: in implicit copy assignment operator for 'Tpsa<6, 1>' first required here
  map.rx = Tpsa<6,1>(fp.rx, 0); map.px = Tpsa<6,1>(fp.px, 1);
         ^
./include/trackcpp/tpsa.h:113:2: warning: definition of implicit copy assignment operator for 'Tpsa<6, 3>' is deprecated because it has a user-declared copy constructor [clang-diagnostic-deprecated-copy]
        Tpsa(const Tpsa& a_);
        ^
src/tests.cpp:62:11: note: in implicit copy assignment operator for 'Tpsa<6, 3>' first required here
  tpsa.rx = Tpsa<6,order>(0, 0); tpsa.px = Tpsa<6,order>(0, 1);
          ^
./include/trackcpp/tpsa.h:515:11: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
                fac *= i+1;
                        ^
./include/trackcpp/tpsa.h:538:17: note: in instantiation of function template specialization 'cos<6, 3, double>' requested here
        return sin(a_)/cos(a_);
                       ^
./include/trackcpp/passmethods.hpp:194:25: note: in instantiation of function template specialization 'tan<6, 3, double>' requested here
  T fy      = inv_rho * tan(psi_bar) / (1 + de);
                        ^
./include/trackcpp/passmethods.hpp:289:3: note: in instantiation of function template specialization 'edge_fringe<Tpsa<6, 3>>' requested here
  edge_fringe(pos, irho, elem.angle_in, elem.fint_in, elem.gap);
  ^
./include/trackcpp/tracking.h:73:17: note: in instantiation of function template specialization 'pm_bnd_mpole_symplectic4_pass<Tpsa<6, 3>>' requested here
                if ((status = pm_bnd_mpole_symplectic4_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<Tpsa<6, 3>>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<Tpsa<6, 3>>' requested here
        return track_linepass (
               ^
src/tests.cpp:68:3: note: in instantiation of function template specialization 'track_linepass<Tpsa<6, 3>>' requested here
  track_linepass(accelerator, tpsa, new_tpsa, element_offset, lost_plane, false);
  ^
./include/trackcpp/tpsa.h:530:11: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
                fac *= i+1;
                        ^
./include/trackcpp/tpsa.h:538:9: note: in instantiation of function template specialization 'sin<6, 3, double>' requested here
        return sin(a_)/cos(a_);
               ^
./include/trackcpp/passmethods.hpp:194:25: note: in instantiation of function template specialization 'tan<6, 3, double>' requested here
  T fy      = inv_rho * tan(psi_bar) / (1 + de);
                        ^
./include/trackcpp/passmethods.hpp:289:3: note: in instantiation of function template specialization 'edge_fringe<Tpsa<6, 3>>' requested here
  edge_fringe(pos, irho, elem.angle_in, elem.fint_in, elem.gap);
  ^
./include/trackcpp/tracking.h:73:17: note: in instantiation of function template specialization 'pm_bnd_mpole_symplectic4_pass<Tpsa<6, 3>>' requested here
                if ((status = pm_bnd_mpole_symplectic4_pass<T>(orig_pos, el, accelerator)) != Status::success) return status;
                              ^
./include/trackcpp/tracking.h:164:12: note: in instantiation of function template specialization 'track_elementpass<Tpsa<6, 3>>' requested here
                status = track_elementpass (element, orig_pos, accelerator);
                         ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<Tpsa<6, 3>>' requested here
        return track_linepass (
               ^
src/tests.cpp:68:3: note: in instantiation of function template specialization 'track_linepass<Tpsa<6, 3>>' requested here
  track_linepass(accelerator, tpsa, new_tpsa, element_offset, lost_plane, false);
  ^
./include/trackcpp/tracking.h:153:27: warning: implicit conversion changes signedness: 'int' to 'std::vector<bool, type-parameter-0-0>::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
        indcs.reserve(nr_elements+1);
                                 ^
./include/trackcpp/tracking.h:219:9: note: in instantiation of function template specialization 'track_linepass<double>' requested here
        return track_linepass (
               ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/tracking.h:167:12: error: call to 'isfinite' is ambiguous [clang-diagnostic-error]
                if ((not isfinite(orig_pos.rx)) or
                         ^
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cmath:566:3: note: candidate function
  isfinite(double __x)
  ^
./include/trackcpp/auxiliary.h:163:8: note: candidate function
  bool isfinite(const double& v);
       ^
./include/trackcpp/tracking.h:173:18: error: call to 'isfinite' is ambiguous [clang-diagnostic-error]
                }else if ((not isfinite(orig_pos.ry)) or
                               ^
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cmath:566:3: note: candidate function
  isfinite(double __x)
  ^
./include/trackcpp/auxiliary.h:163:8: note: candidate function
  bool isfinite(const double& v);
       ^
./include/trackcpp/tracking.h:210:49: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
        unsigned int nr_elements = accelerator.lattice.size();
                                                       ^
src/commands.cpp:1087:3: note: in instantiation of function template specialization 'track_linepass<double>' requested here
  track_linepass(accelerator, pos, pos_list, offset_element, lost_plane, true);
  ^
./include/trackcpp/tracking.h:304:39: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
                        if (trajectory) for(int i=lost_turn+1; i<nr_turns; ++i) {
                                                           ^
src/dynap.cpp:1081:13: note: in instantiation of function template specialization 'track_ringpass<double>' requested here
  lstatus = track_ringpass (*thread_accelerator,
            ^
/home/carneirofc/CNPEM/trackcpp/src/sirius_v500.cpp:17:10: error: 'lattice.h' file not found [clang-diagnostic-error]
#include "lattice.h"
         ^
/home/carneirofc/CNPEM/trackcpp/src/sirius_v500.cpp:22:6: warning: variable 'sirius_v500' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void sirius_v500(std::vector<Element>& the_ring) {
     ^
src/accelerator.cpp:20:1: warning: constructor does not initialize these fields: cavity_on, radiation_on, vchamber_on, harmonic_number [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
Accelerator::Accelerator(const double& energy) {
^
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:26:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(auto i=0; i<lattice.size(); ++i) length += lattice[i].length;
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~           ~~~~~~~~~~
     (const auto & i : lattice)                  i
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:26:18: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
  for(auto i=0; i<lattice.size(); ++i) length += lattice[i].length;
                 ^
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:26:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(auto i=0; i<lattice.size(); ++i) length += lattice[i].length;
                                      ^
                                       {
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:26:58: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  for(auto i=0; i<lattice.size(); ++i) length += lattice[i].length;
                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:32:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->energy != o.energy) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:33:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->cavity_on != o.cavity_on) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:34:44: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->radiation_on != o.radiation_on) return false;
                                           ^
                                            {
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:35:42: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->vchamber_on != o.vchamber_on) return false;
                                         ^
                                          {
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:36:50: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->harmonic_number != o.harmonic_number) return false;
                                                 ^
                                                  {
/home/carneirofc/CNPEM/trackcpp/src/accelerator.cpp:37:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->lattice != o.lattice) return false;
                                 ^
                                  {
src/commands.cpp:41:34: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ring_energy     = std::atof(args[3].c_str());
                                 ^
src/commands.cpp:42:34: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int harmonic_number = std::atoi(args[4].c_str());
                                 ^
src/commands.cpp:42:34: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
src/commands.cpp:46:21: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       de = std::atof(args[8].c_str());
                    ^
src/commands.cpp:47:27: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_turns = std::atoi(args[9].c_str());
                          ^
src/commands.cpp:47:27: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
src/commands.cpp:48:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int x_nrpts = std::atoi(args[10].c_str());
                         ^
src/commands.cpp:48:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
src/commands.cpp:49:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_min = std::atof(args[11].c_str());
                       ^
src/commands.cpp:50:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_max = std::atof(args[12].c_str());
                       ^
src/commands.cpp:51:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int y_nrpts = std::atoi(args[13].c_str());
                         ^
src/commands.cpp:51:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
src/commands.cpp:52:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y_min = std::atof(args[14].c_str());
                       ^
src/commands.cpp:53:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y_max = std::atof(args[15].c_str());
                       ^
src/commands.cpp:56:18: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
    nr_threads = std::atoi(args[16].c_str());
                 ^
src/commands.cpp:56:18: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
src/commands.cpp:92:33: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  accelerator.harmonic_number = harmonic_number;
                                ^
src/commands.cpp:92:33: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:106:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:109:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:127:34: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ring_energy     = std::atof(args[3].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:128:34: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int harmonic_number = std::atoi(args[4].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:128:34: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:132:20: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y = std::atof(args[8].c_str());
                   ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:133:27: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_turns = std::atoi(args[9].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:133:27: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:134:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int e_nrpts = std::atoi(args[10].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:134:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:135:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       e_min = std::atof(args[11].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:136:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       e_max = std::atof(args[12].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:137:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int x_nrpts = std::atoi(args[13].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:137:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:138:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_min = std::atof(args[14].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:139:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_max = std::atof(args[15].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:142:18: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
    nr_threads = std::atoi(args[16].c_str());
                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:142:18: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:178:33: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  accelerator.harmonic_number = harmonic_number;
                                ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:178:33: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:192:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:195:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:293:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  std::string calc_type_str, p_init_str, p_delta_str;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:311:35: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ring_energy      = std::atof(args[3].c_str());
                                  ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:312:34: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int harmonic_number = std::atoi(args[4].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:312:34: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:313:29: warning: redundant call to 'c_str' [readability-redundant-string-cstr]
  std::string  cavity_state(args[5].c_str());
                            ^~~~~~~~~~~~~~~
                            args[5]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:314:32: warning: redundant call to 'c_str' [readability-redundant-string-cstr]
  std::string  radiation_state(args[6].c_str());
                               ^~~~~~~~~~~~~~~
                               args[6]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:315:31: warning: redundant call to 'c_str' [readability-redundant-string-cstr]
  std::string  vchamber_state(args[7].c_str());
                              ^~~~~~~~~~~~~~~
                              args[7]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:316:27: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_turns = std::atoi(args[8].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:316:27: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:317:27: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y0       = std::atof(args[9].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:318:27: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       p_init   = std::atof(args[10].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:319:27: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       p_delta  = std::atof(args[11].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:320:32: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_steps_back = std::atoi(args[12].c_str());
                               ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:320:32: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:321:26: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       rescale = std::atof(args[13].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:322:32: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_iterations = std::atoi(args[14].c_str());
                               ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:322:32: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:323:27: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       s_min    = std::atof(args[15].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:324:27: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       s_max    = std::atof(args[16].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:328:23: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
    unsigned int nr = std::atoi(args[i].c_str());
                      ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:328:23: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:331:11: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    } else fam_names.push_back(args[i]);
          ^
           {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:353:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(unsigned int i=0; i<fam_names.size(); ++i) std::cout << fam_names[i] << " "; std::cout << std::endl;
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~              ~~~~~~~~~~~~
     (auto & fam_name : fam_names)                            fam_name
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:353:49: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<fam_names.size(); ++i) std::cout << fam_names[i] << " "; std::cout << std::endl;
                                                ^
                                                 {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:370:33: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  accelerator.harmonic_number = harmonic_number;
                                ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:370:33: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:385:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:388:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:863:34: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ring_energy     = std::atof(args[3].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:864:34: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int harmonic_number = std::atoi(args[4].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:864:34: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:868:21: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       de = std::atof(args[8].c_str());
                    ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:869:27: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_turns = std::atoi(args[9].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:869:27: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:870:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int x_nrpts = std::atoi(args[10].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:870:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:871:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_min = std::atof(args[11].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:872:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_max = std::atof(args[12].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:873:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int y_nrpts = std::atoi(args[13].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:873:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:874:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y_min = std::atof(args[14].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:875:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y_max = std::atof(args[15].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:876:29: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_threads = std::atoi(args[16].c_str());
                            ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:876:29: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:911:33: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  accelerator.harmonic_number = harmonic_number;
                                ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:911:33: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:925:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:928:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:946:34: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ring_energy     = std::atof(args[3].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:947:34: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int harmonic_number = std::atoi(args[4].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:947:34: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:951:20: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       y = std::atof(args[8].c_str());
                   ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:952:27: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_turns = std::atoi(args[9].c_str());
                          ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:952:27: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:953:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int e_nrpts = std::atoi(args[10].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:953:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:954:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       e_min = std::atof(args[11].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:955:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       e_max = std::atof(args[12].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:956:26: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int x_nrpts = std::atoi(args[13].c_str());
                         ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:956:26: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:957:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_min = std::atof(args[14].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:958:24: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       x_max = std::atof(args[15].c_str());
                       ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:959:29: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int nr_threads = std::atoi(args[16].c_str());
                            ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:959:29: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:994:33: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  accelerator.harmonic_number = harmonic_number;
                                ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:994:33: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1008:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1011:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1029:34: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ring_energy     = std::atof(args[3].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1030:34: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int harmonic_number = std::atoi(args[4].c_str());
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1030:34: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1034:32: warning: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c]
  unsigned int start_element = std::atoi(args[8].c_str());
                               ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1034:32: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1035:22: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       rx0 = std::atof(args[9].c_str());
                     ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1036:22: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       px0 = std::atof(args[10].c_str());
                     ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1037:22: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       ry0 = std::atof(args[11].c_str());
                     ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1038:22: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       py0 = std::atof(args[12].c_str());
                     ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1039:22: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       de0 = std::atof(args[13].c_str());
                     ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1040:22: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
  double       dl0 = std::atof(args[14].c_str());
                     ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1077:33: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  accelerator.harmonic_number = harmonic_number;
                                ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1077:33: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1085:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1091:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status == Status::file_not_opened) return status;
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1121:5: warning: suspicious string literal, probably missing a comma [bugprone-suspicious-missing-comma]
    "both positive and negative momentum acceptances are searched"
    ^
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1149:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (args[2] == "dynap_ma") text = &dynap_ma_help;
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1152:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(unsigned int i=0; i<text->size(); ++i) std::cout << (*text)[i] << std::endl;
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~              ~~~~~~~~~~
     (auto & i : *text)                                   i
/home/carneirofc/CNPEM/trackcpp/src/commands.cpp:1152:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<text->size(); ++i) std::cout << (*text)[i] << std::endl;
                                            ^
                                             {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:31:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  const double &rx = pos.rx, &ry = pos.ry, &de = pos.de;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:44:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if(fint > 0 && gap > 0)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:45:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int m=0; m<6; ++m)
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:53:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if(fint > 0 && gap > 0)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:54:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int m=0; m<6; m++)
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:94:37: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  double im_sum = max_order * pol_a[max_order];
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:95:37: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  double re_sum = max_order * pol_b[max_order];
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:100:31: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
  for(unsigned int i=max_order-1; i>0; --i){
                              ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:126:25: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  double im_sum = pol_a[max_order];
                        ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:127:25: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  double re_sum = pol_b[max_order];
                        ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:137:66: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    const double& re_tmp = re_sum*pos.rx - im_sum*pos.ry + pol_b[i];
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:138:52: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    im_sum = im_sum*pos.rx + re_sum*pos.ry + pol_a[i];
                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:187:20: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  const int mord = std::min(pola.size(), polb.size()) - 1;
                   ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:187:55: warning: implicit conversion loses integer precision: 'unsigned long' to 'const int' [clang-diagnostic-shorten-64-to-32]
  const int mord = std::min(pola.size(), polb.size()) - 1;
                                                      ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:205:26: warning: comparison of integers of different signs: 'unsigned int' and 'const int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<ele.nr_steps; ++i) {
                         ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:243:28: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  const int nr_elements  = lattice.size();
                           ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:243:36: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const int' [clang-diagnostic-shorten-64-to-32]
  const int nr_elements  = lattice.size();
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:246:41: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  bmat.clear(); bmat.reserve(nr_elements+1);
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:249:26: warning: comparison of integers of different signs: 'unsigned int' and 'const int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<nr_elements; ++i) {
                         ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:251:70: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (ele.pass_method == PassMethod::pm_str_mpole_symplectic4_pass)
                                                                     ^
                                                                      {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:252:7: warning: repeated branch in conditional chain [bugprone-branch-clone]
      propagate_b_diff(ele, fp, energy, radon, bdiff);
      ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:252:54: note: end of the original
      propagate_b_diff(ele, fp, energy, radon, bdiff);
                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:254:7: note: clone 1 starts here
      propagate_b_diff(ele, fp, energy, radon, bdiff);
      ^
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:253:75: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    else if (ele.pass_method == PassMethod::pm_bnd_mpole_symplectic4_pass)
                                                                          ^
                                                                           {
/home/carneirofc/CNPEM/trackcpp/src/diffusion_matrix.cpp:255:9: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    else
        ^
         {
src/dynap.cpp:27:1: error: unknown type name 'asdads' [clang-diagnostic-error]
asdads extern void naff_traj(const std::vector<Pos<double>> &data,
^
src/dynap.cpp:42:41: warning: variable 'thread_nr_turns' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static unsigned int                     thread_nr_turns = 0;
                                        ^
src/dynap.cpp:43:41: warning: initialization of 'thread_type' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
static std::string                      thread_type = "";
                                        ^
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/basic_string.h:525:7: note: possibly throwing constructor declared here
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      ^
src/dynap.cpp:43:41: warning: variable 'thread_type' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static std::string                      thread_type = "";
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:43:41: warning: redundant string initialization [readability-redundant-string-init]
static std::string                      thread_type = "";
                                        ^~~~~~~~~~~~~~~~
                                        thread_type
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:44:41: warning: variable 'thread_accelerator' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const Accelerator*               thread_accelerator = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:44:62: warning: use nullptr [modernize-use-nullptr]
static const Accelerator*               thread_accelerator = NULL;
                                                             ^~~~
                                                             nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:45:41: warning: variable 'thread_cod' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const std::vector<Pos<double>>*  thread_cod = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:45:54: warning: use nullptr [modernize-use-nullptr]
static const std::vector<Pos<double>>*  thread_cod = NULL;
                                                     ^~~~
                                                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:46:41: warning: variable 'thread_grid' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static std::vector<DynApGridPoint>*     thread_grid = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:46:41: warning: variable 'thread_grid' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:46:55: warning: use nullptr [modernize-use-nullptr]
static std::vector<DynApGridPoint>*     thread_grid = NULL;
                                                      ^~~~
                                                      nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:47:41: warning: variable 'thread_elements' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const std::vector<unsigned int>* thread_elements = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:47:59: warning: use nullptr [modernize-use-nullptr]
static const std::vector<unsigned int>* thread_elements = NULL;
                                                          ^~~~
                                                          nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:48:41: warning: variable 'thread_ma_e0' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const double*                    thread_ma_e0    = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:48:59: warning: use nullptr [modernize-use-nullptr]
static const double*                    thread_ma_e0    = NULL;
                                                          ^~~~
                                                          nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:49:41: warning: variable 'thread_ma_e_tol' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const double*                    thread_ma_e_tol = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:49:59: warning: use nullptr [modernize-use-nullptr]
static const double*                    thread_ma_e_tol = NULL;
                                                          ^~~~
                                                          nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:50:41: warning: variable 'thread_ma_e_init' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const double*                    thread_ma_e_init  = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:50:61: warning: use nullptr [modernize-use-nullptr]
static const double*                    thread_ma_e_init  = NULL;
                                                            ^~~~
                                                            nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:51:41: warning: variable 'thread_ma_e_delta' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const double*                    thread_ma_e_delta = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:51:61: warning: use nullptr [modernize-use-nullptr]
static const double*                    thread_ma_e_delta = NULL;
                                                            ^~~~
                                                            nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:52:41: warning: variable 'thread_ma_nr_steps_back' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const unsigned int*              thread_ma_nr_steps_back = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:52:67: warning: use nullptr [modernize-use-nullptr]
static const unsigned int*              thread_ma_nr_steps_back = NULL;
                                                                  ^~~~
                                                                  nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:53:41: warning: variable 'thread_ma_rescale' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const double*                    thread_ma_rescale = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:53:61: warning: use nullptr [modernize-use-nullptr]
static const double*                    thread_ma_rescale = NULL;
                                                            ^~~~
                                                            nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:54:41: warning: variable 'thread_ma_nr_iterations' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const unsigned int*              thread_ma_nr_iterations = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:54:67: warning: use nullptr [modernize-use-nullptr]
static const unsigned int*              thread_ma_nr_iterations = NULL;
                                                                  ^~~~
                                                                  nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:55:41: warning: variable 'thread_ma_p0' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const Pos<double>*               thread_ma_p0 = NULL;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:55:56: warning: use nullptr [modernize-use-nullptr]
static const Pos<double>*               thread_ma_p0 = NULL;
                                                       ^~~~
                                                       nullptr
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:85:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:85:70: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                     ^~~~~~~~~~~~~~~~~~~~~~       ~
                                                                     emplace_back(
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:98:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p = p0;     // offset
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:99:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.rx += x;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:100:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.ry += y;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:101:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:101:41: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:101:66: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:101:94: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:108:5: warning: uninitialized record type: 'thread_data' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
    ThreadSharedData thread_data;
    ^
                                {}
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:110:28: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    thread_data.nr_tasks = grid.size();
                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:110:33: warning: implicit conversion changes signedness: 'std::vector::size_type' (aka 'unsigned long') to 'long' [clang-diagnostic-sign-conversion]
    thread_data.nr_tasks = grid.size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:142:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:142:70: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                     ^~~~~~~~~~~~~~~~~~~~~~       ~
                                                                     emplace_back(
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:155:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p = p0;     // offset
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:156:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.de += e;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:157:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.rx += x;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:158:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:158:41: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:158:66: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:158:94: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:165:5: warning: uninitialized record type: 'thread_data' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
    ThreadSharedData thread_data;
    ^
                                {}
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:167:28: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    thread_data.nr_tasks = grid.size();
                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:167:33: warning: implicit conversion changes signedness: 'std::vector::size_type' (aka 'unsigned long') to 'long' [clang-diagnostic-sign-conversion]
    thread_data.nr_tasks = grid.size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:246:23: warning: the const qualified parameter 'calc_type' is copied for each invocation; consider making it a reference [performance-unnecessary-value-param]
    const std::string calc_type,
                      ^
                     &
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:265:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (verbose_on) std::cout << get_timestamp() << " calc_type is '" << calc_type << "'" << std::endl;
                 ^
                  {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:272:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:272:70: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                     ^~~~~~~~~~~~~~~~~~~~~~       ~
                                                                     emplace_back(
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:294:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (verbose_on) std::cout << get_timestamp() << " number of elements within range is " << elements.size() << std::endl;
                 ^
                  {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:298:5: warning: uninitialized record type: 'thread_data' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
    ThreadSharedData thread_data;
    ^
                                {}
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:300:28: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    thread_data.nr_tasks = grid.size();
                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:300:33: warning: implicit conversion changes signedness: 'std::vector::size_type' (aka 'unsigned long') to 'long' [clang-diagnostic-sign-conversion]
    thread_data.nr_tasks = grid.size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:679:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:679:70: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                     ^~~~~~~~~~~~~~~~~~~~~~       ~
                                                                     emplace_back(
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:693:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p = p0;     // offset
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:694:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.rx += x;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:695:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.ry += y;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:696:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:696:41: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:696:66: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:696:94: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:697:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux1 = grid[idx].nuy1 = 0.0;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:697:29: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux1 = grid[idx].nuy1 = 0.0;
                            ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:698:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux2 = grid[idx].nuy2 = 0.0;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:698:29: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux2 = grid[idx].nuy2 = 0.0;
                            ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:706:5: warning: uninitialized record type: 'thread_data' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
    ThreadSharedData thread_data;
    ^
                                {}
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:707:28: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    thread_data.nr_tasks = grid.size();
                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:707:33: warning: implicit conversion changes signedness: 'std::vector::size_type' (aka 'unsigned long') to 'long' [clang-diagnostic-sign-conversion]
    thread_data.nr_tasks = grid.size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:739:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:739:70: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
      for(unsigned int i=0; i<1+accelerator.lattice.size(); ++i) cod.push_back(Pos<double>(nan("")));
                                                                     ^~~~~~~~~~~~~~~~~~~~~~       ~
                                                                     emplace_back(
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:751:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p = p0;     // offset
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:752:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.de += e;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:753:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].p.rx += x;  // dynapt around closed-orbit
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:754:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:754:41: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:754:66: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:754:94: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].start_element = 0; grid[idx].lost_turn = 0; grid[idx].lost_element = 0; grid[idx].lost_plane = Plane::no_plane;
                                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:755:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux1 = grid[idx].nuy1 = 0.0;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:755:29: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux1 = grid[idx].nuy1 = 0.0;
                            ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:756:12: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux2 = grid[idx].nuy2 = 0.0;
           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:756:29: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      grid[idx].nux2 = grid[idx].nuy2 = 0.0;
                            ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:764:5: warning: uninitialized record type: 'thread_data' [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
    ThreadSharedData thread_data;
    ^
                                {}
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:765:28: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    thread_data.nr_tasks = grid.size();
                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:765:33: warning: implicit conversion changes signedness: 'std::vector::size_type' (aka 'unsigned long') to 'long' [clang-diagnostic-sign-conversion]
    thread_data.nr_tasks = grid.size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:798:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (verbose_on) std::cout << string_error_messages[status] <<  std::endl;
                 ^
                  {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1076:24: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  Pos<double> p = grid[task_id].p + (*thread_cod)[0]; // adds closed-orbit
                       ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1077:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fabs(p.ry) < tiny_y_amp) p.ry = sgn(p.ry) * tiny_y_amp;
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1085:34: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                            grid[task_id].lost_turn,
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1086:34: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                            grid[task_id].lost_element,
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1087:34: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                            grid[task_id].lost_plane,
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1090:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (lstatus == Status::success) naff_traj(new_pos, grid[task_id].nux1, grid[task_id].nuy1);
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1090:59: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  if (lstatus == Status::success) naff_traj(new_pos, grid[task_id].nux1, grid[task_id].nuy1);
                                                          ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1090:79: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  if (lstatus == Status::success) naff_traj(new_pos, grid[task_id].nux1, grid[task_id].nuy1);
                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1099:30: warning: declaration shadows a local variable [clang-diagnostic-shadow]
    std::vector<Pos<double>> new_pos;
                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1079:28: note: previous declaration is here
  std::vector<Pos<double>> new_pos;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1104:36: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                              grid[task_id].lost_turn,
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1105:36: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                              grid[task_id].lost_element,
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1106:36: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                              grid[task_id].lost_plane,
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1115:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (lstatus == Status::success) naff_traj(new_pos, grid[task_id].nux2, grid[task_id].nuy2);
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1115:61: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (lstatus == Status::success) naff_traj(new_pos, grid[task_id].nux2, grid[task_id].nuy2);
                                                            ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1115:81: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (lstatus == Status::success) naff_traj(new_pos, grid[task_id].nux2, grid[task_id].nuy2);
                                                                                ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1119:7: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
  if (thread_type.compare("xyfmap") == 0) {
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
      thread_type                      "xyfmap"
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:162: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:182: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:202: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:222: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:242: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:262: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:287: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:306: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:332: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                                                                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1121:351: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1123:14: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
  } else if (thread_type.compare("exfmap") == 0) {
             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
             thread_type                      "exfmap"
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:162: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:182: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:202: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:222: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:242: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:262: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:287: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:306: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:332: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                                                                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1125:351: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|rx:%+.4e  nu1:%.4e|%.4e  nu2:%.4e|%.4e  dnu:%.4e|%.4e\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].nux1, grid[task_id].nuy1, grid[task_id].nux2, grid[task_id].nuy2, fabs(grid[task_id].nux2-grid[task_id].nux1), fabs(grid[task_id].nuy2-grid[task_id].nuy1));
                                                                                                                                                                                                                                                                                                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1143:24: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  Pos<double> p = grid[task_id].p + (*thread_cod)[0]; // adds closed-orbit
                       ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1144:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fabs(p.ry) < tiny_y_amp) p.ry = sgn(p.ry) * tiny_y_amp;
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1152:34: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                            grid[task_id].lost_turn,
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1153:34: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                            grid[task_id].lost_element,
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1154:34: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                            grid[task_id].lost_plane,
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1156:7: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
  if (thread_type.compare("xy") == 0) {
      ^~~~~~~~~~~~~~~~~~~~~~~~~    ~
      thread_type                  "xy"
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1158:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1158:152: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1158:172: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1158:192: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                                                               ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1158:217: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  rx:%+.4e|ry:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.rx, grid[task_id].p.ry, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1160:14: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
  } else if (thread_type.compare("ex") == 0) {
             ^~~~~~~~~~~~~~~~~~~~~~~~~    ~
             thread_type                  "ex"
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1162:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|dx:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1162:152: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|dx:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1162:172: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|dx:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                                           ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1162:192: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|dx:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                                                               ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1162:217: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  de:%+.4e|dx:%+.4e  turn:%05i|element:%05i  status:%s\n", thread_id, (1+task_id), thread_data->nr_tasks, grid[task_id].p.de, grid[task_id].p.rx, grid[task_id].lost_turn, grid[task_id].lost_element, string_error_messages[lstatus].c_str());
                                                                                                                                                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1247:13: warning: function 'thread_dynap_acceptance' has cognitive complexity of 37 (threshold 25) [readability-function-cognitive-complexity]
static void thread_dynap_acceptance(ThreadSharedData* thread_data, int thread_id, long task_id) {
            ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1261:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (thread_type == "dynap_ma") {
  ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1264:51: note: +2, including nesting penalty of 1, nesting level increased to 2
    p_init = (*thread_ma_e_init) * ((task_id % 2) ? 1.0 : -1.0);
                                                  ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1265:53: note: +2, including nesting penalty of 1, nesting level increased to 2
    p_delta = (*thread_ma_e_delta) * ((task_id % 2) ? 1.0 : -1.0);
                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1266:10: note: +1, nesting level increased to 1
  } else if (thread_type == "dynap_pxa") {
         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1271:10: note: +1, nesting level increased to 1
  } else if (thread_type == "dynap_pya") {
         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1284:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while (true) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1285:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    while (true) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1288:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      switch (calc_type) {     // sets trial parameter
      ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1296:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (fabs(p.ry) < tiny_y_amp) p.ry = sgn(p.ry) * tiny_y_amp;
      ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1298:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (status != Status::success) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1300:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (calc_type == ma)  { point.p.de = pa; break; };
        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1301:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (calc_type == pxa) { point.p.px = pa; break; };
        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1302:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (calc_type == pya) { point.p.py = pa; break; };
        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1306:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (nr_iterations < 1) break; else nr_iterations--;
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1306:35: note: +1, nesting level increased to 2
    if (nr_iterations < 1) break; else nr_iterations--;
                                  ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1315:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (calc_type == ma) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1319:10: note: +1, nesting level increased to 1
  } else if (calc_type == pxa) {
         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1323:10: note: +1, nesting level increased to 1
  } else if (calc_type == pya) {
         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1252:18: warning: unused variable 'p' [clang-diagnostic-unused-variable]
  DynApGridPoint p = (*thread_grid)[task_id];
                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1252:37: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  DynApGridPoint p = (*thread_grid)[task_id];
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1254:16: warning: variable 'element_nr' is not initialized [cppcoreguidelines-init-variables]
  unsigned int element_nr;
               ^
                          = 0
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1255:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  double p_init, p_delta;
  ^~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1255:10: warning: variable 'p_init' is not initialized [cppcoreguidelines-init-variables]
  double p_init, p_delta;
         ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1255:18: warning: variable 'p_delta' is not initialized [cppcoreguidelines-init-variables]
  double p_init, p_delta;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1260:7: warning: variable 'calc_type' is not initialized [cppcoreguidelines-init-variables]
  int calc_type;
      ^
                = 0
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1262:26: warning: implicit conversion loses integer precision: 'long' to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
    element_nr = task_id / 2;
                         ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1264:37: warning: implicit conversion 'long' -> bool [readability-implicit-bool-conversion]
    p_init = (*thread_ma_e_init) * ((task_id % 2) ? 1.0 : -1.0);
                                    ^
                                                  != 0
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1265:39: warning: implicit conversion 'long' -> bool [readability-implicit-bool-conversion]
    p_delta = (*thread_ma_e_delta) * ((task_id % 2) ? 1.0 : -1.0);
                                      ^
                                                    != 0
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1267:18: warning: implicit conversion loses integer precision: 'long' to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
    element_nr = task_id;
                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1272:18: warning: implicit conversion loses integer precision: 'long' to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
    element_nr = task_id;
                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1288:7: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
      switch (calc_type) {     // sets trial parameter
      ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1295:19: warning: declaration shadows a local variable [clang-diagnostic-shadow]
      Pos<double> p = point.p + (*thread_cod)[start_element];  // p initial condition for tracking
                  ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1252:18: note: previous declaration is here
  DynApGridPoint p = (*thread_grid)[task_id];
                 ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1296:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (fabs(p.ry) < tiny_y_amp) p.ry = sgn(p.ry) * tiny_y_amp;
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1306:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (nr_iterations < 1) break; else nr_iterations--;
                          ^
                           {      } 
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1306:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (nr_iterations < 1) break; else nr_iterations--;
                                      ^
                                       {
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1313:8: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  grid[task_id] = point;
       ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1317:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  element:%04i|de:%+.4e  %s\n", thread_id, (1+task_id), thread_data->nr_tasks, element_nr, grid[task_id].p.de, thread_accelerator->lattice[(*thread_elements)[element_nr]].fam_name.c_str());
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1317:137: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  element:%04i|de:%+.4e  %s\n", thread_id, (1+task_id), thread_data->nr_tasks, element_nr, grid[task_id].p.de, thread_accelerator->lattice[(*thread_elements)[element_nr]].fam_name.c_str());
                                                                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1321:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  element:%04i|px:%+.4e  %s\n", thread_id, (1+task_id), thread_data->nr_tasks, element_nr, grid[task_id].p.px, thread_accelerator->lattice[(*thread_elements)[element_nr]].fam_name.c_str());
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1321:137: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  element:%04i|px:%+.4e  %s\n", thread_id, (1+task_id), thread_data->nr_tasks, element_nr, grid[task_id].p.px, thread_accelerator->lattice[(*thread_elements)[element_nr]].fam_name.c_str());
                                                                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1325:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("thread:%02i|task:%06lu/%06lu  element:%04i|de:%+.4e  %s\n", thread_id, (1+task_id), thread_data->nr_tasks, element_nr, grid[task_id].p.py, thread_accelerator->lattice[(*thread_elements)[element_nr]].fam_name.c_str());
    ^
/home/carneirofc/CNPEM/trackcpp/src/dynap.cpp:1325:137: warning: implicit conversion changes signedness: 'long' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    printf("thread:%02i|task:%06lu/%06lu  element:%04i|de:%+.4e  %s\n", thread_id, (1+task_id), thread_data->nr_tasks, element_nr, grid[task_id].p.py, thread_accelerator->lattice[(*thread_elements)[element_nr]].fam_name.c_str());
                                                                                                                                        ^
src/elements.cpp:23:36: warning: initialization of 'default_polynom' with static storage duration may throw an exception that cannot be caught [cert-err58-cpp]
const std::vector<double> Element::default_polynom = std::vector<double>(3,0);
                                   ^
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_vector.h:522:7: note: possibly throwing constructor declared here
      vector(size_type __n, const value_type& __value,
      ^
src/elements.cpp:27:1: warning: constructor does not initialize these fields: t_in, t_out, r_in, r_out [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
Element::Element(const std::string& fam_name_, const double& length_) :
^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:27:18: warning: pass by value and use std::move [modernize-pass-by-value]
Element::Element(const std::string& fam_name_, const double& length_) :
                 ^~~~~~~~~~~~~~~~~~
                 std::string 
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:30:5: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    t_in[i] = t_out[i] = 0.0;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:30:15: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    t_in[i] = t_out[i] = 0.0;
              ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:33:9: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        r_in[i*6+j] = r_out[i*6+j] = 1.0;
        ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:33:23: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        r_in[i*6+j] = r_out[i*6+j] = 1.0;
                      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:35:9: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        r_in[i*6+j] = r_out[i*6+j] = 0.0;
        ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:35:23: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
        r_in[i*6+j] = r_out[i*6+j] = 0.0;
                      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:42:29: warning: method 'get_pass_method' can be made const [readability-make-member-function-const]
const std::string& Element::get_pass_method() {
                            ^
                                              const
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:43:20: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    return pm_dict[pass_method];
                   ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:47:9: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int i;
        ^
          = 0
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:48:17: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
    for(i = 0; i<pm_dict.size(); i++)
                ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:48:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(i = 0; i<pm_dict.size(); i++)
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:49:21: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
        if (pm_dict[i] == pass_method_)
                    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:49:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (pm_dict[i] == pass_method_)
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:51:11: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
    if (i < pm_dict.size())
          ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:51:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (i < pm_dict.size())
                           ^
                            {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:129:47: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  const Kicktable& kicktable = kicktable_list[idx];
                                              ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:139:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (polynom[i] != 0) order = i+1;
                        ^
                         {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:139:34: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if (polynom[i] != 0) order = i+1;
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:139:35: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
    if (polynom[i] != 0) order = i+1;
                                  ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:141:17: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (order > 0) out << std::endl << label;
                ^
                 {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:143:20: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    out << polynom[i] << " ";
                   ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:147:15: warning: function 'operator==' has cognitive complexity of 43 (threshold 25) [readability-function-cognitive-complexity]
bool Element::operator==(const Element& o) const {
              ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:149:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this == &o) return true;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:150:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->fam_name != o.fam_name) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:151:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->pass_method != o.pass_method) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:152:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->length != o.length) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:153:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->hmin != o.hmin) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:154:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->hmax != o.hmax) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:155:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->vmin != o.vmin) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:156:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->vmax != o.vmax) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:157:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->nr_steps != o.nr_steps) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:161:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((this->pass_method == PassMethod::pm_drift_pass) or
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:161:58: note: +1
    if ((this->pass_method == PassMethod::pm_drift_pass) or
                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:164:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->hkick != o.hkick) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:165:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->vkick != o.vkick) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:166:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->angle != o.angle) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:167:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->angle_in != o.angle_in) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:168:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->angle_out != o.angle_out) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:169:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->gap != o.gap) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:170:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->fint_in != o.fint_in) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:171:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->fint_out != o.fint_out) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:172:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->thin_KL != o.thin_KL) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:173:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->thin_SL != o.thin_SL) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:174:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->frequency != o.frequency) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:175:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->voltage != o.voltage) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:176:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->phase_lag != o.phase_lag) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:177:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->polynom_a != o.polynom_a) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:178:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->polynom_b != o.polynom_b) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:181:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    for(unsigned int i=0; i<m.size(); ++i){
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:182:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      for(unsigned int j=0; j<m[i].size(); ++j)
      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:183:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (m[i][j] != mo[i][j]) return false;
        ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:185:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    for(unsigned int i=0; i<6; ++i) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:186:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (this->t_in[i] != o.t_in[i]) return false;
      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:187:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (this->t_out[i] != o.t_out[i]) return false;
      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:189:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    for(unsigned int i=0; i<36; ++i) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:190:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (this->r_in[i] != o.r_in[i]) return false;
      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:191:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (this->r_out[i] != o.r_out[i]) return false;
      ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:193:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (this->kicktable_idx != o.kicktable_idx) return false;
    ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:149:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this == &o) return true;
                   ^
                    {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:150:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->fam_name != o.fam_name) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:151:44: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->pass_method != o.pass_method) return false;
                                           ^
                                            {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:152:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->length != o.length) return false;
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:153:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->hmin != o.hmin) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:154:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->hmax != o.hmax) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:155:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->vmin != o.vmin) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:156:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->vmax != o.vmax) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:157:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->nr_steps != o.nr_steps) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:162:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
       (this->pass_method == PassMethod::pm_identity_pass)) return true;
                                                           ^
                                                            {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:164:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->hkick != o.hkick) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:165:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->vkick != o.vkick) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:166:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->angle != o.angle) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:167:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->angle_in != o.angle_in) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:168:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->angle_out != o.angle_out) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:169:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->gap != o.gap) return false;
                           ^
                            {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:170:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->fint_in != o.fint_in) return false;
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:171:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->fint_out != o.fint_out) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:172:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->thin_KL != o.thin_KL) return false;
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:173:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->thin_SL != o.thin_SL) return false;
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:174:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->frequency != o.frequency) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:175:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->voltage != o.voltage) return false;
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:176:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->phase_lag != o.phase_lag) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:177:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->polynom_a != o.polynom_a) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:178:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->polynom_b != o.polynom_b) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:182:48: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int j=0; j<m[i].size(); ++j)
                                               ^
                                                {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:183:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (m[i][j] != mo[i][j]) return false;
                                ^
                                 {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:186:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->t_in[i] != o.t_in[i]) return false;
          ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:186:28: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->t_in[i] != o.t_in[i]) return false;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:186:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (this->t_in[i] != o.t_in[i]) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:187:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->t_out[i] != o.t_out[i]) return false;
          ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:187:29: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->t_out[i] != o.t_out[i]) return false;
                            ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:187:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (this->t_out[i] != o.t_out[i]) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:190:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->r_in[i] != o.r_in[i]) return false;
          ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:190:28: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->r_in[i] != o.r_in[i]) return false;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:190:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (this->r_in[i] != o.r_in[i]) return false;
                                     ^
                                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:191:11: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->r_out[i] != o.r_out[i]) return false;
          ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:191:29: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
      if (this->r_out[i] != o.r_out[i]) return false;
                            ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:191:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (this->r_out[i] != o.r_out[i]) return false;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:193:48: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this->kicktable_idx != o.kicktable_idx) return false;
                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:193:56: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    if (this->kicktable_idx != o.kicktable_idx) return false;
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~
    return this->kicktable_idx == o.kicktable_idx
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:201:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.length != 0)   out << std::endl << "length        : " << el.length;
                     ^
                      {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:202:25: warning: misleading indentation; statement is not part of the previous 'if' [clang-diagnostic-misleading-indentation]
                        out << std::endl << "pass_method   : " << pm_dict[el.pass_method];
                        ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:201:3: note: previous statement is here
  if (el.length != 0)   out << std::endl << "length        : " << el.length;
  ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:202:78: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
                        out << std::endl << "pass_method   : " << pm_dict[el.pass_method];
                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:203:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.nr_steps > 1)  out << std::endl << "nr_steps      : " << el.nr_steps;
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:204:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.thin_KL != 0)  out << std::endl << "thin_KL       : " << el.thin_KL;
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:205:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.thin_SL != 0)  out << std::endl << "thin_SL       : " << el.thin_SL;
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:206:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.angle != 0)    out << std::endl << "bending_angle : " << el.angle;
                    ^
                     {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:207:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.angle != 0)    out << std::endl << "entrance_angle: " << el.angle_in;
                    ^
                     {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:208:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.angle != 0)    out << std::endl << "exit_angle    : " << el.angle_out;
                    ^
                     {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:216:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.frequency != 0)out << std::endl << "frequency     : " << el.frequency;
                        ^
                         {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:217:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.voltage != 0)  out << std::endl << "voltage       : " << el.voltage;
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/elements.cpp:218:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (el.phase_lag != 0)out << std::endl << "phase_lag     : " << el.phase_lag;
                        ^
                         {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:27:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(int i=0; i<argc; ++i) args.push_back(std::string(argv[i]));
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:27:31: warning: 'push_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
    for(int i=0; i<argc; ++i) args.push_back(std::string(argv[i]));
                              ^
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:27:36: warning: use emplace_back instead of push_back [hicpp-use-emplace,modernize-use-emplace]
    for(int i=0; i<argc; ++i) args.push_back(std::string(argv[i]));
                                   ^~~~~~~~~~~~~~~~~~~~~~       ~
                                   emplace_back(
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:27:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    for(int i=0; i<argc; ++i) args.push_back(std::string(argv[i]));
                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:30:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "help") return cmd_help(args);
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:31:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "tests") return cmd_tests(args);
                       ^
                        {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:32:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_xy") return cmd_dynap_xy(args);
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:33:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_ex") return cmd_dynap_ex(args);
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:37:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_ma") return cmd_dynap_acceptance(args);
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:38:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_pxa") return cmd_dynap_acceptance(args);
                           ^
                            {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:39:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_pya") return cmd_dynap_acceptance(args);
                           ^
                            {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:40:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_xyfmap") return cmd_dynap_xyfmap(args);
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:41:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "dynap_exfmap") return cmd_dynap_exfmap(args);
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/exec.cpp:42:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd == "track_linepass") return cmd_track_linepass(args);
                                ^
                                 {
src/flat_file.cpp:32:13: warning: function 'has_matrix66' has a definition with different parameter names [readability-inconsistent-declaration-parameter-name]
static bool has_matrix66(const Matrix& r);
            ^
src/flat_file.cpp:485:13: note: the definition seen here
static bool has_matrix66(const Matrix& m) {
            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:32:13: note: differing parameters are named here: ('r'), in definition: ('m')
static bool has_matrix66(const Matrix& r);
            ^                          ~
                                       m
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:40:58: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static Status::type read_flat_file_trackcpp(std::istream&, Accelerator& accelerator);
                                                         ^
                                                          /*fp*/
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:48:19: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (fp.fail()) return Status::file_not_found;
                  ^
                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:66:19: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (fp.fail()) return Status::file_not_found;
                  ^
                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:79:6: warning: function 'write_flat_file_trackcpp' has cognitive complexity of 51 (threshold 25) [readability-function-cognitive-complexity]
void write_flat_file_trackcpp(std::ostream& fp, const Accelerator& accelerator) {
     ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:93:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (auto i=0; i<accelerator.lattice.size(); ++i) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:101:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (pm_dict[e.pass_method].compare("kicktable_pass") == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:106:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.nr_steps != 1) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:111:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_polynom(e.polynom_a)) write_polynom(fp, "polynom_a", e.polynom_a);
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:112:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_polynom(e.polynom_b)) write_polynom(fp, "polynom_b", e.polynom_b);
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:113:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.hmin != 0) { fp << std::setw(pw) << "hmin" << e.hmin << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:114:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.hmax != 0) { fp << std::setw(pw) << "hmax" << e.hmax << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:115:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.vmin != 0) { fp << std::setw(pw) << "vmin" << e.vmin << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:116:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.vmax != 0) { fp << std::setw(pw) << "vmax" << e.vmax << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:117:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.hkick != 0) { fp << std::setw(pw) << "hkick" << e.hkick << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:118:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.vkick != 0) { fp << std::setw(pw) << "vkick" << e.vkick << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:119:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.angle != 0) { fp << std::setw(pw) << "angle" << e.angle << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:120:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.gap != 0) { fp << std::setw(pw) << "gap" << e.gap << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:121:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.fint_in != 0) { fp << std::setw(pw) << "fint_in" << e.fint_in << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:122:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.fint_out != 0) { fp << std::setw(pw) << "fint_out" << e.fint_out << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:123:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.voltage != 0) { fp << std::setw(pw) << "voltage" << e.voltage << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:124:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.frequency != 0) { fp << std::setw(pw) << "frequency" << e.frequency << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:125:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.phase_lag != 0) { fp << std::setw(pw) << "phase_lag" << e.phase_lag << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:126:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.angle_in != 0) { fp << std::setw(pw) << "angle_in" << e.angle_in << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:127:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.angle_out != 0) { fp << std::setw(pw) << "angle_out" << e.angle_out << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:128:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (e.rescale_kicks != 1.0) { fp << std::setw(pw) << "rescale_kicks" << e.rescale_kicks << '\n'; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:129:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_t_vector(e.t_in)) write_6d_vector(fp, "t_in", e.t_in);
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:130:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_t_vector(e.t_out)) write_6d_vector(fp, "t_out", e.t_out);
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:131:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_r_matrix(e.r_in)) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:139:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_r_matrix(e.r_out)) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:147:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (has_matrix66(e.matrix66)) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:93:19: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
  for (auto i=0; i<accelerator.lattice.size(); ++i) {
                  ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:94:44: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    const Element& e = accelerator.lattice[i];
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:100:55: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    fp << std::setw(pw) << "pass_method" << pm_dict[e.pass_method] << '\n';
                                                      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:101:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (pm_dict[e.pass_method].compare("kicktable_pass") == 0) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
        pm_dict[e.pass_method]                              "kicktable_pass"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:101:19: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (pm_dict[e.pass_method].compare("kicktable_pass") == 0) {
                  ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:102:28: warning: implicit conversion changes signedness: 'const int' to 'unsigned int' [clang-diagnostic-sign-conversion]
      unsigned int idx = e.kicktable_idx;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:111:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (has_polynom(e.polynom_a)) write_polynom(fp, "polynom_a", e.polynom_a);
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:112:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (has_polynom(e.polynom_b)) write_polynom(fp, "polynom_b", e.polynom_b);
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:129:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (has_t_vector(e.t_in)) write_6d_vector(fp, "t_in", e.t_in);
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:130:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (has_t_vector(e.t_out)) write_6d_vector(fp, "t_out", e.t_out);
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:161:14: warning: function 'read_flat_file_trackcpp' has cognitive complexity of 228 (threshold 25) [readability-function-cognitive-complexity]
Status::type read_flat_file_trackcpp(std::istream& fp, Accelerator& accelerator) {
             ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:172:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while (std::getline(fp, line)) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:179:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd[0] == '#') continue;
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:180:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd[0] == '%') {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:182:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (cmd.compare("energy") == 0) { ss >> accelerator.energy; continue; }
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:183:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (cmd.compare("harmonic_number") == 0) { ss >> accelerator.harmonic_number; continue; }
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:184:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (cmd.compare("cavity_on") == 0) { accelerator.cavity_on = read_boolean_string(ss); continue; }
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:185:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (cmd.compare("radiation_on") == 0) { accelerator.radiation_on = read_boolean_string(ss); continue; }
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:186:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (cmd.compare("vchamber_on") == 0) { accelerator.vchamber_on = read_boolean_string(ss); continue; }
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:189:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("fam_name") == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:190:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (e.fam_name.compare("") != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:197:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("length")      == 0) { ss >> e.length;    continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:198:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("hmin")        == 0) { ss >> e.hmin; found_hmin = true; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:199:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("hmax")        == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:201:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (not found_hmin){ e.hmin = -e.hmax;}
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:205:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("vmin")        == 0) { ss >> e.vmin; found_vmin = true; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:206:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("vmax")        == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:208:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (not found_vmin){ e.vmin = -e.vmax;}
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:212:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("hkick")       == 0) { ss >> e.hkick;     continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:213:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("vkick")       == 0) { ss >> e.vkick;     continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:214:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("nr_steps")    == 0) { ss >> e.nr_steps;  continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:215:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("angle")       == 0) { ss >> e.angle;     continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:216:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("gap")         == 0) { ss >> e.gap;       continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:217:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("fint_in")     == 0) { ss >> e.fint_in;   continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:218:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("fint_out")    == 0) { ss >> e.fint_out;  continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:219:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("voltage")     == 0) { ss >> e.voltage;   continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:220:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("frequency")   == 0) { ss >> e.frequency; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:221:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("phase_lag")   == 0) { ss >> e.phase_lag; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:222:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("angle_in")    == 0) { ss >> e.angle_in;  continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:223:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("angle_out")   == 0) { ss >> e.angle_out; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:224:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("rescale_kicks")   == 0) { ss >> e.rescale_kicks; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:225:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("t_in")      == 0) { for(auto i=0; i<6; ++i) ss >> e.t_in[i];  continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:225:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("t_in")      == 0) { for(auto i=0; i<6; ++i) ss >> e.t_in[i];  continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:226:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("t_out")     == 0) { for(auto i=0; i<6; ++i) ss >> e.t_out[i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:226:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("t_out")     == 0) { for(auto i=0; i<6; ++i) ss >> e.t_out[i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:227:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("rx|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[0*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:227:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("rx|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[0*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:228:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("px|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[1*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:228:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("px|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[1*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:229:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("ry|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[2*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:229:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("ry|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[2*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:230:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("py|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[3*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:230:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("py|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[3*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:231:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("de|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[4*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:231:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("de|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[4*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:232:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("dl|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[5*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:232:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("dl|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[5*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:233:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("rx|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[0*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:233:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("rx|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[0*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:234:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("px|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[1*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:234:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("px|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[1*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:235:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("ry|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[2*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:235:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("ry|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[2*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:236:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("py|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[3*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:236:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("py|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[3*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:237:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("de|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[4*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:237:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("de|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[4*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:238:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("dl|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[5*6+i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:238:42: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("dl|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[5*6+i]; continue; }
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:239:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("rx|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[0][i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:239:45: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("rx|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[0][i]; continue; }
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:240:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("px|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[1][i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:240:45: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("px|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[1][i]; continue; }
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:241:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("ry|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[2][i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:241:45: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("ry|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[2][i]; continue; }
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:242:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("py|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[3][i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:242:45: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("py|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[3][i]; continue; }
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:243:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("de|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[4][i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:243:45: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("de|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[4][i]; continue; }
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:244:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("dl|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[5][i]; continue; }
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:244:45: note: +3, including nesting penalty of 2, nesting level increased to 3
    if (cmd.compare("dl|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[5][i]; continue; }
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:245:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("pass_method") == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:248:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for(unsigned int i = 0; i<pass_methods.size(); ++i) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:249:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (pass_method.compare(pass_methods[i]) == 0) {
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:255:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (found_pm) continue;
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:258:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("kicktable_fname") == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:261:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (idx < 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:263:9: note: +1, nesting level increased to 3
      } else {
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:268:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("polynom_a") == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:272:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      while (not ss.eof()) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:274:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (ss.eof()) break;
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:276:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (o+1 > size) size = o+1;
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:278:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (size > 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:280:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        for(unsigned int i=0; i<order.size(); ++i) e.polynom_a[order[i]] = multipole[i];
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:285:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (cmd.compare("polynom_b") == 0) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:289:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      while (not ss.eof()) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:291:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (ss.eof()) break;
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:293:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (o+1 > size) size = o+1;
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:295:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (size > 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:297:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        for(unsigned int i=0; i<order.size(); ++i) e.polynom_b[order[i]] = multipole[i];
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:302:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (line.size()<2) continue;
    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:306:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (e.fam_name.compare("") != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:179:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd[0] == '#') continue;
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:182:11: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
      if (cmd.compare("energy") == 0) { ss >> accelerator.energy; continue; }
          ^~~~~~~~~~~~~~~~~~~~~    ~
          cmd                      "energy"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:183:11: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
      if (cmd.compare("harmonic_number") == 0) { ss >> accelerator.harmonic_number; continue; }
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
          cmd                               "harmonic_number"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:184:11: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
      if (cmd.compare("cavity_on") == 0) { accelerator.cavity_on = read_boolean_string(ss); continue; }
          ^~~~~~~~~~~~~~~~~~~~~~~~    ~
          cmd                         "cavity_on"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:185:11: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
      if (cmd.compare("radiation_on") == 0) { accelerator.radiation_on = read_boolean_string(ss); continue; }
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
          cmd                            "radiation_on"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:186:11: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
      if (cmd.compare("vchamber_on") == 0) { accelerator.vchamber_on = read_boolean_string(ss); continue; }
          ^~~~~~~~~~~~~~~~~~~~~~~~~~    ~
          cmd                           "vchamber_on"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:189:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("fam_name") == 0) {
        ^~~~~~~~~~~~~~~~~~~~~~~    ~
        cmd                        "fam_name"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:190:11: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
      if (e.fam_name.compare("") != 0) {
          ^~~~~~~~~~~~~~~~~~~~~~    ~
          e.fam_name                ""
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:197:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("length")      == 0) { ss >> e.length;    continue; }
        ^~~~~~~~~~~~~~~~~~~~~         ~
        cmd                           "length"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:198:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("hmin")        == 0) { ss >> e.hmin; found_hmin = true; continue; }
        ^~~~~~~~~~~~~~~~~~~           ~
        cmd                           "hmin"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:199:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("hmax")        == 0) {
        ^~~~~~~~~~~~~~~~~~~           ~
        cmd                           "hmax"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:205:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("vmin")        == 0) { ss >> e.vmin; found_vmin = true; continue; }
        ^~~~~~~~~~~~~~~~~~~           ~
        cmd                           "vmin"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:206:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("vmax")        == 0) {
        ^~~~~~~~~~~~~~~~~~~           ~
        cmd                           "vmax"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:212:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("hkick")       == 0) { ss >> e.hkick;     continue; }
        ^~~~~~~~~~~~~~~~~~~~          ~
        cmd                           "hkick"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:213:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("vkick")       == 0) { ss >> e.vkick;     continue; }
        ^~~~~~~~~~~~~~~~~~~~          ~
        cmd                           "vkick"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:214:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("nr_steps")    == 0) { ss >> e.nr_steps;  continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~       ~
        cmd                           "nr_steps"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:215:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("angle")       == 0) { ss >> e.angle;     continue; }
        ^~~~~~~~~~~~~~~~~~~~          ~
        cmd                           "angle"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:216:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("gap")         == 0) { ss >> e.gap;       continue; }
        ^~~~~~~~~~~~~~~~~~            ~
        cmd                           "gap"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:217:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("fint_in")     == 0) { ss >> e.fint_in;   continue; }
        ^~~~~~~~~~~~~~~~~~~~~~        ~
        cmd                           "fint_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:218:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("fint_out")    == 0) { ss >> e.fint_out;  continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~       ~
        cmd                           "fint_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:219:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("voltage")     == 0) { ss >> e.voltage;   continue; }
        ^~~~~~~~~~~~~~~~~~~~~~        ~
        cmd                           "voltage"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:220:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("frequency")   == 0) { ss >> e.frequency; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                           "frequency"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:221:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("phase_lag")   == 0) { ss >> e.phase_lag; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                           "phase_lag"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:222:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("angle_in")    == 0) { ss >> e.angle_in;  continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~       ~
        cmd                           "angle_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:223:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("angle_out")   == 0) { ss >> e.angle_out; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                           "angle_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:224:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("rescale_kicks")   == 0) { ss >> e.rescale_kicks; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                               "rescale_kicks"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:225:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("t_in")      == 0) { for(auto i=0; i<6; ++i) ss >> e.t_in[i];  continue; }
        ^~~~~~~~~~~~~~~~~~~         ~
        cmd                         "t_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:225:42: warning: use range-based for loop instead [modernize-loop-convert]
    if (cmd.compare("t_in")      == 0) { for(auto i=0; i<6; ++i) ss >> e.t_in[i];  continue; }
                                         ^  ~~~~~~~~~~~~~~~~~~~~       ~~~~~~~~~
                                            (double & i : e.t_in)      i
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:225:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("t_in")      == 0) { for(auto i=0; i<6; ++i) ss >> e.t_in[i];  continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:225:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("t_in")      == 0) { for(auto i=0; i<6; ++i) ss >> e.t_in[i];  continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:226:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("t_out")     == 0) { for(auto i=0; i<6; ++i) ss >> e.t_out[i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~        ~
        cmd                         "t_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:226:42: warning: use range-based for loop instead [modernize-loop-convert]
    if (cmd.compare("t_out")     == 0) { for(auto i=0; i<6; ++i) ss >> e.t_out[i]; continue; }
                                         ^  ~~~~~~~~~~~~~~~~~~~~       ~~~~~~~~~~
                                            (double & i : e.t_out)     i
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:226:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("t_out")     == 0) { for(auto i=0; i<6; ++i) ss >> e.t_out[i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:226:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("t_out")     == 0) { for(auto i=0; i<6; ++i) ss >> e.t_out[i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:227:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("rx|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[0*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                         "rx|r_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:227:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("rx|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[0*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:227:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("rx|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[0*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:228:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("px|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[1*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                         "px|r_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:228:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("px|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[1*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:228:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("px|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[1*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:229:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("ry|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[2*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                         "ry|r_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:229:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("ry|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[2*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:229:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("ry|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[2*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:230:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("py|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[3*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                         "py|r_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:230:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("py|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[3*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:230:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("py|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[3*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:231:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("de|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[4*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                         "de|r_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:231:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("de|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[4*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:231:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("de|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[4*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:232:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("dl|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[5*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~      ~
        cmd                         "dl|r_in"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:232:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("dl|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[5*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:232:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("dl|r_in")   == 0) { for(auto i=0; i<6; ++i) ss >> e.r_in[5*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:233:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("rx|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[0*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                         "rx|r_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:233:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("rx|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[0*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:233:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("rx|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[0*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:234:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("px|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[1*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                         "px|r_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:234:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("px|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[1*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:234:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("px|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[1*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:235:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("ry|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[2*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                         "ry|r_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:235:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("ry|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[2*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:235:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("ry|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[2*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:236:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("py|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[3*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                         "py|r_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:236:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("py|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[3*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:236:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("py|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[3*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:237:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("de|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[4*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                         "de|r_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:237:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("de|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[4*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:237:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("de|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[4*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:238:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("dl|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[5*6+i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                         "dl|r_out"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:238:65: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("dl|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[5*6+i]; continue; }
                                                                ^
                                                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:238:72: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (cmd.compare("dl|r_out")  == 0) { for(auto i=0; i<6; ++i) ss >> e.r_out[5*6+i]; continue; }
                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:239:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("rx|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[0][i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                            "rx|matrix66"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:239:68: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("rx|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[0][i]; continue; }
                                                                   ^
                                                                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:239:89: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (cmd.compare("rx|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[0][i]; continue; }
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:240:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("px|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[1][i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                            "px|matrix66"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:240:68: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("px|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[1][i]; continue; }
                                                                   ^
                                                                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:240:89: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (cmd.compare("px|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[1][i]; continue; }
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:241:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("ry|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[2][i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                            "ry|matrix66"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:241:68: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("ry|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[2][i]; continue; }
                                                                   ^
                                                                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:241:89: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (cmd.compare("ry|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[2][i]; continue; }
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:242:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("py|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[3][i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                            "py|matrix66"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:242:68: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("py|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[3][i]; continue; }
                                                                   ^
                                                                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:242:89: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (cmd.compare("py|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[3][i]; continue; }
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:243:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("de|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[4][i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                            "de|matrix66"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:243:68: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("de|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[4][i]; continue; }
                                                                   ^
                                                                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:243:89: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (cmd.compare("de|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[4][i]; continue; }
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:244:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("dl|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[5][i]; continue; }
        ^~~~~~~~~~~~~~~~~~~~~~~~~~     ~
        cmd                            "dl|matrix66"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:244:68: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cmd.compare("dl|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[5][i]; continue; }
                                                                   ^
                                                                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:244:89: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (cmd.compare("dl|matrix66")  == 0) { for(auto i=0; i<6; ++i) ss >> e.matrix66[5][i]; continue; }
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:245:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("pass_method") == 0) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~    ~
        cmd                           "pass_method"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:248:32: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
      for(unsigned int i = 0; i<pass_methods.size(); ++i) {
                               ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:249:13: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
        if (pass_method.compare(pass_methods[i]) == 0) {
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
            pass_method                             pass_methods[i]
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:249:46: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        if (pass_method.compare(pass_methods[i]) == 0) {
                                             ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:249:46: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:250:27: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
          e.pass_method = i;
                          ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:250:27: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:255:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (found_pm) continue;
                   ^
                    {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:258:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("kicktable_fname") == 0) {
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
        cmd                               "kicktable_fname"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:268:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("polynom_a") == 0) {
        ^~~~~~~~~~~~~~~~~~~~~~~~    ~
        cmd                         "polynom_a"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:273:22: warning: variable 'o' is not initialized [cppcoreguidelines-init-variables]
        unsigned int o; double m; ss >> o >> m;
                     ^
                       = 0
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:273:32: warning: variable 'm' is not initialized [cppcoreguidelines-init-variables]
        unsigned int o; double m; ss >> o >> m;
                               ^
                                 = NAN
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:274:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (ss.eof()) break;
                     ^
                      {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:276:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (o+1 > size) size = o+1;
                       ^
                        {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:280:51: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        for(unsigned int i=0; i<order.size(); ++i) e.polynom_a[order[i]] = multipole[i];
                                                  ^
                                                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:285:9: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
    if (cmd.compare("polynom_b") == 0) {
        ^~~~~~~~~~~~~~~~~~~~~~~~    ~
        cmd                         "polynom_b"
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:290:22: warning: variable 'o' is not initialized [cppcoreguidelines-init-variables]
        unsigned int o; double m; ss >> o >> m;
                     ^
                       = 0
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:290:32: warning: variable 'm' is not initialized [cppcoreguidelines-init-variables]
        unsigned int o; double m; ss >> o >> m;
                               ^
                                 = NAN
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:291:22: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (ss.eof()) break;
                     ^
                      {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:293:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (o+1 > size) size = o+1;
                       ^
                        {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:297:51: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        for(unsigned int i=0; i<order.size(); ++i) e.polynom_b[order[i]] = multipole[i];
                                                  ^
                                                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:302:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (line.size()<2) continue;
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:306:7: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
  if (e.fam_name.compare("") != 0) {
      ^~~~~~~~~~~~~~~~~~~~~~    ~
      e.fam_name                ""
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:314:21: warning: unused function 'read_flat_file_tracy' [clang-diagnostic-unused-function]
static Status::type read_flat_file_tracy(const std::string& filename, Accelerator& accelerator) {
                    ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:317:17: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fp.fail()) return Status::file_not_found;
                ^
                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  int Fnum, Knum, idx, type, method;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:7: warning: variable 'Fnum' is not initialized [cppcoreguidelines-init-variables]
  int Fnum, Knum, idx, type, method;
      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:13: warning: variable 'Knum' is not initialized [cppcoreguidelines-init-variables]
  int Fnum, Knum, idx, type, method;
            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:19: warning: variable 'idx' is not initialized [cppcoreguidelines-init-variables]
  int Fnum, Knum, idx, type, method;
                  ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:24: warning: variable 'type' is not initialized [cppcoreguidelines-init-variables]
  int Fnum, Knum, idx, type, method;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:30: warning: variable 'method' is not initialized [cppcoreguidelines-init-variables]
  int Fnum, Knum, idx, type, method;
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:326:59: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    fp >> e.fam_name >> Fnum >> Knum >> idx; if (fp.eof()) break;
                                                          ^
                                                           {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:327:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (e.fam_name == "prtmfile:") return Status::flat_file_error;
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:329:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (e.nr_steps < 1) e.nr_steps = 1;
                       ^
                        {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:353:16: warning: variable 'tmpdbl' is not initialized [cppcoreguidelines-init-variables]
        double tmpdbl; fp >> tmpdbl >> tmpdbl >> tmpdbl;
               ^
                      = NAN
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:354:16: warning: variable 'tmpint' is not initialized [cppcoreguidelines-init-variables]
        int    tmpint; fp >> tmpint >> tmpint;
               ^
                      = 0
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:361:13: warning: variable 'hnumber' is not initialized [cppcoreguidelines-init-variables]
        int hnumber; double energy;
            ^
                    = 0
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:361:29: warning: variable 'energy' is not initialized [cppcoreguidelines-init-variables]
        int hnumber; double energy;
                            ^
                                   = NAN
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:369:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double PdTPar, PdTerr;
        ^~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:369:16: warning: variable 'PdTPar' is not initialized [cppcoreguidelines-init-variables]
        double PdTPar, PdTerr;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:369:24: warning: variable 'PdTerr' is not initialized [cppcoreguidelines-init-variables]
        double PdTPar, PdTerr;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:373:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (e.angle != 0)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:375:13: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        else
            ^
             {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:394:16: warning: variable 'tmpdbl' is not initialized [cppcoreguidelines-init-variables]
        double tmpdbl; std::string filename;
               ^
                      = NAN
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:394:36: warning: declaration shadows a local variable [clang-diagnostic-shadow]
        double tmpdbl; std::string filename;
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:314:61: note: previous declaration is here
static Status::type read_flat_file_tracy(const std::string& filename, Accelerator& accelerator) {
                                                            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:396:13: warning: declaration shadows a local variable [clang-diagnostic-shadow]
        int idx = add_kicktable(filename);
            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:319:19: note: previous declaration is here
  int Fnum, Knum, idx, type, method;
                  ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:399:39: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
          e.length = kicktable_list[e.kicktable_idx].length;
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:401:15: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        } else return Status::file_not_found;
              ^
               {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:423:79: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
  unsigned int size = (e.polynom_a.size() > e.polynom_b.size()) ? e.polynom_a.size() : e.polynom_b.size();
                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:423:100: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
  unsigned int size = (e.polynom_a.size() > e.polynom_b.size()) ? e.polynom_a.size() : e.polynom_b.size();
                                                                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:430:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  unsigned int nr_monomials, n_design, order;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:430:16: warning: variable 'nr_monomials' is not initialized [cppcoreguidelines-init-variables]
  unsigned int nr_monomials, n_design, order;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:430:30: warning: variable 'n_design' is not initialized [cppcoreguidelines-init-variables]
  unsigned int nr_monomials, n_design, order;
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:430:40: warning: variable 'order' is not initialized [cppcoreguidelines-init-variables]
  unsigned int nr_monomials, n_design, order;
                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:447:7: warning: do not use 'compare' to test equality of strings; use the string equality operator instead [readability-string-compare]
  if (s.compare("true") == 0)
      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:447:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (s.compare("true") == 0)
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:448:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return true;
~~~~~~~~~~~^~~~~
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:449:7: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:454:13: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (value)
            ^
             {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:456:7: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:461:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<6; ++i)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:462:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (t[i] != 0)
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:462:19: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (t[i] != 0)
                  ^
                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:469:9: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  const double id[36] = {
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:478:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<36; ++i)
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:479:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    if (r[i] != id[i])
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:479:17: warning: do not use array subscript when the index is not an integer constant expression; use gsl::at() instead [cppcoreguidelines-pro-bounds-constant-array-index]
    if (r[i] != id[i])
                ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:479:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (r[i] != id[i])
                      ^
                       {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:486:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<6; ++i)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:487:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for (int j=0; j<6; ++j)
                           ^
                            {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:488:11: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      if ((i != j) & (m[i][j] != 0.0))
          ^
          (                          ) != 0
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:488:11: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
      if ((i != j) & (m[i][j] != 0.0))
          ^
          static_cast<int>
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:488:22: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
      if ((i != j) & (m[i][j] != 0.0))
                     ^
                     static_cast<int>
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:488:25: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      if ((i != j) & (m[i][j] != 0.0))
                        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:488:28: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      if ((i != j) & (m[i][j] != 0.0))
                           ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:488:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if ((i != j) & (m[i][j] != 0.0))
                                      ^
                                       {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:489:9: warning: repeated branch in conditional chain [bugprone-branch-clone]
        return true;
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:489:20: note: end of the original
        return true;
                   ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:491:9: note: clone 1 starts here
        return true;
        ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:490:16: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
      else if ((i == j) & (m[i][j] != 1.0))
               ^
               (                          ) != 0
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:490:16: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
      else if ((i == j) & (m[i][j] != 1.0))
               ^
               static_cast<int>
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:490:27: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
      else if ((i == j) & (m[i][j] != 1.0))
                          ^
                          static_cast<int>
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:490:30: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      else if ((i == j) & (m[i][j] != 1.0))
                             ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:490:33: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      else if ((i == j) & (m[i][j] != 1.0))
                                ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:490:44: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((i == j) & (m[i][j] != 1.0))
                                           ^
                                            {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:496:3: warning: use range-based for loop instead [modernize-loop-convert]
  for (int i=0; i<p.size(); ++i)
  ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~
      (double i : p)
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:496:18: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
  for (int i=0; i<p.size(); ++i)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:496:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<p.size(); ++i)
                                ^
                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:497:11: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (p[i] != 0)
          ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:497:19: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (p[i] != 0)
                  ^
                   {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:505:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<6; ++i)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:506:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    fp << t[i] << "  ";
          ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:512:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<6; ++i)
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:513:13: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    fp << t[i] << "  ";
            ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:519:18: warning: comparison of integers of different signs: 'int' and 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-compare]
  for (int i=0; i<p.size(); ++i)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:519:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (int i=0; i<p.size(); ++i)
                                ^
                                 {
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:520:11: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if (p[i] != 0) {
          ^
/home/carneirofc/CNPEM/trackcpp/src/flat_file.cpp:524:15: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
      fp << p[i] << ' ';
              ^
src/kicktable.cpp:23:24: warning: variable 'kicktable_list' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
std::vector<Kicktable> kicktable_list;
                       ^
src/kicktable.cpp:25:1: warning: constructor does not initialize these fields: length [cppcoreguidelines-pro-type-member-init,hicpp-member-init]
Kicktable::Kicktable(const std::string& filename_) :
^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:26:3: warning: redundant string initialization [readability-redundant-string-init]
  filename(""),
  ^~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:31:7: warning: the 'empty' method should be used to check for emptiness instead of comparing to an empty object [readability-container-size-empty]
  if (filename_ != "") {
      ^~~~~~~~~~~~~~~
      !filename_.empty()
/../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/basic_string.h:1009:7: note: method 'basic_string<char>'::empty() defined here
      empty() const _GLIBCXX_NOEXCEPT
      ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:37:25: warning: function 'load_from_file' has cognitive complexity of 28 (threshold 25) [readability-function-cognitive-complexity]
Status::type Kicktable::load_from_file(const std::string& filename_) {
                        ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:40:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (fp.fail()) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:69:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for(unsigned int i=0; i<this->x_nrpts; ++i) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:71:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::isnan(x_min) or posx < x_min) x_min = posx;
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:71:27: note: +1
    if (std::isnan(x_min) or posx < x_min) x_min = posx;
                          ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:72:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::isnan(x_max) or posx > x_max) x_max = posx;
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:72:27: note: +1
    if (std::isnan(x_max) or posx > x_max) x_max = posx;
                          ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:74:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for(int j=y_nrpts-1; j>=0; --j) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:76:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::isnan(y_min) or posy < y_min) y_min = posy;
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:76:27: note: +1
    if (std::isnan(y_min) or posy < y_min) y_min = posy;
                          ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:77:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (std::isnan(y_max) or posy > y_max) y_max = posy;
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:77:27: note: +1
    if (std::isnan(y_max) or posy > y_max) y_max = posy;
                          ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:78:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for(unsigned int i=0; i<x_nrpts; ++i)
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:86:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for(unsigned int i=0; i<this->x_nrpts; ++i) { double posx; fp >> posx; }
  ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:87:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for(int j=y_nrpts-1; j>=0; --j) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:89:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for(unsigned int i=0; i<x_nrpts; ++i)
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:94:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (yvec.size() > 1 and yvec[1] > yvec[0]) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:94:23: note: +1
  if (yvec.size() > 1 and yvec[1] > yvec[0]) {
                      ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:95:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    for(unsigned int i=0; i<this->x_nrpts; ++i) {
    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:96:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      for(unsigned int j=0; j<this->y_nrpts/2; ++j) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:70:12: warning: variable 'posx' is not initialized [cppcoreguidelines-init-variables]
    double posx; fp >> posx;
           ^
                = NAN
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:71:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (std::isnan(x_min) or posx < x_min) x_min = posx;
                                          ^
                                           {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:72:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (std::isnan(x_max) or posx > x_max) x_max = posx;
                                          ^
                                           {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:74:13: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  for(int j=y_nrpts-1; j>=0; --j) {
            ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:74:20: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
  for(int j=y_nrpts-1; j>=0; --j) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:75:12: warning: variable 'posy' is not initialized [cppcoreguidelines-init-variables]
    double posy; fp >> posy; yvec.push_back(posy);
           ^
                = NAN
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:76:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (std::isnan(y_min) or posy < y_min) y_min = posy;
                                          ^
                                           {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:77:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (std::isnan(y_max) or posy > y_max) y_max = posy;
                                          ^
                                           {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:78:42: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int i=0; i<x_nrpts; ++i)
                                         ^
                                          {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:79:36: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
      fp >> x_kick[this->get_idx(i,j)];
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:86:56: warning: variable 'posx' is not initialized [cppcoreguidelines-init-variables]
  for(unsigned int i=0; i<this->x_nrpts; ++i) { double posx; fp >> posx; }
                                                       ^
                                                            = NAN
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:87:13: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  for(int j=y_nrpts-1; j>=0; --j) {
            ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:87:20: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
  for(int j=y_nrpts-1; j>=0; --j) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:88:12: warning: variable 'posy' is not initialized [cppcoreguidelines-init-variables]
    double posy; fp >> posy;
           ^
                = NAN
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:89:42: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int i=0; i<x_nrpts; ++i)
                                         ^
                                          {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:90:36: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
      fp >> y_kick[this->get_idx(i,j)];
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:111:14: warning: narrowing conversion from 'unsigned int' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      return i;
             ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:111:14: warning: implicit conversion changes signedness: 'unsigned int' to 'int' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:121:21: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    kicktable_idx = kicktable_list.size() - 1;
                    ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:121:43: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [clang-diagnostic-shorten-64-to-32]
    kicktable_idx = kicktable_list.size() - 1;
                                          ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:127:47: warning: declaration shadows a variable in the global namespace [clang-diagnostic-shadow]
void clear_kicktables(std::vector<Kicktable>& kicktable_list) {
                                              ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:23:24: note: previous declaration is here
std::vector<Kicktable> kicktable_list;
                       ^
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:132:18: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this == &o) return true;
                 ^
                  {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:133:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->length != o.length) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:134:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->x_min != o.x_min) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:135:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->x_max != o.x_max) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:136:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->y_min != o.y_min) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:137:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->y_max != o.y_max) return false;
                             ^
                              {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:138:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->x_kick != o.x_kick) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/kicktable.cpp:139:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (this->y_kick != o.y_kick) return false;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:27:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(unsigned int i=0; i<v_.size(); ++i) {
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     (const auto & i : v_)
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:66:53: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (idx[idx.size()-1] == (int) (1+lattice.size()))
                                                    ^
                                                     {
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:78:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(unsigned int i=0; i<lattice.size(); ++i) {
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     (auto & i : lattice)
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:97:19: warning: narrowing conversion from 'unsigned int' to signed type 'std::vector<int>::value_type' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      r.push_back(i);
                  ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:97:19: warning: implicit conversion changes signedness: 'unsigned int' to 'std::vector<int>::value_type' (aka 'int') [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:107:19: warning: narrowing conversion from 'unsigned int' to signed type 'std::vector<int>::value_type' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      r.push_back(i);
                  ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:107:19: warning: implicit conversion changes signedness: 'unsigned int' to 'std::vector<int>::value_type' (aka 'int') [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:117:19: warning: narrowing conversion from 'unsigned int' to signed type 'std::vector<int>::value_type' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      r.push_back(i);
                  ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:117:19: warning: implicit conversion changes signedness: 'unsigned int' to 'std::vector<int>::value_type' (aka 'int') [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:127:19: warning: narrowing conversion from 'unsigned int' to signed type 'std::vector<int>::value_type' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      r.push_back(i);
                  ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:127:19: warning: implicit conversion changes signedness: 'unsigned int' to 'std::vector<int>::value_type' (aka 'int') [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:137:19: warning: narrowing conversion from 'unsigned int' to signed type 'std::vector<int>::value_type' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      r.push_back(i);
                  ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:137:19: warning: implicit conversion changes signedness: 'unsigned int' to 'std::vector<int>::value_type' (aka 'int') [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:146:42: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if ((reverse and (pm_dict[lattice[i].pass_method] != value)) or (!reverse and (pm_dict[lattice[i].pass_method] == value))) {
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:146:103: warning: implicit conversion changes signedness: 'const int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    if ((reverse and (pm_dict[lattice[i].pass_method] != value)) or (!reverse and (pm_dict[lattice[i].pass_method] == value))) {
                                                                                                      ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:147:19: warning: narrowing conversion from 'unsigned int' to signed type 'std::vector<int>::value_type' (aka 'int') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
      r.push_back(i);
                  ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:147:19: warning: implicit conversion changes signedness: 'unsigned int' to 'std::vector<int>::value_type' (aka 'int') [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:164:13: warning: implicit conversion changes signedness: '__gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type' (aka 'int') to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    lattice[bends[i]].nr_steps = nr_steps;
            ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:171:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(unsigned int i=0; i<quads.size(); ++i) lattice[quads[i]].nr_steps = 10;
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         ~~~~~~~~
     (int quad : quads)                              quad
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:171:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<quads.size(); ++i) lattice[quads[i]].nr_steps = 10;
                                            ^
                                             {
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:171:54: warning: implicit conversion changes signedness: '__gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type' (aka 'int') to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  for(unsigned int i=0; i<quads.size(); ++i) lattice[quads[i]].nr_steps = 10;
                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:177:3: warning: use range-based for loop instead [modernize-loop-convert]
  for(unsigned int i=0; i<sexts.size(); ++i) lattice[sexts[i]].nr_steps = 5;
  ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~         ~~~~~~~~
     (int sext : sexts)                              sext
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:177:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<sexts.size(); ++i) lattice[sexts[i]].nr_steps = 5;
                                            ^
                                             {
/home/carneirofc/CNPEM/trackcpp/src/lattice.cpp:177:54: warning: implicit conversion changes signedness: '__gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type' (aka 'int') to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  for(unsigned int i=0; i<sexts.size(); ++i) lattice[sexts[i]].nr_steps = 5;
                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:25:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<b.size(); ++j) v[i] += m[i][j] * b[j];
                                          ^
                                           {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:32:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<m.size(); ++i) printf("%+.4e ", m[i]);
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:32:42: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  for(unsigned int i=0; i<m.size(); ++i) printf("%+.4e ", m[i]);
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:33:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  printf("\n");
  ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:39:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<m.size(); ++i)
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:40:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(unsigned int j=0; j<m[i].size(); ++j)
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (double j : m)
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:40:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<m[i].size(); ++j)
                                             ^
                                              {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:47:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<m.size(); ++i)
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:48:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<m[i].size(); ++j)
                                             ^
                                              {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:49:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (j==i) m[i][j] = v; else m[i][j] = 0.0;
               ^
                {            } 
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:49:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (j==i) m[i][j] = v; else m[i][j] = 0.0;
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:55:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<m.size(); ++i)
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:56:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(unsigned int j=0; j<m[i].size(); ++j)
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (double & j : m)
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:56:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<m[i].size(); ++j)
                                             ^
                                              {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:63:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (size < 0) size = m.size();
               ^
                {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:63:24: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  if (size < 0) size = m.size();
                       ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:63:26: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'int' [clang-diagnostic-shorten-64-to-32]
  if (size < 0) size = m.size();
                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:64:26: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<size; ++i)
                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:64:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<size; ++i)
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:65:30: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
    for(unsigned int j=i+1; j<size; ++j)
                             ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:65:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=i+1; j<size; ++j)
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:73:5: warning: use range-based for loop instead [modernize-loop-convert]
    for(unsigned int j=0; j<m[i].size(); ++j) {
    ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       (double j : m)
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:74:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      printf("%+.4e ", m[i][j]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:76:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("\n");
    ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:85:20: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
    Vector v(m2[i].size());
                   ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:86:43: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<v.size(); ++j)
                                          ^
                                           {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:95:30: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const unsigned int' [clang-diagnostic-shorten-64-to-32]
  const unsigned int nr = m1.size();
                             ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:96:33: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const unsigned int' [clang-diagnostic-shorten-64-to-32]
  const unsigned int nc = m2[0].size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:100:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<nc; ++j)
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:101:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int k=0; k<m2.size(); ++k) m[i][j] += m1[i][k] * m2[k][j];
                                             ^
                                              {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:109:30: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const unsigned int' [clang-diagnostic-shorten-64-to-32]
  const unsigned int nr = m1.size();
                             ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:110:33: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const unsigned int' [clang-diagnostic-shorten-64-to-32]
  const unsigned int nc = m2[0].size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:113:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<nc; ++j)
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:114:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int k=0; k<m2.size(); ++k) m[i][j] += m1[i][k] * m2[k][j];
                                             ^
                                              {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:123:30: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const unsigned int' [clang-diagnostic-shorten-64-to-32]
  const unsigned int nr = m1.size();
                             ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:124:33: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'const unsigned int' [clang-diagnostic-shorten-64-to-32]
  const unsigned int nc = m2[0].size();
                                ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:127:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<nc; ++j)
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:128:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      for(unsigned int k=0; k<m2.size(); ++k) m[i][j] += m1[i][k] * m2[k][j];
                                             ^
                                              {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:146:26: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<nr; ++i) {
                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:147:37: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    s.push_back(std::vector<double>(nc,0.0));
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:148:28: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
    for(unsigned int j=0; j<nc; ++j) s[i][j] = m[r+i][c+j];
                           ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:148:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<nc; ++j) s[i][j] = m[r+i][c+j];
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:155:26: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
  for(unsigned int i=0; i<nr; ++i) {
                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:156:37: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    s.push_back(std::vector<double>(nc,0.0));
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:157:28: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
    for(unsigned int j=0; j<nc; ++j) m[r+i][c+j] = s[i][j];
                           ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:157:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<nc; ++j) m[r+i][c+j] = s[i][j];
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:174:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (size < 0) size = m.size();
               ^
                {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:174:24: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  if (size < 0) size = m.size();
                       ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:174:26: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'int' [clang-diagnostic-shorten-64-to-32]
  if (size < 0) size = m.size();
                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:187:15: warning: implicit conversion changes signedness: 'int' to 'unsigned int' [clang-diagnostic-sign-conversion]
    Matrix m1(size);
              ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:201:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<6; ++i)
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:202:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<6; ++j) gsl_matrix_set(m,i,j,M[i][j]);
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:203:7: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  int s;
      ^
        = 0
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:206:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<6; ++i)
                                 ^
                                  {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:207:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<6; ++j) M[i][j] = gsl_matrix_get(inv_m,i,j);
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:217:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (size < 0) size = m.size();
               ^
                {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:217:24: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  if (size < 0) size = m.size();
                       ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:217:26: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'int' [clang-diagnostic-shorten-64-to-32]
  if (size < 0) size = m.size();
                         ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:227:5: warning: Value stored to 'status' is never read [clang-analyzer-deadcode.DeadStores]
    status = Status::not_implemented;
    ^
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:227:5: note: Value stored to 'status' is never read
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:268:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<v.size(); ++i) v[i] += v2[i];
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:286:7: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  int s; gsl_linalg_LU_decomp(m, p, &s);
      ^
        = 0
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:313:7: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  int s; gsl_linalg_LU_decomp(m, p, &s);
      ^
        = 0
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:340:7: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  int s;
      ^
        = 0
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:343:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (unsigned int i=0; i<6; ++i)
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:359:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for (unsigned int i=0; i<6; ++i)
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:360:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for (unsigned int j=0; j<6; ++j)
                                    ^
                                     {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:373:41: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(unsigned int i=0; i<m.size(); ++i)
                                        ^
                                         {
/home/carneirofc/CNPEM/trackcpp/src/linalg.cpp:374:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    for(unsigned int j=0; j<m[i].size(); ++j)
                                             ^
                                              {
src/multithreads.cpp:19:12: warning: variable 'current_thread_id' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static int current_thread_id = 0;
           ^
src/multithreads.cpp:20:24: warning: variable 'mutex' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
                       ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:30:3: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
  ThreadSharedData* data = (ThreadSharedData*) args;
  ^~~~~~~~~~~~~~~~
  auto
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:30:28: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
  ThreadSharedData* data = (ThreadSharedData*) args;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:39:40: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (this_task_id >= data->nr_tasks) break;
                                       ^
                                        {
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:46:10: warning: use nullptr [modernize-use-nullptr]
  return NULL;
         ^~~~
         nullptr
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:54:3: warning: do not declare C VLA arrays, use std::vector<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  pthread_t threads[nr_threads];
  ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:54:21: warning: variable length arrays are a C99 feature [clang-diagnostic-vla-extension]
  pthread_t threads[nr_threads];
                    ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:54:21: note: function parameter 'nr_threads' with unknown value cannot be used in a constant expression
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:49:68: note: declared here
void start_all_threads(ThreadSharedData& thread_data, unsigned int nr_threads) {
                                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:55:3: warning: do not declare C VLA arrays, use std::vector<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  int thread_id[nr_threads];
  ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:55:17: warning: variable length arrays are a C99 feature [clang-diagnostic-vla-extension]
  int thread_id[nr_threads];
                ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:55:17: note: function parameter 'nr_threads' with unknown value cannot be used in a constant expression
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:49:68: note: declared here
void start_all_threads(ThreadSharedData& thread_data, unsigned int nr_threads) {
                                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:57:17: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
  for(int i=0; i<nr_threads-1; i++) {
                ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:59:8: warning: Value stored to 'iret' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
        int iret = pthread_create(&(threads[i]), NULL, start_thread, (void*) &thread_data);
            ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:59:8: note: Value stored to 'iret' during its initialization is never read
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:59:8: warning: unused variable 'iret' [clang-diagnostic-unused-variable]
        int iret = pthread_create(&(threads[i]), NULL, start_thread, (void*) &thread_data);
            ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:59:45: warning: use nullptr [modernize-use-nullptr]
        int iret = pthread_create(&(threads[i]), NULL, start_thread, (void*) &thread_data);
                                                 ^~~~
                                                 nullptr
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:65:17: warning: comparison of integers of different signs: 'int' and 'unsigned int' [clang-diagnostic-sign-compare]
  for(int i=0; i<nr_threads-1; ++i) pthread_join(threads[i], NULL);
                ^
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:65:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(int i=0; i<nr_threads-1; ++i) pthread_join(threads[i], NULL);
                                   ^
                                    {
/home/carneirofc/CNPEM/trackcpp/src/multithreads.cpp:65:62: warning: use nullptr [modernize-use-nullptr]
  for(int i=0; i<nr_threads-1; ++i) pthread_join(threads[i], NULL);
                                                             ^~~~
                                                             nullptr
src/naff.cpp:24:13: warning: unused function 'naf_initnaf_notab' [clang-diagnostic-unused-function]
static void naf_initnaf_notab();
            ^
src/naff.cpp:25:13: warning: unused function 'naf_cleannaf_notab' [clang-diagnostic-unused-function]
static void naf_cleannaf_notab();
            ^
src/naff.cpp:43:30: warning: narrowing conversion from 'long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  g_NAFVariable.KTABS      = n_interval; /* number of intervals between data (equal ndata-1): must be a multiple of 6. */
                             ^
src/naff.cpp:43:30: warning: implicit conversion loses integer precision: 'long' to 'int' [clang-diagnostic-shorten-64-to-32]
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:48:30: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
  g_NAFVariable.ICPLX      = !is_real; /* 0 se a função é real, 1 se não*/
                             ^
                             static_cast<int>( )
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:57:30: warning: use nullptr [modernize-use-nullptr]
  g_NAFVariable.ZTABS      = NULL;     /* will contain data to analyze */
                             ^~~~
                             nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:59:30: warning: use nullptr [modernize-use-nullptr]
  g_NAFVariable.TFS        = NULL;     /* will contain frequency */
                             ^~~~
                             nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:60:30: warning: use nullptr [modernize-use-nullptr]
  g_NAFVariable.ZAMP       = NULL;     /* will contain amplitude and phase*/
                             ^~~~
                             nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:65:37: warning: use nullptr [modernize-use-nullptr]
  g_NAFVariable.TWIN              = NULL; /* will contain the window */ /*XRR - used to be a global variable set initially to NULL */
                                    ^~~~
                                    nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:66:37: warning: use nullptr [modernize-use-nullptr]
  g_NAFVariable.ZALP              = NULL;   /* will contain transformation matrix to the orthgonal basis */
                                    ^~~~
                                    nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:67:37: warning: use nullptr [modernize-use-nullptr]
  g_NAFVariable.m_pListFen        = NULL;   /* no window */
                                    ^~~~
                                    nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:82:3: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
  double nux[nr_ff], nuy[nr_ff];
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:82:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  double nux[nr_ff], nuy[nr_ff];
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:7: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Calling 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:7: note: Assuming the condition is true
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:3: note: Taking true branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:14: note: Assuming 'i' is > 'n_interval'
  for(i = 0; i <= n_interval; i++) {
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:3: note: Loop condition is false. Execution continues on line 215
  for(i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is false. Execution continues on line 228
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:15: note: 'i' is > 'n_interval'
  for (i = 0; i <= n_interval; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:3: note: Loop condition is false. Execution continues on line 232
  for (i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:3: note: Loop condition is false. Execution continues on line 240
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:241:1: note: Returning without writing to '*fx'
}
^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Returning from 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:7: note: 1st function call argument is an uninitialized value
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
                        ^
                         {                     } 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:34: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Calling 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:7: note: Assuming the condition is true
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:3: note: Taking true branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:14: note: Assuming 'i' is > 'n_interval'
  for(i = 0; i <= n_interval; i++) {
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:3: note: Loop condition is false. Execution continues on line 215
  for(i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is <= field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is true.  Entering loop body
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is false. Execution continues on line 228
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:15: note: 'i' is > 'n_interval'
  for (i = 0; i <= n_interval; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:3: note: Loop condition is false. Execution continues on line 232
  for (i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:3: note: Loop condition is false. Execution continues on line 240
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Returning from 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:7: note: Assuming the condition is true
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:3: note: Taking true branch
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:34: note: 1st function call argument is an uninitialized value
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
                                                   ^
                                                    {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:7: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Calling 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:7: note: Assuming the condition is true
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:3: note: Taking true branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:14: note: Assuming 'i' is > 'n_interval'
  for(i = 0; i <= n_interval; i++) {
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:3: note: Loop condition is false. Execution continues on line 215
  for(i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is <= field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is true.  Entering loop body
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is false. Execution continues on line 228
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:15: note: 'i' is > 'n_interval'
  for (i = 0; i <= n_interval; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:3: note: Loop condition is false. Execution continues on line 232
  for (i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:3: note: Loop condition is false. Execution continues on line 240
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:241:1: note: Returning without writing to '*fz'
}
^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Returning from 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:7: note: Assuming the condition is false
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:3: note: Taking false branch
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:7: note: 1st function call argument is an uninitialized value
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
                        ^
                         {                     } 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:34: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Calling 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:196:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:14: note: 'i' is <= 'n_interval'
  for(i = 0; i <= n_interval; i++) {
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:3: note: Loop condition is true.  Entering loop body
  for(i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:14: note: Assuming 'i' is > 'n_interval'
  for(i = 0; i <= n_interval; i++) {
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:210:3: note: Loop condition is false. Execution continues on line 215
  for(i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is <= field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is true.  Entering loop body
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:220:3: note: Loop condition is false. Execution continues on line 228
  for (i = 1; i <= g_NAFVariable.NFS; i++)  {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:3: note: Loop condition is true.  Entering loop body
  for (i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:228:3: note: Loop condition is false. Execution continues on line 232
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:15: note: Assuming 'i' is <= field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:3: note: Loop condition is true.  Entering loop body
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:15: note: Assuming 'i' is > field 'NFS'
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:235:3: note: Loop condition is false. Execution continues on line 240
  for (i = 1; i <= g_NAFVariable.NFS; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:83:3: note: Returning from 'Get_NAFF'
  Get_NAFF(data,nr_ff, win, nux, nuy);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:7: note: Assuming the condition is false
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:86:3: note: Taking false branch
  if (fabs(nux[0])<1e-4) tunex = fabs(nux[1]); else tunex = fabs(nux[0]);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:7: note: Assuming the condition is true
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:3: note: Taking true branch
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:34: note: 1st function call argument is an uninitialized value
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:87:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (fabs(nuy[0])<1e-4) tuney = fabs(nuy[1]); else tuney = fabs(nuy[0]);
                                                   ^
                                                    {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:12: warning: narrowing conversion from 'unsigned long' to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  if ((r = n_interval % 6) != 0) {
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:107:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("Get_GenNAFF: Warning n_interval = %ld, \n", n_interval);
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:108:19: warning: implicit conversion changes signedness: 'long' to 'unsigned long' [clang-diagnostic-sign-conversion]
    n_interval -= r;
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:109:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("New value for NAFF n_interval = %ld \n", n_interval);
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:114:49: warning: narrowing conversion from 'unsigned long' to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  naff_init(g_NAFVariable, is_real, nr_ff, win, n_interval);
                                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:114:49: warning: implicit conversion changes signedness: 'unsigned long' to 'long' [clang-diagnostic-sign-conversion]
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:22: warning: comparison of integers of different signs: 'int' and 'unsigned long' [clang-diagnostic-sign-compare]
  for (auto i = 0; i <= n_interval; i++) {
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:118:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    g_NAFVariable.ZTABS[i].reel = re[i];
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:118:38: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    g_NAFVariable.ZTABS[i].reel = re[i];
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:119:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    g_NAFVariable.ZTABS[i].imag = im[i];
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:119:38: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    g_NAFVariable.ZTABS[i].imag = im[i];
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:129:13: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    ff_out[i-1] = g_NAFVariable.TFS[i];
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:129:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    ff_out[i-1] = g_NAFVariable.TFS[i];
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:130:13: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    re_out[i-1] = g_NAFVariable.ZAMP[i].reel;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:130:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    re_out[i-1] = g_NAFVariable.ZAMP[i].reel;
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:131:13: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    im_out[i-1] = g_NAFVariable.ZAMP[i].imag;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:131:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    im_out[i-1] = g_NAFVariable.ZAMP[i].imag;
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:192:7: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
  int i;
      ^
        = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:194:21: warning: narrowing conversion from 'unsigned long' to signed type 'long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  long n_interval = Tab.size() - 1;
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:194:32: warning: implicit conversion changes signedness: 'unsigned long' to 'long' [clang-diagnostic-sign-conversion]
  long n_interval = Tab.size() - 1;
                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:197:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("Get_NAFF: Warning n_interval = %ld, \n", n_interval);
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:199:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    printf("New value for NAFF n_interval = %ld \n", n_interval);
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:211:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    g_NAFVariable.ZTABS[i].reel = Tab[i].rx; /* x  */
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:211:39: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    g_NAFVariable.ZTABS[i].reel = Tab[i].rx; /* x  */
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:212:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    g_NAFVariable.ZTABS[i].imag = Tab[i].px; /* xp */
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:212:39: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    g_NAFVariable.ZTABS[i].imag = Tab[i].px; /* xp */
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:221:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    fx[i-1] = g_NAFVariable.TFS[i];
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:221:15: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    fx[i-1] = g_NAFVariable.TFS[i];
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:229:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    g_NAFVariable.ZTABS[i].reel = Tab[i].ry;  /* z */
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:229:39: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    g_NAFVariable.ZTABS[i].reel = Tab[i].ry;  /* z */
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:230:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    g_NAFVariable.ZTABS[i].imag = Tab[i].py;  /*zp */
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:230:39: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
    g_NAFVariable.ZTABS[i].imag = Tab[i].py;  /*zp */
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:236:5: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    fz[i-1] =  g_NAFVariable.TFS[i];
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:236:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    fz[i-1] =  g_NAFVariable.TFS[i];
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:451:13: warning: unused function 'naf_tessol' [clang-diagnostic-unused-function]
static BOOL naf_tessol(double EPS, double *TFSR, t_complexe *ZAMPR);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:26: warning: assigning newly created 'gsl::owner<>' to non-owner 'double *' [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:72: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
                                                                       ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:77: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
                                                                            ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:40: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
                                       ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: function is not thread safe [concurrency-mt-unsafe]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:22: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
                     ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:73:12: note: expanded from macro 'DIM2'
     pdata += col;\
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:12: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe **' (aka 'complexe **') [cppcoreguidelines-owning-memory]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
           ^
./src/naff_utils.h:69:22: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
                     ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:52: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
                                                   ^
./src/naff_utils.h:69:36: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
                                   ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:7: warning: Potential leak of memory pointed to by 'pdata' [clang-analyzer-unix.Malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:114:3: note: Calling 'naff_init'
  naff_init(g_NAFVariable, is_real, nr_ff, win, n_interval);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:48:30: note: Assuming 'is_real' is true
  g_NAFVariable.ICPLX      = !is_real; /* 0 se a função é real, 1 se não*/
                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:74:3: note: Calling 'naf_initnaf'
  naf_initnaf(g_NAFVariable);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:504:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(g_NAFVariable.TFS, double, g_NAFVariable.NTERM+1);/*allocate(TFS(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:505:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZAMP, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZAMP(1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Memory is allocated
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Taking false branch
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Taking false branch
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:506:7: note: Loop condition is false. Execution continues on line 507
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:7: note: Potential leak of memory pointed to by 'pdata'
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:507:78: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(g_NAFVariable.ZTABS, t_complexe, g_NAFVariable.KTABS+1);/* allocate(ZTABS(0:KTABS),stat = NERROR)*/
                                                                             ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:508:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:508:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:508:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:508:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:508:26: warning: assigning newly created 'gsl::owner<>' to non-owner 'double *' [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:508:73: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
                                                                        ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:523:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(g_NAFVariable.TFS);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:523:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(g_NAFVariable.TFS);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:524:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(g_NAFVariable.ZAMP);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:524:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(g_NAFVariable.ZAMP);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:525:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      HFREE2(g_NAFVariable.ZALP);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:525:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      HFREE2(g_NAFVariable.ZALP);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:526:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(g_NAFVariable.ZTABS);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:526:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(g_NAFVariable.ZTABS);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:527:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(g_NAFVariable.TWIN);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:527:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(g_NAFVariable.TWIN);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:530:33: warning: use nullptr [modernize-use-nullptr]
      g_NAFVariable.m_pListFen =NULL;
                                ^~~~
                                nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:40: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
                                       ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: function is not thread safe [concurrency-mt-unsafe]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:22: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
                     ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:73:12: note: expanded from macro 'DIM2'
     pdata += col;\
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:12: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe **' (aka 'complexe **') [cppcoreguidelines-owning-memory]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
           ^
./src/naff_utils.h:69:22: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
                     ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:52: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
                                                   ^
./src/naff_utils.h:69:36: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
                                   ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: warning: Potential leak of memory pointed to by 'pdata' [clang-analyzer-unix.Malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Memory is allocated
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Taking false branch
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Taking false branch
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Loop condition is false. Execution continues on line 545
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: note: Potential leak of memory pointed to by 'pdata'
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:26: warning: assigning newly created 'gsl::owner<>' to non-owner 'double *' [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:73: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
                                                                        ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:562:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      HFREE2(g_NAFVariable.ZALP);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:562:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      HFREE2(g_NAFVariable.ZALP);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:563:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(g_NAFVariable.TWIN);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:563:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(g_NAFVariable.TWIN);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:566:33: warning: use nullptr [modernize-use-nullptr]
      g_NAFVariable.m_pListFen =NULL;
                                ^~~~
                                nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:570:6: warning: function 'naf_mftnaf' has cognitive complexity of 33 (threshold 25) [readability-function-cognitive-complexity]
BOOL naf_mftnaf(t_naf& g_NAFVariable, int NBTERM, double EPS) {
     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:614:6: note: +1, including nesting penalty of 0, nesting level increased to 1
     do
     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:621:7: note: +1, nesting level increased to 2
      else
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: +3, including nesting penalty of 2, nesting level increased to 3
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: +3, including nesting penalty of 2, nesting level increased to 3
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: +1, nesting level increased to 3
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: +3, including nesting penalty of 2, nesting level increased to 3
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: +1, nesting level increased to 3
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:652:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (IFLAG == 0) break; /*GOTO 999*/
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:653:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (IFLAG == 1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:655:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if(naf_gramsc(g_NAFVariable, FR,A,B)==FALSE)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:661:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (IFLAG==-1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:667:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (g_NAFVariable.m_pListFen!=NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:595:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int I, IFLAG, NUMFR = 0;
      ^~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:595:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I, IFLAG, NUMFR = 0;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:595:14: warning: variable 'IFLAG' is not initialized [cppcoreguidelines-init-variables]
      int I, IFLAG, NUMFR = 0;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double TOL,STAREP,FR,A,B,RM;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:14: warning: variable 'TOL' is not initialized [cppcoreguidelines-init-variables]
      double TOL,STAREP,FR,A,B,RM;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:18: warning: variable 'STAREP' is not initialized [cppcoreguidelines-init-variables]
      double TOL,STAREP,FR,A,B,RM;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:25: warning: variable 'FR' is not initialized [cppcoreguidelines-init-variables]
      double TOL,STAREP,FR,A,B,RM;
                        ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:28: warning: variable 'A' is not initialized [cppcoreguidelines-init-variables]
      double TOL,STAREP,FR,A,B,RM;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:30: warning: variable 'B' is not initialized [cppcoreguidelines-init-variables]
      double TOL,STAREP,FR,A,B,RM;
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:596:32: warning: variable 'RM' is not initialized [cppcoreguidelines-init-variables]
      double TOL,STAREP,FR,A,B,RM;
                               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:598:11: warning: variable 'iFrMin' is not initialized [cppcoreguidelines-init-variables]
      int iFrMin;
          ^
                 = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:599:11: warning: variable 'iFrMax' is not initialized [cppcoreguidelines-init-variables]
      int iFrMax;
          ^
                 = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:600:14: warning: variable 'FREFO2' is not initialized [cppcoreguidelines-init-variables]
      double FREFO2;
             ^
                    = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:601:11: warning: variable 'KTABS2' is not initialized [cppcoreguidelines-init-variables]
      int KTABS2;
          ^
                 = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:606:8: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
       Myyerror("Nbre de termes cherches trop grand");
       ^
./src/naff_utils.h:38:18: note: expanded from macro 'Myyerror'
#define Myyerror printf
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:37: warning: use nullptr [modernize-use-nullptr]
      if (g_NAFVariable.m_pListFen==NULL)
                                    ^~~~
                                    nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:652:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (IFLAG == 0) break; /*GOTO 999*/
                        ^
                         {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:667:37: warning: use nullptr [modernize-use-nullptr]
      if (g_NAFVariable.m_pListFen!=NULL)
                                    ^~~~
                                    nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:671:8: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
       SYSFREE(pListTemp);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:671:8: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
       SYSFREE(pListTemp);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:673:41: warning: use nullptr [modernize-use-nullptr]
     } while (g_NAFVariable.m_pListFen!=NULL);
                                        ^~~~
                                        nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:681:6: warning: unused function 'naf_prtabs' [clang-diagnostic-unused-function]
void naf_prtabs(t_naf& g_NAFVariable, int KTABS, t_complexe *ZTABS, int IPAS){
     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:694:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I;
          ^
            = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:700:11: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
          fprintf(g_NAFVariable.NFPRT,"%6d  %-+20.15E %-+20.15E\n",I, ZTABS[I].reel, ZTABS[I].imag);
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:700:71: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          fprintf(g_NAFVariable.NFPRT,"%6d  %-+20.15E %-+20.15E\n",I, ZTABS[I].reel, ZTABS[I].imag);
                                                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:700:86: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          fprintf(g_NAFVariable.NFPRT,"%6d  %-+20.15E %-+20.15E\n",I, ZTABS[I].reel, ZTABS[I].imag);
                                                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:724:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I;
          ^
            = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:725:19: warning: variable 'pzarTabs' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarTabs;
                  ^
                           = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:730:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           I++, pzarTabs++)
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:737:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           I++, pzarTabs++)
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:768:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I;
          ^
            = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:769:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double ECART, TEST;
      ^~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:769:14: warning: variable 'ECART' is not initialized [cppcoreguidelines-init-variables]
      double ECART, TEST;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:769:21: warning: variable 'TEST' is not initialized [cppcoreguidelines-init-variables]
      double ECART, TEST;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:774:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        TEST = fabs(g_NAFVariable.TFS[I] - FR);
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:783:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(g_NAFVariable.NFPRT, "TEST/ECART = %g   ON CONTINUE\n", TEST/ECART);
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:793:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(g_NAFVariable.NFPRT,"TEST = %g ECART = %g \n", TEST, ECART);
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:794:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(g_NAFVariable.NFPRT,"FREQUENCE   FR = %g  TROP PROCHE  DE  %g\n", FR, g_NAFVariable.TFS[I]);
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:794:95: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                fprintf(g_NAFVariable.NFPRT,"FREQUENCE   FR = %g  TROP PROCHE  DE  %g\n", FR, g_NAFVariable.TFS[I]);
                                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:816:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int  I,INC,NX,IT,NT;
      ^~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:816:12: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int  I,INC,NX,IT,NT;
           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:816:14: warning: variable 'INC' is not initialized [cppcoreguidelines-init-variables]
      int  I,INC,NX,IT,NT;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:816:18: warning: variable 'NX' is not initialized [cppcoreguidelines-init-variables]
      int  I,INC,NX,IT,NT;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:816:21: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int  I,INC,NX,IT,NT;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:816:24: warning: variable 'NT' is not initialized [cppcoreguidelines-init-variables]
      int  I,INC,NX,IT,NT;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:817:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe  ZT1,ZINC;
      ^~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:818:19: warning: variable 'pzarZT' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarZT;
                  ^
                         = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:822:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         printf("DANS ZTPOW, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:826:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT[0] = i_compl_mul(ZAST,ZA);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:827:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      for(I = 1, pzarZT=ZT+1 ; I<N1; I++,pzarZT++)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:827:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      for(I = 1, pzarZT=ZT+1 ; I<N1; I++,pzarZT++)
                                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:829:40: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pzarZT = i_compl_mul(*(pzarZT-1),ZA);
                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:831:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT1=i_compl_div(ZT[N1-1], ZAST); /*ZT1 = ZT(N1-1)/ZAST*/
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:841:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZT[INC+I]=i_compl_mul(ZT[I], ZINC); /*ZT(INC +I) = ZT(I)*ZINC*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:841:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZT[INC+I]=i_compl_mul(ZT[I], ZINC); /*ZT(INC +I) = ZT(I)*ZINC*/
                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:849:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZT[INC+I]=i_compl_mul(ZT[I], ZINC); /*ZT(INC +I) = ZT(I)*ZINC*/
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:849:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZT[INC+I]=i_compl_mul(ZT[I], ZINC); /*ZT(INC +I) = ZT(I)*ZINC*/
                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:879:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int IT,IFR,JFR, NVTERM;
      ^~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:879:11: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int IT,IFR,JFR, NVTERM;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:879:14: warning: variable 'IFR' is not initialized [cppcoreguidelines-init-variables]
      int IT,IFR,JFR, NVTERM;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:879:18: warning: variable 'JFR' is not initialized [cppcoreguidelines-init-variables]
      int IT,IFR,JFR, NVTERM;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:879:23: warning: variable 'NVTERM' is not initialized [cppcoreguidelines-init-variables]
      int IT,IFR,JFR, NVTERM;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:880:14: warning: variable 'OFFSET' is not initialized [cppcoreguidelines-init-variables]
      double OFFSET;
             ^
                    = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:881:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZA,ZOM,ZEX;
      ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:882:20: warning: use nullptr [modernize-use-nullptr]
      double *TFST=NULL;
                   ^~~~
                   nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:883:25: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZAMPT=NULL;
                        ^~~~
                        nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:884:26: warning: use nullptr [modernize-use-nullptr]
      t_complexe **ZALPT=NULL;
                         ^~~~
                         nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:886:22: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZT=NULL;
                     ^~~~
                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:887:19: warning: variable 'pzarTab' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarTab;
                  ^
                          = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:64: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
                                                               ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:40: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
                                       ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: function is not thread safe [concurrency-mt-unsafe]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:22: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
                     ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:73:12: note: expanded from macro 'DIM2'
     pdata += col;\
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:12: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe **' (aka 'complexe **') [cppcoreguidelines-owning-memory]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
           ^
./src/naff_utils.h:69:22: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
                     ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:39: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
                                      ^
./src/naff_utils.h:69:36: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
                                   ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: warning: Potential leak of memory pointed to by 'pdata' [clang-analyzer-unix.Malloc]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Memory is allocated
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Potential leak of memory pointed to by 'pdata'
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:26: warning: assigning newly created 'gsl::owner<>' to non-owner 'double *' [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:59: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
                                                          ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:61: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
                                                            ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:898:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            IT++, pzarTab++)
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:906:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZOM = i_compl_muldoubl(g_NAFVariable.TFS[IFR]/g_NAFVariable.UNIANG,ZI); /* ZOM=g_NAFVariable.TFS(IFR)/g_NAFVariable.UNIANG*ZI */
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:907:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZA=g_NAFVariable.ZAMP[IFR];
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:919:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                 IT++, pzarTab++)
                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:921:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
               i_compl_padd(pzarTab,ZT+IT); /*g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)+ZT(IT)*/
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:931:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
               g_NAFVariable.ZTABS[IT].reel += ZT[IT].reel; /*g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)+DREAL(ZT(IT))*/
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:931:45: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
               g_NAFVariable.ZTABS[IT].reel += ZT[IT].reel; /*g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)+DREAL(ZT(IT))*/
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Uninitialized value stored to field 'reel'
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is <= field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is true.  Entering loop body
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is <= field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is true.  Entering loop body
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:912:14: note: Assuming field 'ICPLX' is not equal to 1
         if (g_NAFVariable.ICPLX==1)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:912:10: note: Taking false branch
         if (g_NAFVariable.ICPLX==1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:928:13: note: Calling 'naf_ztpow'
            naf_ztpow(g_NAFVariable.KTABS,64,ZT,ZINC,ZEX); /*naf_ztpow(g_NAFVariable.KTABS+1,64,ZT,ZINC,ZEX);*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:820:7: note: Taking true branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:823:10: note: Returning without writing to 'ZT->reel'
         return;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:928:13: note: Returning from 'naf_ztpow'
            naf_ztpow(g_NAFVariable.KTABS,64,ZT,ZINC,ZEX); /*naf_ztpow(g_NAFVariable.KTABS+1,64,ZT,ZINC,ZEX);*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:929:13: note: Loop condition is true.  Entering loop body
            for (IT=0; IT<=g_NAFVariable.KTABS; IT++)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:931:45: note: Assigned value is garbage or undefined
               g_NAFVariable.ZTABS[IT].reel += ZT[IT].reel; /*g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)+DREAL(ZT(IT))*/
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:931:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
               g_NAFVariable.ZTABS[IT].reel += ZT[IT].reel; /*g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)+DREAL(ZT(IT))*/
                                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:936:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZT); /*deallocate(ZT)*/
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:936:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZT); /*deallocate(ZT)*/
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:940:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         TFST[IFR] = g_NAFVariable.TFS[IFR];
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:940:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         TFST[IFR] = g_NAFVariable.TFS[IFR];
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:941:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZAMPT[IFR] = g_NAFVariable.ZAMP[IFR];
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:941:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZAMPT[IFR] = g_NAFVariable.ZAMP[IFR];
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:944:13: warning: Called C++ object pointer is uninitialized [clang-analyzer-core.CallAndMessage]
            ZALPT[IFR][JFR] = g_NAFVariable.ZALP[IFR][JFR];
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Storing uninitialized value
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is <= field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is true.  Entering loop body
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:912:14: note: Assuming field 'ICPLX' is not equal to 1
         if (g_NAFVariable.ICPLX==1)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:912:10: note: Taking false branch
         if (g_NAFVariable.ICPLX==1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:929:24: note: 'IT' is > field 'KTABS'
            for (IT=0; IT<=g_NAFVariable.KTABS; IT++)
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:929:13: note: Loop condition is false. Execution continues on line 904
            for (IT=0; IT<=g_NAFVariable.KTABS; IT++)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:13: note: The value 1 is assigned to 'IFR'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is true.  Entering loop body
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:942:11: note: Loop condition is true.  Entering loop body
          for(JFR = 1;JFR <=g_NAFVariable.NFS; JFR++)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:944:13: note: Called C++ object pointer is uninitialized
            ZALPT[IFR][JFR] = g_NAFVariable.ZALP[IFR][JFR];
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:944:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZALPT[IFR][JFR] = g_NAFVariable.ZALP[IFR][JFR];
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:944:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZALPT[IFR][JFR] = g_NAFVariable.ZALP[IFR][JFR];
                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:952:8: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
       HFREE2(ZALPT);
       ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Storing uninitialized value
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:22: note: 'IFR' is > field 'NFS'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is false. Execution continues on line 948
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:950:7: note: Taking true branch
      if (naf_mftnaf (g_NAFVariable, NVTERM,EPS)==FALSE)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:952:8: note: 1st function call argument is an uninitialized value
       HFREE2(ZALPT);
       ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:952:8: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
       HFREE2(ZALPT);
       ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:952:8: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
       HFREE2(ZALPT);
       ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:953:8: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
       SYSFREE(ZAMPT);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:953:8: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
       SYSFREE(ZAMPT);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:954:8: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
       SYSFREE(TFST);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:954:8: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
       SYSFREE(TFST);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:960:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         TFSR[IFR] = g_NAFVariable.TFS[IFR];
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:960:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         TFSR[IFR] = g_NAFVariable.TFS[IFR];
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:961:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZAMPR[IFR] = g_NAFVariable.ZAMP[IFR];
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:961:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZAMPR[IFR] = g_NAFVariable.ZAMP[IFR];
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:966:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         g_NAFVariable.TFS[IFR] = TFST[IFR];
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:966:33: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
         g_NAFVariable.TFS[IFR] = TFST[IFR];
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:22: note: 'IFR' is > field 'NFS'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is false. Execution continues on line 948
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:950:7: note: Taking false branch
      if (naf_mftnaf (g_NAFVariable, NVTERM,EPS)==FALSE)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:958:7: note: Loop condition is true.  Entering loop body
      for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:958:7: note: Loop condition is false. Execution continues on line 964
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:964:12: note: The value 1 is assigned to 'IFR'
      for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:964:7: note: Loop condition is true.  Entering loop body
      for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:966:33: note: Assigned value is garbage or undefined
         g_NAFVariable.TFS[IFR] = TFST[IFR];
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:966:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         g_NAFVariable.TFS[IFR] = TFST[IFR];
                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:967:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         g_NAFVariable.ZAMP[IFR] = ZAMPT[IFR];
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:967:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         g_NAFVariable.ZAMP[IFR] = ZAMPT[IFR];
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:970:14: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             g_NAFVariable.ZALP[IFR][JFR] = ZALPT[IFR][JFR];
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:970:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             g_NAFVariable.ZALP[IFR][JFR] = ZALPT[IFR][JFR];
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:973:7: warning: 1st function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
      HFREE2(ZALPT);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Storing uninitialized value
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:22: note: 'IFR' is > field 'NFS'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is false. Execution continues on line 948
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:950:7: note: Taking false branch
      if (naf_mftnaf (g_NAFVariable, NVTERM,EPS)==FALSE)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:958:7: note: Loop condition is false. Execution continues on line 964
      for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:964:7: note: Loop condition is false. Execution continues on line 973
      for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:973:7: note: 1st function call argument is an uninitialized value
      HFREE2(ZALPT);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:973:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      HFREE2(ZALPT);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:973:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      HFREE2(ZALPT);
      ^
./src/naff_utils.h:77:27: note: expanded from macro 'HFREE2'
#define HFREE2(variable) {SYSFREE(*variable); SYSFREE(variable);}
                          ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:974:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZAMPT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:974:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZAMPT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:975:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(TFST);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:975:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(TFST);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:991:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int I,J;
      ^~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:991:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I,J;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:991:13: warning: variable 'J' is not initialized [cppcoreguidelines-init-variables]
      int I,J;
            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:994:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      double *pdTFS=g_NAFVariable.TFS+1;
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:995:7: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
      double *pdZAMP=(double*)(g_NAFVariable.ZAMP+1);
      ^~~~~~
      auto
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:995:22: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      double *pdZAMP=(double*)(g_NAFVariable.ZAMP+1);
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:995:50: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      double *pdZAMP=(double*)(g_NAFVariable.ZAMP+1);
                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:996:15: warning: variable 'pdZALP' is not initialized [cppcoreguidelines-init-variables]
      double *pdZALP;
              ^
                     = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:999:17: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
         pdZALP=(double*)(g_NAFVariable.ZALP[I]);
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:999:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         pdZALP=(double*)(g_NAFVariable.ZALP[I]);
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1000:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTFS++ = dZero;
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1001:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdZAMP++ = dZero;
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1002:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdZAMP++ = dZero;
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1005:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *pdZALP++ = dZero;
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1006:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            *pdZALP++ = dZero;
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1046:14: warning: variable 'FR' is not initialized [cppcoreguidelines-init-variables]
      double FR;
             ^
                = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1047:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int   ISG,IPAS,I,INDX,IFR;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1047:13: warning: variable 'ISG' is not initialized [cppcoreguidelines-init-variables]
      int   ISG,IPAS,I,INDX,IFR;
            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1047:17: warning: variable 'IPAS' is not initialized [cppcoreguidelines-init-variables]
      int   ISG,IPAS,I,INDX,IFR;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1047:22: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int   ISG,IPAS,I,INDX,IFR;
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1047:24: warning: variable 'INDX' is not initialized [cppcoreguidelines-init-variables]
      int   ISG,IPAS,I,INDX,IFR;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1047:29: warning: variable 'IFR' is not initialized [cppcoreguidelines-init-variables]
      int   ISG,IPAS,I,INDX,IFR;
                            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1049:21: warning: use nullptr [modernize-use-nullptr]
      double *pdTAB=NULL; /*=TAB*/
                    ^~~~
                    nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1050:20: warning: use nullptr [modernize-use-nullptr]
      double *RTAB=NULL;
                   ^~~~
                   nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1051:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int iKTABS2m1, iKTABS2;
      ^~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1051:11: warning: variable 'iKTABS2m1' is not initialized [cppcoreguidelines-init-variables]
      int iKTABS2m1, iKTABS2;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1051:22: warning: variable 'iKTABS2' is not initialized [cppcoreguidelines-init-variables]
      int iKTABS2m1, iKTABS2;
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1052:14: warning: variable 'dDIV' is not initialized [cppcoreguidelines-init-variables]
      double dDIV;
             ^
                  = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1053:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double *pdTABTemp1,*pdTABTemp2;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1053:15: warning: variable 'pdTABTemp1' is not initialized [cppcoreguidelines-init-variables]
      double *pdTABTemp1,*pdTABTemp2;
              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1053:27: warning: variable 'pdTABTemp2' is not initialized [cppcoreguidelines-init-variables]
      double *pdTABTemp1,*pdTABTemp2;
                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:26: warning: assigning newly created 'gsl::owner<>' to non-owner 'double *' [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:40: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
                                       ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:26: warning: assigning newly created 'gsl::owner<>' to non-owner 'double *' [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:38: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
                                     ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1068:8: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
       fprintf(g_NAFVariable.NFPRT,"KTABS2= %d  FREFO2= %g\n",iKTABS2, FREFO2);
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:45: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1078:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTABTemp1++ = (*pdTABTemp2++) * g_NAFVariable.TWIN[I];/*pdTAB(2*I+1)=DREAL(g_NAFVariable.ZTABS(I))*TWIN(I)*/
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1078:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTABTemp1++ = (*pdTABTemp2++) * g_NAFVariable.TWIN[I];/*pdTAB(2*I+1)=DREAL(g_NAFVariable.ZTABS(I))*TWIN(I)*/
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1078:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTABTemp1++ = (*pdTABTemp2++) * g_NAFVariable.TWIN[I];/*pdTAB(2*I+1)=DREAL(g_NAFVariable.ZTABS(I))*TWIN(I)*/
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1079:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTABTemp1++ = (*pdTABTemp2++) * g_NAFVariable.TWIN[I]; /*pdTAB(2*I+2)=DIMAG(g_NAFVariable.ZTABS(I))*TWIN(I)*/
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1079:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTABTemp1++ = (*pdTABTemp2++) * g_NAFVariable.TWIN[I]; /*pdTAB(2*I+2)=DIMAG(g_NAFVariable.ZTABS(I))*TWIN(I)*/
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1079:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pdTABTemp1++ = (*pdTABTemp2++) * g_NAFVariable.TWIN[I]; /*pdTAB(2*I+2)=DIMAG(g_NAFVariable.ZTABS(I))*TWIN(I)*/
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1081:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      naf_four1(pdTAB-1,iKTABS2,ISG);
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:55: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=pdTABTemp1+1;
                                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1084:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          I++, pdTABTemp1+=2, pdTABTemp2+=2)
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1084:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          I++, pdTABTemp1+=2, pdTABTemp2+=2)
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1086:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         RTAB[I]=sqrt((*pdTABTemp1)*(*pdTABTemp1)+(*pdTABTemp2)*(*pdTABTemp2))/dDIV;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1088:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(pdTAB);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1088:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(pdTAB);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1111:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       IFR=INDX=p_iFrMin+naf_maxx(p_iFrMax-p_iFrMin, RTAB+p_iFrMin);
                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1115:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       INDX=naf_maxx(p_iFrMax-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1115:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       INDX=naf_maxx(p_iFrMax-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1120:12: warning: variable 'INDXNeg' is not initialized [cppcoreguidelines-init-variables]
       int INDXNeg;
           ^
                   = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1122:51: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       INDXNeg=p_iFrMin+naf_maxx(-1-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
                                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1122:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       INDXNeg=p_iFrMin+naf_maxx(-1-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
                                                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1125:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       if (RTAB[INDX]<RTAB[INDXNeg+iKTABS2])
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1125:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       if (RTAB[INDX]<RTAB[INDXNeg+iKTABS2])
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1137:8: warning: 7th function call argument is an uninitialized value [clang-analyzer-core.CallAndMessage]
       fprintf(g_NAFVariable.NFPRT,"IFRMIN=%d IFRMAX=%d IFR=%d FR=%g RTAB=%g INDX=%d KTABS2=%d\n",p_iFrMin, p_iFrMax,
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is > 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking true branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking true branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1083:11: note: 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:7: note: Loop condition is false. Execution continues on line 1088
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=pdTABTemp1+1;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:11: note: Assuming 'p_iFrMin' is not equal to 'iKTABS2'
      if (p_iFrMin==iKTABS2)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:7: note: Taking false branch
      if (p_iFrMin==iKTABS2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1109:17: note: Assuming 'p_iFrMin' is < 0
      else  if (p_iFrMin>=0)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1109:13: note: Taking false branch
      else  if (p_iFrMin>=0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1113:17: note: Assuming 'p_iFrMax' is < 0
      else  if (p_iFrMax<0)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1113:13: note: Taking true branch
      else  if (p_iFrMax<0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1115:13: note: Calling 'naf_maxx'
       INDX=naf_maxx(p_iFrMax-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1262:7: note: 'INDX' initialized to 0
      int INDX=0;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:16: note: Assuming 'J' is > 'N'
      for(J=1; J<=N; J++)
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:7: note: Loop condition is false. Execution continues on line 1272
      for(J=1; J<=N; J++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1272:7: note: Returning zero (loaded from 'INDX')
      return INDX;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1115:13: note: Returning from 'naf_maxx'
       INDX=naf_maxx(p_iFrMax-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1115:8: note: The value 0 is assigned to 'INDX'
       INDX=naf_maxx(p_iFrMax-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1135:25: note: Field 'IPRT' is equal to 1
      if (g_NAFVariable.IPRT==1)
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1135:7: note: Taking true branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1137:8: note: 7th function call argument is an uninitialized value
       fprintf(g_NAFVariable.NFPRT,"IFRMIN=%d IFRMAX=%d IFR=%d FR=%g RTAB=%g INDX=%d KTABS2=%d\n",p_iFrMin, p_iFrMax,
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1137:8: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
       fprintf(g_NAFVariable.NFPRT,"IFRMIN=%d IFRMAX=%d IFR=%d FR=%g RTAB=%g INDX=%d KTABS2=%d\n",p_iFrMin, p_iFrMax,
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1138:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
               IFR,FR, RTAB[INDX],INDX,iKTABS2);
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1140:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(RTAB);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1140:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(RTAB);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int  N,I,J,M,MMAX,ISTEP;
      ^~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:12: warning: variable 'N' is not initialized [cppcoreguidelines-init-variables]
      int  N,I,J,M,MMAX,ISTEP;
           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:14: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int  N,I,J,M,MMAX,ISTEP;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:16: warning: variable 'J' is not initialized [cppcoreguidelines-init-variables]
      int  N,I,J,M,MMAX,ISTEP;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:18: warning: variable 'M' is not initialized [cppcoreguidelines-init-variables]
      int  N,I,J,M,MMAX,ISTEP;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:20: warning: variable 'MMAX' is not initialized [cppcoreguidelines-init-variables]
      int  N,I,J,M,MMAX,ISTEP;
                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1159:25: warning: variable 'ISTEP' is not initialized [cppcoreguidelines-init-variables]
      int  N,I,J,M,MMAX,ISTEP;
                        ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:14: warning: variable 'THETA' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:20: warning: variable 'WPR' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:24: warning: variable 'WPI' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:28: warning: variable 'WR' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:31: warning: variable 'WI' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:34: warning: variable 'TEMPR' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:40: warning: variable 'TEMPI' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1160:46: warning: variable 'WTEMP' is not initialized [cppcoreguidelines-init-variables]
      double THETA,WPR,WPI,WR,WI,TEMPR,TEMPI,WTEMP;
                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1168:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          TEMPR=DATA[J];
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1169:17: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          TEMPI=DATA[J+1];
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1170:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          DATA[J]=DATA[I];
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1170:18: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
          DATA[J]=DATA[I];
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is <= 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking false branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1081:7: note: Calling 'naf_four1'
      naf_four1(pdTAB-1,iKTABS2,ISG);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: 'J' is <= 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking false branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:17: note: Assuming 'M' is >= 2
        while ((M>=2) && (J>M))
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:16: note: Left side of '&&' is true
        while ((M>=2) && (J>M))
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:27: note: 'J' is <= 'M'
        while ((M>=2) && (J>M))
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:9: note: Loop condition is false. Execution continues on line 1181
        while ((M>=2) && (J>M))
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:21: note: The value 3 is assigned to 'I'
      for(I=1;I<=N; I+=2)
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: Assuming 'J' is > 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking true branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1170:18: note: Assigned value is garbage or undefined
          DATA[J]=DATA[I];
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1170:19: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          DATA[J]=DATA[I];
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1171:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          DATA[J+1]=DATA[I+1];
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1171:20: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
          DATA[J+1]=DATA[I+1];
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is <= 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking false branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1081:7: note: Calling 'naf_four1'
      naf_four1(pdTAB-1,iKTABS2,ISG);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: 'J' is <= 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking false branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:17: note: Assuming 'M' is >= 2
        while ((M>=2) && (J>M))
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:16: note: Left side of '&&' is true
        while ((M>=2) && (J>M))
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:27: note: 'J' is <= 'M'
        while ((M>=2) && (J>M))
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:9: note: Loop condition is false. Execution continues on line 1181
        while ((M>=2) && (J>M))
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: Assuming 'J' is > 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking true branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1171:20: note: Assigned value is garbage or undefined
          DATA[J+1]=DATA[I+1];
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1171:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          DATA[J+1]=DATA[I+1];
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1172:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          DATA[I]=TEMPR;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1173:11: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          DATA[I+1]=TEMPI;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1179:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          M >>=1; /*M=M/2;*/
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1201:21: warning: The right operand of '*' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
            TEMPR=WR*DATA[J]-WI*DATA[J+1];
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is <= 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking false branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1081:7: note: Calling 'naf_four1'
      naf_four1(pdTAB-1,iKTABS2,ISG);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: 'J' is <= 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking false branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:17: note: Assuming 'M' is < 2
        while ((M>=2) && (J>M))
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:23: note: Left side of '&&' is false
        while ((M>=2) && (J>M))
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: 'J' is <= 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking false branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:17: note: 'M' is < 2
        while ((M>=2) && (J>M))
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:23: note: Left side of '&&' is false
        while ((M>=2) && (J>M))
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is > 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is false. Execution continues on line 1183
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1184:14: note: 'N' is > 'MMAX'
      while (N>MMAX)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1184:7: note: Loop condition is true.  Entering loop body
      while (N>MMAX)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1196:9: note: Loop condition is true.  Entering loop body
        for ( M=1; M<=MMAX; M+=2)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1198:21: note: 'I' is <= 'N'
          for (I=M; I<=N; I+=ISTEP)
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1198:11: note: Loop condition is true.  Entering loop body
          for (I=M; I<=N; I+=ISTEP)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1200:13: note: The value 3 is assigned to 'J'
            J=I+MMAX;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1201:21: note: The right operand of '*' is a garbage value
            TEMPR=WR*DATA[J]-WI*DATA[J+1];
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1201:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            TEMPR=WR*DATA[J]-WI*DATA[J+1];
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1201:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            TEMPR=WR*DATA[J]-WI*DATA[J+1];
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1202:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            TEMPI=WR*DATA[J+1]+WI*DATA[J];
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1202:35: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            TEMPI=WR*DATA[J+1]+WI*DATA[J];
                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1205:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[J]=DATA[I]-TEMPR;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1205:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[J]=DATA[I]-TEMPR;
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1205:28: warning: The left operand of '-' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
            DATA[J]=DATA[I]-TEMPR;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is <= 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking false branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1081:7: note: Calling 'naf_four1'
      naf_four1(pdTAB-1,iKTABS2,ISG);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: 'J' is <= 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking false branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:17: note: Assuming 'M' is >= 2
        while ((M>=2) && (J>M))
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:16: note: Left side of '&&' is true
        while ((M>=2) && (J>M))
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:27: note: 'J' is <= 'M'
        while ((M>=2) && (J>M))
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:9: note: Loop condition is false. Execution continues on line 1181
        while ((M>=2) && (J>M))
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is <= 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:12: note: Assuming 'J' is > 'I'
        if(J>I)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1166:9: note: Taking true branch
        if(J>I)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:17: note: 'M' is >= 2
        while ((M>=2) && (J>M))
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:16: note: Left side of '&&' is true
        while ((M>=2) && (J>M))
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:27: note: Assuming 'J' is <= 'M'
        while ((M>=2) && (J>M))
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1176:9: note: Loop condition is false. Execution continues on line 1181
        while ((M>=2) && (J>M))
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:15: note: Assuming 'I' is > 'N'
      for(I=1;I<=N; I+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1163:7: note: Loop condition is false. Execution continues on line 1183
      for(I=1;I<=N; I+=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1184:14: note: 'N' is > 'MMAX'
      while (N>MMAX)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1184:7: note: Loop condition is true.  Entering loop body
      while (N>MMAX)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1196:15: note: The value 1 is assigned to 'M'
        for ( M=1; M<=MMAX; M+=2)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1196:9: note: Loop condition is true.  Entering loop body
        for ( M=1; M<=MMAX; M+=2)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1198:16: note: The value 1 is assigned to 'I'
          for (I=M; I<=N; I+=ISTEP)
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1198:21: note: 'I' is <= 'N'
          for (I=M; I<=N; I+=ISTEP)
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1198:11: note: Loop condition is true.  Entering loop body
          for (I=M; I<=N; I+=ISTEP)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1205:28: note: The left operand of '-' is a garbage value
            DATA[J]=DATA[I]-TEMPR;
                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1206:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[J+1]=DATA[I+1]-TEMPI;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1206:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[J+1]=DATA[I+1]-TEMPI;
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1207:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[I]=DATA[I]+TEMPR;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1207:21: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[I]=DATA[I]+TEMPR;
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1208:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[I+1]=DATA[I+1]+TEMPI;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1208:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            DATA[I+1]=DATA[I+1]+TEMPI;
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1230:11: warning: variable 'N' is not initialized [cppcoreguidelines-init-variables]
      int N;
          ^
            = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1240:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
         *N2 <<=1;/*N2=N2*2*/
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1241:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
         N >>=1; /*N=N/2*/
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1259:29: warning: pointer parameter 'T' can be pointer to const [readability-non-const-parameter]
int naf_maxx(int N, double *T){
                            ^
                    const 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1260:11: warning: variable 'J' is not initialized [cppcoreguidelines-init-variables]
      int J;
          ^
            = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1261:14: warning: variable 'VMAX' is not initialized [cppcoreguidelines-init-variables]
      double VMAX;
             ^
                  = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1263:11: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
      VMAX=T[0];
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking true branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1083:11: note: 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:7: note: Loop condition is false. Execution continues on line 1088
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=pdTABTemp1+1;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:11: note: 'p_iFrMin' is equal to 'iKTABS2'
      if (p_iFrMin==iKTABS2)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:7: note: Taking true branch
      if (p_iFrMin==iKTABS2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1106:13: note: Calling 'naf_maxx'
       INDX=naf_maxx(iKTABS2m1, RTAB);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1263:11: note: Assigned value is garbage or undefined
      VMAX=T[0];
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1263:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      VMAX=T[0];
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1266:14: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         if (T[J]>VMAX)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1266:18: warning: The left operand of '>' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
         if (T[J]>VMAX)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is <= 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking false branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is <= 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is true.  Entering loop body
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1075:11: note: Assuming 'I' is > 'iKTABS2m1'
          I<=iKTABS2m1;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:7: note: Loop condition is true.  Entering loop body
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=pdTABTemp1+1;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:7: note: Loop condition is false. Execution continues on line 1088
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:11: note: Assuming 'p_iFrMin' is not equal to 'iKTABS2'
      if (p_iFrMin==iKTABS2)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:7: note: Taking false branch
      if (p_iFrMin==iKTABS2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1109:17: note: Assuming 'p_iFrMin' is < 0
      else  if (p_iFrMin>=0)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1109:13: note: Taking false branch
      else  if (p_iFrMin>=0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1113:17: note: Assuming 'p_iFrMax' is >= 0
      else  if (p_iFrMax<0)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1113:13: note: Taking false branch
      else  if (p_iFrMax<0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1124:13: note: Calling 'naf_maxx'
       INDX=naf_maxx(p_iFrMax, RTAB);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:11: note: The value 1 is assigned to 'J'
      for(J=1; J<=N; J++)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:16: note: Assuming 'J' is <= 'N'
      for(J=1; J<=N; J++)
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:7: note: Loop condition is true.  Entering loop body
      for(J=1; J<=N; J++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1266:18: note: The left operand of '>' is a garbage value
         if (T[J]>VMAX)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1266:18: warning: The left operand of '>' is a garbage value due to array index out of bounds [clang-analyzer-core.UndefinedBinaryOperatorResult]
         if (T[J]>VMAX)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:22: note: 'IFR' is > field 'NFS'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is false. Execution continues on line 948
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:950:11: note: Calling 'naf_mftnaf'
      if (naf_mftnaf (g_NAFVariable, NVTERM,EPS)==FALSE)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: 'iFrMin' is > 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking true branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is true
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking true branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:648:13: note: Calling 'naf_fftmax'
         FR=naf_fftmax(g_NAFVariable, iFrMin,iFrMax,FREFO2,KTABS2);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1061:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(pdTAB,double,2*iKTABS2); /*  allocate(TAB(2*KTABS2),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1062:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(RTAB,double,iKTABS2);/*allocate(RTAB(0:KTABS2-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:11: note: Assuming field 'IPRT' is not equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1066:7: note: Taking false branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is true.  Entering loop body
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=(double*)(g_NAFVariable.ZTABS);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1074:7: note: Loop condition is false. Execution continues on line 1081
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:7: note: Loop condition is true.  Entering loop body
      for(I=0, pdTABTemp1=pdTAB, pdTABTemp2=pdTABTemp1+1;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1082:7: note: Loop condition is false. Execution continues on line 1088
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:11: note: 'p_iFrMin' is not equal to 'iKTABS2'
      if (p_iFrMin==iKTABS2)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1104:7: note: Taking false branch
      if (p_iFrMin==iKTABS2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1109:17: note: 'p_iFrMin' is < 0
      else  if (p_iFrMin>=0)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1109:13: note: Taking false branch
      else  if (p_iFrMin>=0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1113:17: note: 'p_iFrMax' is >= 0
      else  if (p_iFrMax<0)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1113:13: note: Taking false branch
      else  if (p_iFrMax<0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1122:25: note: Calling 'naf_maxx'
       INDXNeg=p_iFrMin+naf_maxx(-1-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:7: note: Loop condition is false. Execution continues on line 1272
      for(J=1; J<=N; J++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1122:25: note: Returning from 'naf_maxx'
       INDXNeg=p_iFrMin+naf_maxx(-1-p_iFrMin, RTAB+iKTABS2+p_iFrMin);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1124:13: note: Calling 'naf_maxx'
       INDX=naf_maxx(p_iFrMax, RTAB);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:11: note: The value 1 is assigned to 'J'
      for(J=1; J<=N; J++)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1264:7: note: Loop condition is true.  Entering loop body
      for(J=1; J<=N; J++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1266:18: note: The left operand of '>' is a garbage value due to array index out of bounds
         if (T[J]>VMAX)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1268:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            VMAX=T[J];
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1289:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int NOK, I;
      ^~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1289:11: warning: variable 'NOK' is not initialized [cppcoreguidelines-init-variables]
      int NOK, I;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1289:16: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int NOK, I;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1293:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       T[I] = 0;
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1294:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       T[N-I] = 0;
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1302:58: warning: pointer parameter 'A' can be pointer to const [readability-non-const-parameter]
void naf_modfre(t_naf& g_NAFVariable, int NUMFR, double *A, double *B){
                                                         ^
                                                 const 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1302:69: warning: pointer parameter 'B' can be pointer to const [readability-non-const-parameter]
void naf_modfre(t_naf& g_NAFVariable, int NUMFR, double *A, double *B){
                                                                    ^
                                                            const 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1329:11: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int IT;
          ^
             = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1330:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZOM,ZA,ZEX,ZINC;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1331:22: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZT=NULL;
                     ^~~~
                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1333:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe *pzarTabs, *pzarZT;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1333:19: warning: variable 'pzarTabs' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarTabs, *pzarZT;
                  ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1333:30: warning: variable 'pzarZT' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarTabs, *pzarZT;
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1336:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1336:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1336:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1336:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1336:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1336:60: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
                                                           ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1338:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZOM=i_compl_muldoubl(g_NAFVariable.TFS[NUMFR]/g_NAFVariable.UNIANG,ZI); /*ZOM=g_NAFVariable.TFS[NUMFR]/g_NAFVariable.UNIANG*ZI*/
                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1341:32: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (g_NAFVariable.IPRT>0) fprintf(g_NAFVariable.NFPRT,"CORRECTION DE  IFR = %d AMPLITUDE  = %g\n",NUMFR, i_compl_module(ZA));
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1341:33: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      if (g_NAFVariable.IPRT>0) fprintf(g_NAFVariable.NFPRT,"CORRECTION DE  IFR = %d AMPLITUDE  = %g\n",NUMFR, i_compl_module(ZA));
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1346:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      i_compl_padd(g_NAFVariable.ZAMP+NUMFR,&ZA);
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1349:8: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
       fprintf(g_NAFVariable.NFPRT," %+-20.15E %+-20.15E %+-20.15E %+-20.15E %+-20.15E\n",g_NAFVariable.TFS[NUMFR],
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1349:91: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       fprintf(g_NAFVariable.NFPRT," %+-20.15E %+-20.15E %+-20.15E %+-20.15E %+-20.15E\n",g_NAFVariable.TFS[NUMFR],
                                                                                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1350:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                     i_compl_module(g_NAFVariable.ZAMP[NUMFR]),g_NAFVariable.ZAMP[NUMFR].reel,
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1350:64: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                     i_compl_module(g_NAFVariable.ZAMP[NUMFR]),g_NAFVariable.ZAMP[NUMFR].reel,
                                                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1351:22: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                     g_NAFVariable.ZAMP[NUMFR].imag,atan2(g_NAFVariable.ZAMP[NUMFR].imag,g_NAFVariable.ZAMP[NUMFR].reel));
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1351:59: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                     g_NAFVariable.ZAMP[NUMFR].imag,atan2(g_NAFVariable.ZAMP[NUMFR].imag,g_NAFVariable.ZAMP[NUMFR].reel));
                                                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1351:90: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                     g_NAFVariable.ZAMP[NUMFR].imag,atan2(g_NAFVariable.ZAMP[NUMFR].imag,g_NAFVariable.ZAMP[NUMFR].reel));
                                                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1365:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             IT++, pzarTabs++, pzarZT++)/*v0.96 M. GASTINEAU 12/01/99 : fin optimisation*/
                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1365:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             IT++, pzarTabs++, pzarZT++)/*v0.96 M. GASTINEAU 12/01/99 : fin optimisation*/
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1378:14: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         if (g_NAFVariable.TFS[NUMFR]==0.E0)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1382:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -= ZT[IT].reel;
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1382:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -= ZT[IT].reel;
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1386:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         else
             ^
              {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1393:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -=2*ZT[IT].reel;/* g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)- DREAL(ZT(IT)) */
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1393:45: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -=2*ZT[IT].reel;/* g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)- DREAL(ZT(IT)) */
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1397:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZT); /*deallocate(ZT)*/
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1397:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZT); /*deallocate(ZT)*/
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1404:6: warning: function 'naf_gramsc' has cognitive complexity of 31 (threshold 25) [readability-function-cognitive-complexity]
BOOL naf_gramsc(t_naf& g_NAFVariable, double FS, double A, double B){
     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1444:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      for(I =1;I<=g_NAFVariable.NFS;I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1446:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if(naf_proscaa(g_NAFVariable, FS,g_NAFVariable.TFS[I],ZTEE+I)==FALSE)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1458:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      for( K=1;K<=g_NAFVariable.NFS;K++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1460:8: note: +2, including nesting penalty of 1, nesting level increased to 2
       for(I=K;I<=g_NAFVariable.NFS;I++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1462:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        for(J=1;J<=I;J++)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1475:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      for( I=1; I<=NF; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1483:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1490:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      for(I=1; I<=NF; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1499:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      for(I=1; I<=NF; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1508:10: note: +2, including nesting penalty of 1, nesting level increased to 2
         if (g_NAFVariable.IPRT==1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1514:8: note: +2, including nesting penalty of 1, nesting level increased to 2
       if (g_NAFVariable.ICPLX==1)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1523:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         for(IT=0, pzarTabs=g_NAFVariable.ZTABS, pzarZT=ZT;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1530:8: note: +1, nesting level increased to 2
       else
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1538:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (FS==0.E0)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1540:10: note: +4, including nesting penalty of 3, nesting level increased to 4
         for(IT=0;IT<=ikTabs;IT++)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1546:10: note: +1, nesting level increased to 3
         else
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1433:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int   I, J, K, NF, IT;
      ^~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1433:13: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int   I, J, K, NF, IT;
            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1433:16: warning: variable 'J' is not initialized [cppcoreguidelines-init-variables]
      int   I, J, K, NF, IT;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1433:19: warning: variable 'K' is not initialized [cppcoreguidelines-init-variables]
      int   I, J, K, NF, IT;
                  ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1433:22: warning: variable 'NF' is not initialized [cppcoreguidelines-init-variables]
      int   I, J, K, NF, IT;
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1433:26: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int   I, J, K, NF, IT;
                         ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1434:14: warning: variable 'DIV' is not initialized [cppcoreguidelines-init-variables]
      double DIV;
             ^
                 = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1435:24: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZTEE=NULL;
                       ^~~~
                       nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1436:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZDIV,ZMUL,ZI,ZEX,ZINC,ZA,ZOM;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1437:22: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZT=NULL;
                     ^~~~
                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1438:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe *pzarTabs, *pzarZT;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1438:19: warning: variable 'pzarTabs' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarTabs, *pzarZT;
                  ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1438:30: warning: variable 'pzarZT' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarTabs, *pzarZT;
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:61: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
                                                            ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:63: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
                                                              ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1446:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        if(naf_proscaa(g_NAFVariable, FS,g_NAFVariable.TFS[I],ZTEE+I)==FALSE)
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1446:67: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        if(naf_proscaa(g_NAFVariable, FS,g_NAFVariable.TFS[I],ZTEE+I)==FALSE)
                                                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1448:10: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
         SYSFREE(ZT);
         ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1448:10: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
         SYSFREE(ZT);
         ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1449:10: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
         SYSFREE(ZTEE);
         ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1449:10: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
         SYSFREE(ZTEE);
         ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1455:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      i_compl_cmplx(ZTEE+NF,1.E0,0.E0);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1457:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      g_NAFVariable.TFS[NF]=FS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1466:58: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          zSubExp=i_compl_mul(i_compl_mul(i_compl_conj(&(g_NAFVariable.ZALP[I][J])),g_NAFVariable.ZALP[I][K]),ZTEE[J]);
                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1466:85: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          zSubExp=i_compl_mul(i_compl_mul(i_compl_conj(&(g_NAFVariable.ZALP[I][J])),g_NAFVariable.ZALP[I][K]),ZTEE[J]);
                                                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1466:111: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          zSubExp=i_compl_mul(i_compl_mul(i_compl_conj(&(g_NAFVariable.ZALP[I][J])),g_NAFVariable.ZALP[I][K]),ZTEE[J]);
                                                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1467:26: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          i_compl_psub(&(g_NAFVariable.ZALP[NF][K]),&zSubExp);
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1471:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      i_compl_cmplx(&(g_NAFVariable.ZALP[NF][NF]),1.E0,0.E0);
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1479:47: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         zSubExp = i_compl_mul(i_compl_conj(&(g_NAFVariable.ZALP[NF][I])),ZTEE[I]);
                                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1479:75: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         zSubExp = i_compl_mul(i_compl_conj(&(g_NAFVariable.ZALP[NF][I])),ZTEE[I]);
                                                                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1487:8: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
       fprintf(g_NAFVariable.NFPRT,"ZDIV= %g+i%g DIV=%g\n",ZDIV.reel,ZDIV.imag,DIV);
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1492:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         i_compl_pdivdoubl(&(g_NAFVariable.ZALP[NF][I]),&DIV); /*g_NAFVariable.ZALP(NF,I) = g_NAFVariable.ZALP(NF,I)/DIV*/
                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1501:31: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZOM=i_compl_muldoubl(g_NAFVariable.TFS[I]/g_NAFVariable.UNIANG,ZI); /*ZOM=g_NAFVariable.TFS(I)/g_NAFVariable.UNIANG*ZI*/
                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1502:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZA=i_compl_mul(g_NAFVariable.ZALP[NF][I],ZMUL);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1507:41: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         i_compl_padd(g_NAFVariable.ZAMP+I,&ZA);
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1510:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(g_NAFVariable.NFPRT," %g %g %g %g %g\n", g_NAFVariable.TFS[I],i_compl_module(g_NAFVariable.ZAMP[I]),g_NAFVariable.ZAMP[I].reel,
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1510:61: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           fprintf(g_NAFVariable.NFPRT," %g %g %g %g %g\n", g_NAFVariable.TFS[I],i_compl_module(g_NAFVariable.ZAMP[I]),g_NAFVariable.ZAMP[I].reel,
                                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1510:97: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           fprintf(g_NAFVariable.NFPRT," %g %g %g %g %g\n", g_NAFVariable.TFS[I],i_compl_module(g_NAFVariable.ZAMP[I]),g_NAFVariable.ZAMP[I].reel,
                                                                                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1510:120: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           fprintf(g_NAFVariable.NFPRT," %g %g %g %g %g\n", g_NAFVariable.TFS[I],i_compl_module(g_NAFVariable.ZAMP[I]),g_NAFVariable.ZAMP[I].reel,
                                                                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1511:20: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                   g_NAFVariable.ZAMP[I].imag,atan2(g_NAFVariable.ZAMP[I].imag,g_NAFVariable.ZAMP[I].reel));
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1511:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                   g_NAFVariable.ZAMP[I].imag,atan2(g_NAFVariable.ZAMP[I].imag,g_NAFVariable.ZAMP[I].reel));
                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1511:80: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                   g_NAFVariable.ZAMP[I].imag,atan2(g_NAFVariable.ZAMP[I].imag,g_NAFVariable.ZAMP[I].reel));
                                                                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1525:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             IT++,pzarTabs++,pzarZT++) /*v0.96 M. GASTINEAU 12/01/99 : optimisation*/
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1525:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
             IT++,pzarTabs++,pzarZT++) /*v0.96 M. GASTINEAU 12/01/99 : optimisation*/
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1542:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -= ZT[IT].reel;
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1542:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -= ZT[IT].reel;
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1546:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         else
             ^
              {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1554:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -= 2*ZT[IT].reel; /*g_NAFVariable.ZTABS(IT+1)=g_NAFVariable.ZTABS(IT+1)- DREAL(ZT(IT+1)) */
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1554:46: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           g_NAFVariable.ZTABS[IT].reel -= 2*ZT[IT].reel; /*g_NAFVariable.ZTABS(IT+1)=g_NAFVariable.ZTABS(IT+1)- DREAL(ZT(IT+1)) */
                                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1559:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1559:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1560:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZTEE);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1560:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZTEE);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1584:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZF,ZF1,ZF2;
      ^~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:15: warning: variable 'PICARRE' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:24: warning: variable 'T1' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:27: warning: variable 'T2' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:31: warning: variable 'XT' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:34: warning: variable 'DIV' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:38: warning: variable 'FACTEUR' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:46: warning: variable 'T' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:48: warning: variable 'FR1' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                                               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1585:52: warning: variable 'FR2' is not initialized [cppcoreguidelines-init-variables]
      double  PICARRE, T1,T2, XT,DIV,FACTEUR,T,FR1,FR2;
                                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1608:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout, "g_NAFVariable.T0= %g, g_NAFVariable.XH=%g, g_NAFVariable.KTABS=%d\n",
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1611:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout, "F1=%g ,F2=%g\n",F1,F2);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1612:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout, "T1= %g , T2= %g, T= %g\n",T1, T2, T);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1613:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout, "FR1= %g ,FR2= %g ,XT= %g \n",FR1,FR2,XT);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1614:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout, "DIV= %g\n",DIV);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1643:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double DER, RMF;
      ^~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1643:14: warning: variable 'DER' is not initialized [cppcoreguidelines-init-variables]
      double DER, RMF;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1643:19: warning: variable 'RMF' is not initialized [cppcoreguidelines-init-variables]
      double DER, RMF;
                  ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1671:10: warning: macro 'NVECT' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
 #define NVECT 64
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1672:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double  OM,ANG0,ANGI,H;
      ^~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1672:15: warning: variable 'OM' is not initialized [cppcoreguidelines-init-variables]
      double  OM,ANG0,ANGI,H;
              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1672:18: warning: variable 'ANG0' is not initialized [cppcoreguidelines-init-variables]
      double  OM,ANG0,ANGI,H;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1672:23: warning: variable 'ANGI' is not initialized [cppcoreguidelines-init-variables]
      double  OM,ANG0,ANGI,H;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1672:28: warning: variable 'H' is not initialized [cppcoreguidelines-init-variables]
      double  OM,ANG0,ANGI,H;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1673:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZAC,ZINC,ZEX,ZB,/*ZT,*/ZA;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1674:11: warning: variable 'LTF' is not initialized [cppcoreguidelines-init-variables]
      int LTF;
          ^
              = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1675:23: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZTF=NULL;/*tableau de 1 a KTABS+1 */
                      ^~~~
                      nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1676:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZTF,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1676:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZTF,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1676:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZTF,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1676:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZTF,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1676:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZTF,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1676:61: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZTF,t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = NERROR)*/
                                                            ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1699:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZTF);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1699:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZTF);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1705:73: warning: pointer parameter 'TW' can be pointer to const [readability-non-const-parameter]
void naf_ztder(int N, int N1, t_complexe *ZTF, t_complexe *ZTA, double *TW, t_complexe ZA, t_complexe ZAST, double T0, double XH){
                                                                        ^
                                                                const 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1720:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int I,INC,NT,IT,NX;
      ^~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1720:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,NT,IT,NX;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1720:13: warning: variable 'INC' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,NT,IT,NX;
            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1720:17: warning: variable 'NT' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,NT,IT,NX;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1720:20: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,NT,IT,NX;
                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1720:23: warning: variable 'NX' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,NT,IT,NX;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1721:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZT1, ZINC;
      ^~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1722:22: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZT=NULL;
                     ^~~~
                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:40: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
                                       ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1727:10: warning: Potential leak of memory pointed to by 'ZT' [clang-analyzer-unix.Malloc]
         fprintf(stdout,"DANS ZTDER, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Memory is allocated
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:11: note: Assuming the condition is true
      if (N<N1-1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:7: note: Taking true branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1727:10: note: Potential leak of memory pointed to by 'ZT'
         fprintf(stdout,"DANS ZTDER, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1727:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout,"DANS ZTDER, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1731:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT[0] = i_compl_mul(ZAST,ZA);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1734:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZT[I] = i_compl_mul(ZT[I-1],ZA);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1734:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZT[I] = i_compl_mul(ZT[I-1],ZA);
                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1738:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl((T0+(I)*XH)*TW[I], i_compl_mul(ZTA[I],ZT[I]));
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1738:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl((T0+(I)*XH)*TW[I], i_compl_mul(ZTA[I],ZT[I]));
                                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1738:67: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl((T0+(I)*XH)*TW[I], i_compl_mul(ZTA[I],ZT[I]));
                                                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1738:74: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl((T0+(I)*XH)*TW[I], i_compl_mul(ZTA[I],ZT[I]));
                                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1741:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT1 = i_compl_div(ZT[N1-1],ZAST);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1751:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           ZTF[INC+I]=i_compl_muldoubl((T0+(INC+I)*XH)*TW[INC+I],i_compl_mul(ZTA[INC+I],i_compl_mul(ZT[I],ZINC)));
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1751:56: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           ZTF[INC+I]=i_compl_muldoubl((T0+(INC+I)*XH)*TW[INC+I],i_compl_mul(ZTA[INC+I],i_compl_mul(ZT[I],ZINC)));
                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1751:78: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           ZTF[INC+I]=i_compl_muldoubl((T0+(INC+I)*XH)*TW[INC+I],i_compl_mul(ZTA[INC+I],i_compl_mul(ZT[I],ZINC)));
                                                                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1751:101: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           ZTF[INC+I]=i_compl_muldoubl((T0+(INC+I)*XH)*TW[INC+I],i_compl_mul(ZTA[INC+I],i_compl_mul(ZT[I],ZINC)));
                                                                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1760:9: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ZTF[INC+I]=i_compl_muldoubl(TW[INC+I]*(T0+(INC+I)*XH), i_compl_mul(ZTA[INC+I], i_compl_mul(ZT[I],ZINC)));
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1760:37: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ZTF[INC+I]=i_compl_muldoubl(TW[INC+I]*(T0+(INC+I)*XH), i_compl_mul(ZTA[INC+I], i_compl_mul(ZT[I],ZINC)));
                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1760:76: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ZTF[INC+I]=i_compl_muldoubl(TW[INC+I]*(T0+(INC+I)*XH), i_compl_mul(ZTA[INC+I], i_compl_mul(ZT[I],ZINC)));
                                                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1760:100: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        ZTF[INC+I]=i_compl_muldoubl(TW[INC+I]*(T0+(INC+I)*XH), i_compl_mul(ZTA[INC+I], i_compl_mul(ZT[I],ZINC)));
                                                                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1763:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1763:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1767:6: warning: function 'naf_secantes' has cognitive complexity of 30 (threshold 25) [readability-function-cognitive-complexity]
void naf_secantes(t_naf& g_NAFVariable, double X, double PASS, double EPS, double *XM, int IPRT, FILE *NFPRT){
     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1818:13: note: +1, including nesting penalty of 0, nesting level increased to 1
       EPSI=MAX(g_NAFVariable.EPSM,EPS);
            ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1819:8: note: +1, including nesting penalty of 0, nesting level increased to 1
       if (fabs(PASS)>EPSI)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1821:10: note: +2, including nesting penalty of 1, nesting level increased to 2
         if (IPRT>=1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1833:8: note: +1, including nesting penalty of 0, nesting level increased to 1
       if (fabs(B-A)>EPSI)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1839:11: note: +2, including nesting penalty of 1, nesting level increased to 2
          if (IPRT>=2)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1844:11: note: +2, including nesting penalty of 1, nesting level increased to 2
          if (fabs(DELTA)<=g_NAFVariable.EPSM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1847:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (IPRT>=1)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1860:11: note: +2, including nesting penalty of 1, nesting level increased to 2
          if (I>SECANTES_NMAX)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1863:14: note: +3, including nesting penalty of 2, nesting level increased to 3
             if (IPRT>=0)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1872:11: note: +1
          goto SECANTES_10;  /*GOTO 10*/
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1876:8: note: +1, including nesting penalty of 0, nesting level increased to 1
       if (SECANTES_IENC==1)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1878:13: note: +2, including nesting penalty of 1, nesting level increased to 2
            if (naf_funcp(g_NAFVariable, B-EPSI)*naf_funcp(g_NAFVariable, B+EPSI)>0.E0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1884:8: note: +1, including nesting penalty of 0, nesting level increased to 1
       if (IPRT==1)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1891:11: note: +2, including nesting penalty of 1, nesting level increased to 2
          if (SECANTES_IENC==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1893:14: note: +3, including nesting penalty of 2, nesting level increased to 3
             if (g_NAFVariable.NERROR==1)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1897:14: note: +3, including nesting penalty of 2, nesting level increased to 3
             if (g_NAFVariable.NERROR==0)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1812:10: warning: macro 'SECANTES_NMAX' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
 #define SECANTES_NMAX (30)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1813:10: warning: macro 'SECANTES_IENC' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
 #define SECANTES_IENC (1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1814:12: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
       int I;
           ^
             = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:8: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
       double EPSI,A,B,FA,FB,DELTA,COR;
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:15: warning: variable 'EPSI' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:20: warning: variable 'A' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:22: warning: variable 'B' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:24: warning: variable 'FA' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:27: warning: variable 'FB' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:30: warning: variable 'DELTA' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1815:36: warning: variable 'COR' is not initialized [cppcoreguidelines-init-variables]
       double EPSI,A,B,FA,FB,DELTA,COR;
                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1823:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(NFPRT," AMELIORATION PAR LES SECANTES\n");
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1841:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
            fprintf(NFPRT,"SEC: A=%g, B=%g, abs(B-A)=%g \n", A, B,fabs(B-A));
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1842:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
            fprintf(NFPRT,"SEC: F(A)=%g, F(B)=%g\n", FA, FB);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1849:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
              fprintf(NFPRT,"ECHEC DE LA METHODE DES SECANTES\n");
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1850:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
              fprintf(NFPRT," DIVISION PAR PRESQUEZERO\n");
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1851:15: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
              fprintf(NFPRT," ON CONTINUE AVEC LA VALEUR TROUVEE\n");
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1865:16: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
               fprintf(NFPRT,"ECHEC DE LA METHODE DES SECANTES\n");
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1866:16: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
               fprintf(NFPRT," BEAUCOUP TROP D ITERATIONS\n");
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1867:16: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
               fprintf(NFPRT," ON CONTINUE AVEC LA VALEUR INITIALE\n");
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1872:11: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
          goto SECANTES_10;  /*GOTO 10*/
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1832:2: note: label defined here
 SECANTES_10 :
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1889:11: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
          fprintf(NFPRT,"POSITION SECANTES %g TROUVEE A %g",*XM, EPSI);
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1895:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(NFPRT," SANS GARANTIE\n");
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1899:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(NFPRT," AVEC GARANTIE\n");
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1905:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(NFPRT,"\n %19.9E %12.8E\n", PASS,*XM);
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1913:6: warning: function 'naf_maxiqua' has cognitive complexity of 63 (threshold 25) [readability-function-cognitive-complexity]
void naf_maxiqua(t_naf& g_NAFVariable, double X, double PASS, double EPS, double *XM, double *YM, int IPRT, FILE *NFPRT){
     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1981:14: note: +1, including nesting penalty of 0, nesting level increased to 1
      EPSLOC=MAX(EPS,sqrt(g_NAFVariable.EPSM));
             ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1985:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (IPRT>=1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2001:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if ((NITER>MAXIQUA_NMAX)||(NCALCUL>MAXIQUA_NFATAL))
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2001:31: note: +1
      if ((NITER>MAXIQUA_NMAX)||(NCALCUL>MAXIQUA_NFATAL))
                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2003:10: note: +2, including nesting penalty of 1, nesting level increased to 2
         if (NCALCUL>MAXIQUA_NFATAL)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2006:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (IPRT>=0)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2011:10: note: +1, nesting level increased to 2
         else
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2013:12: note: +3, including nesting penalty of 2, nesting level increased to 3
           if (PAS>=PASS)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2016:15: note: +4, including nesting penalty of 3, nesting level increased to 4
              if (IPRT>=0)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2021:12: note: +1, nesting level increased to 3
           else
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2024:15: note: +4, including nesting penalty of 3, nesting level increased to 4
              if (IPRT>=0)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2031:10: note: +1
         goto MAXIQUA_EXIT;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2033:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if ((Y1>Y2)||(Y3>Y2))
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2033:18: note: +1
      if ((Y1>Y2)||(Y3>Y2))
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2036:13: note: +2, including nesting penalty of 1, nesting level increased to 2
            if (Y1>Y3)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2041:13: note: +1, nesting level increased to 2
            else
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2050:13: note: +1
            goto MAXIQUA_10;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2055:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (IPRT>=2)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2057:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (sqrt(A)!=0)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2061:9: note: +1, nesting level increased to 2
        else
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2067:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if ((fabs (D1-D2))<2.E0*g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(Y2)))
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2067:50: note: +1, including nesting penalty of 0, nesting level increased to 1
      if ((fabs (D1-D2))<2.E0*g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(Y2)))
                                                 ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2070:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (IPRT>=1)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2075:9: note: +1
        goto MAXIQUA_EXIT;
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2079:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (A<g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(Y2)))
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2079:32: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (A<g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(Y2)))
                               ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2082:10: note: +2, including nesting penalty of 1, nesting level increased to 2
         if (IPRT>=1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2087:9: note: +1
        goto MAXIQUA_EXIT;
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2092:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (PAS<=EPSLOC*sqrt(MAX(MAXIQUA_RABS,fabs(Y2))/A))
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2092:28: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (PAS<=EPSLOC*sqrt(MAX(MAXIQUA_RABS,fabs(Y2))/A))
                           ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2094:11: note: +2, including nesting penalty of 1, nesting level increased to 2
          if (IPRT>=1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2098:27: note: +2, including nesting penalty of 1, nesting level increased to 2
          ERR=EPSLOC*sqrt(MAX(MAXIQUA_RABS,Y2)/A);
                          ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2099:11: note: +1
          goto MAXIQUA_EXIT;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2103:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (fabs(DX)<g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(X2)))
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2103:39: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (fabs(DX)<g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(X2)))
                                      ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2105:11: note: +2, including nesting penalty of 1, nesting level increased to 2
          if (IPRT>=1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2110:11: note: +1
          goto MAXIQUA_EXIT;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2113:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (DX>0.E0)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2122:7: note: +1, nesting level increased to 1
      else
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2135:7: note: +1
      goto MAXIQUA_10;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2139:7: note: +1, including nesting penalty of 0, nesting level increased to 1
      if (IPRT>=1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2144:10: note: +2, including nesting penalty of 1, nesting level increased to 2
         if (TEMP<2.E0*g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(Y2)))
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2144:43: note: +2, including nesting penalty of 1, nesting level increased to 2
         if (TEMP<2.E0*g_NAFVariable.EPSM*MAX(MAXIQUA_RABS,fabs(Y2)))
                                          ^
./src/naff_utils.h:39:26: note: expanded from macro 'MAX'
#define MAX(x,y) ((x)<(y)?(y):(x))
                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1970:10: warning: macro 'MAXIQUA_NMAX' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
 #define MAXIQUA_NMAX (200)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1971:10: warning: macro 'MAXIQUA_NFATAL' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
 #define MAXIQUA_NFATAL (100)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1972:10: warning: macro 'MAXIQUA_RABS' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
 #define MAXIQUA_RABS (1.E0)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1973:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int NITER, NCALCUL;
      ^~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1973:11: warning: variable 'NITER' is not initialized [cppcoreguidelines-init-variables]
      int NITER, NCALCUL;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1973:18: warning: variable 'NCALCUL' is not initialized [cppcoreguidelines-init-variables]
      int NITER, NCALCUL;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:14: warning: variable 'PAS' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:18: warning: variable 'EPSLOC' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:25: warning: variable 'X1' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                        ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:28: warning: variable 'X2' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:31: warning: variable 'X3' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:34: warning: variable 'Y1' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:37: warning: variable 'Y2' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:40: warning: variable 'Y3' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:43: warning: variable 'A' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:45: warning: variable 'ERR' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:49: warning: variable 'DX' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1974:52: warning: variable 'TEMP' is not initialized [cppcoreguidelines-init-variables]
      double PAS,EPSLOC,X1,X2,X3,Y1,Y2,Y3,A,ERR,DX,TEMP;
                                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1975:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double D1=0E0,D2=0E0;
      ^~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1987:11: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
          fprintf(NFPRT," ROUTINE DE RECHERCHE DU MAXIMUM :\n");
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2008:16: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
               fprintf(NFPRT," ERREUR FATALE\n");
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2018:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(NFPRT,"  PAS D''ENCADREMENT TROUVE\n");
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2026:17: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(NFPRT," OSCILLATION DE L''ENCADREMENT ?\n");
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2031:10: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
         goto MAXIQUA_EXIT;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2136:2: note: label defined here
 MAXIQUA_EXIT :
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2050:13: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
            goto MAXIQUA_10;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2000:2: note: label defined here
 MAXIQUA_10:
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2059:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(NFPRT,"%12.8E %12.8E %25.16E %25.16E %25.16E %25.16E\n", PAS,X2,Y1,Y2,Y3,EPSLOC/sqrt(A));
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2063:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(NFPRT,"%12.8E %12.8E %25.16E %25.16E %25.16E INF\n", PAS,X2,Y1,Y2,Y3);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2072:11: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
          fprintf(NFPRT," PLATEAU DE LA FONCTION\n");
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2075:9: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
        goto MAXIQUA_EXIT;
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2136:2: note: label defined here
 MAXIQUA_EXIT :
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2084:11: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
          fprintf(NFPRT,"COURBE TROP PLATE\n");
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2087:9: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
        goto MAXIQUA_EXIT;
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2136:2: note: label defined here
 MAXIQUA_EXIT :
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2096:14: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
             fprintf(NFPRT,"SORTIE AU SOMMET DE LA PARABOLE\n");
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2099:11: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
          goto MAXIQUA_EXIT;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2136:2: note: label defined here
 MAXIQUA_EXIT :
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2107:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(NFPRT,"CORRECTION MINUSCULE\n");
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2110:11: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
          goto MAXIQUA_EXIT;
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2136:2: note: label defined here
 MAXIQUA_EXIT :
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2135:7: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
      goto MAXIQUA_10;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2000:2: note: label defined here
 MAXIQUA_10:
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2141:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(NFPRT,"%12.8E %12.8E %12.8E\n", PAS,*XM,*YM);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2142:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(NFPRT," POSITION TROUVEE A %g PRES\n",ERR);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2146:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
            fprintf(NFPRT," TROUVEE SOUS UN PLATEAU DE LA FONCTION\n");
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2177:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double X,PASS,EPS,XM,YM;
      ^~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2177:14: warning: variable 'X' is not initialized [cppcoreguidelines-init-variables]
      double X,PASS,EPS,XM,YM;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2177:16: warning: variable 'PASS' is not initialized [cppcoreguidelines-init-variables]
      double X,PASS,EPS,XM,YM;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2177:21: warning: variable 'EPS' is not initialized [cppcoreguidelines-init-variables]
      double X,PASS,EPS,XM,YM;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2177:25: warning: variable 'XM' is not initialized [cppcoreguidelines-init-variables]
      double X,PASS,EPS,XM,YM;
                        ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2177:28: warning: variable 'YM' is not initialized [cppcoreguidelines-init-variables]
      double X,PASS,EPS,XM,YM;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2206:8: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
       fprintf(g_NAFVariable.NFPRT,"\n%10.6E %19.9E %19.9E %19.9E\n", *FR,*RM,g_NAFVariable.AF,g_NAFVariable.BF);
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2233:11: warning: variable 'LTF' is not initialized [cppcoreguidelines-init-variables]
      int LTF;
          ^
              = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2234:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double OM,ANG0,ANGI,H;
      ^~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2234:14: warning: variable 'OM' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2234:17: warning: variable 'ANG0' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2234:22: warning: variable 'ANGI' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2234:27: warning: variable 'H' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2235:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZAC,ZINC,ZEX,ZA;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2236:23: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZTF=NULL;
                      ^~~~
                      nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:62: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
                                                             ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2257:8: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
       SYSFREE(ZTF);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2257:8: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
       SYSFREE(ZTF);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2263:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZTF);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2263:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZTF);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2283:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int INC,NT,IT,I,NX;
      ^~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2283:11: warning: variable 'INC' is not initialized [cppcoreguidelines-init-variables]
      int INC,NT,IT,I,NX;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2283:15: warning: variable 'NT' is not initialized [cppcoreguidelines-init-variables]
      int INC,NT,IT,I,NX;
              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2283:18: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int INC,NT,IT,I,NX;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2283:21: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int INC,NT,IT,I,NX;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2283:23: warning: variable 'NX' is not initialized [cppcoreguidelines-init-variables]
      int INC,NT,IT,I,NX;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2284:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZT1,ZINC;
      ^~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2285:22: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZT=NULL;
                     ^~~~
                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2286:19: warning: variable 'pzarZT' is not initialized [cppcoreguidelines-init-variables]
      t_complexe *pzarZT;
                  ^
                         = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:41: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
                                        ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2290:10: warning: Potential leak of memory pointed to by 'ZT' [clang-analyzer-unix.Malloc]
         fprintf(stdout,"DANS ZTPOW, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:22: note: 'IFR' is > field 'NFS'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is false. Execution continues on line 948
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:950:11: note: Calling 'naf_mftnaf'
      if (naf_mftnaf (g_NAFVariable, NVTERM,EPS)==FALSE)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: 'iFrMin' is > 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking true branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: 'iFrMax' is > 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking true branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:650:10: note: Calling 'naf_frefin'
         naf_frefin(g_NAFVariable, &FR,&A,&B,&RM,STAREP,EPS);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2190:11: note: Assuming field 'ISEC' is equal to 1
      if (g_NAFVariable.ISEC==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2190:7: note: Taking true branch
      if (g_NAFVariable.ISEC==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2195:13: note: Calling 'naf_func'
         YM=naf_func(g_NAFVariable, XM);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1631:7: note: Calling 'naf_profre'
      naf_profre(g_NAFVariable, X,&g_NAFVariable.AF,&g_NAFVariable.BF,&RMD);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2252:7: note: Calling 'naf_ztpow2'
      naf_ztpow2(g_NAFVariable.KTABS,64,ZTF,g_NAFVariable.ZTABS,g_NAFVariable.TWIN,ZINC,ZEX); /*CALL  ZTPOW2(g_NAFVariable.KTABS+1,64,ZTF,g_NAFVariable.ZTABS,TWIN,ZINC,ZEX)*/
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: note: Memory is allocated
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2288:11: note: Assuming the condition is true
      if (N<N1-1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2288:7: note: Taking true branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2290:10: note: Potential leak of memory pointed to by 'ZT'
         fprintf(stdout,"DANS ZTPOW, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2290:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout,"DANS ZTPOW, N = %d\n", N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2294:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT[0] = i_compl_mul(ZAST,ZA);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2295:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      for(I = 1, pzarZT=ZT+1; I<N1; I++, pzarZT++)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2295:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      for(I = 1, pzarZT=ZT+1; I<N1; I++, pzarZT++)
                                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2297:38: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *pzarZT=i_compl_mul(*(pzarZT-1), ZA); /*ZT(I) = ZT(I-1)*ZA*/
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2301:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I]=i_compl_muldoubl(TW[I], i_compl_mul(ZTA[I], ZT[I])); /*ZTF(I) = ZTA(I)*TW(I)*ZT(I)*/
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2301:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I]=i_compl_muldoubl(TW[I], i_compl_mul(ZTA[I], ZT[I])); /*ZTF(I) = ZTA(I)*TW(I)*ZT(I)*/
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2301:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I]=i_compl_muldoubl(TW[I], i_compl_mul(ZTA[I], ZT[I])); /*ZTF(I) = ZTA(I)*TW(I)*ZT(I)*/
                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2301:61: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I]=i_compl_muldoubl(TW[I], i_compl_mul(ZTA[I], ZT[I])); /*ZTF(I) = ZTA(I)*TW(I)*ZT(I)*/
                                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2303:24: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT1= i_compl_div(ZT[N1-1], ZAST); /*ZT1 = ZT(N1-1)/ZAST*/
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2314:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2314:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2314:79: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
                                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2314:91: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
                                                                                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2323:8: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2323:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2323:74: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
                                                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2323:86: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       ZTF[INC +I] = i_compl_muldoubl(TW[INC+I], i_compl_mul(i_compl_mul(ZTA[INC+I], ZT[I]),ZINC));
                                                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2325:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2325:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2360:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int I, IT;
      ^~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2360:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I, IT;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2360:14: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int I, IT;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double CE,T1,T2,TM,T,CN,PIST;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:14: warning: variable 'CE' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:17: warning: variable 'T1' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:20: warning: variable 'T2' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:23: warning: variable 'TM' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:26: warning: variable 'T' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
                         ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:28: warning: variable 'CN' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2361:31: warning: variable 'PIST' is not initialized [cppcoreguidelines-init-variables]
      double CE,T1,T2,TM,T,CN,PIST;
                              ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2376:12: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           p_pardTWIN[IT]=1.E0;
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2393:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            p_pardTWIN[IT]=CN*pow((1.E0+cos(T*PIST)),g_NAFVariable.IW);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2403:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         p_pardTWIN[0] =0.E0;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2404:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         p_pardTWIN[g_NAFVariable.KTABS] =0.E0;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2412:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            p_pardTWIN[IT]= exp(-1.E0/(1.E0-T*T))/CE;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2424:13: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
            fprintf(g_NAFVariable.NFPRT,"%20.3E\n", p_pardTWIN[IT]*1.E6);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2424:53: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            fprintf(g_NAFVariable.NFPRT,"%20.3E\n", p_pardTWIN[IT]*1.E6);
                                                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2424:67: warning: The left operand of '*' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
            fprintf(g_NAFVariable.NFPRT,"%20.3E\n", p_pardTWIN[IT]*1.E6);
                                                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Taking false branch
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Taking false branch
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Assuming the condition is false
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:544:7: note: Loop condition is false. Execution continues on line 545
      DIM2(g_NAFVariable.ZALP, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe,"ZALP"); /*allocate(ZALP(1:NTERM,1:NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:545:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(g_NAFVariable.TWIN, double, g_NAFVariable.KTABS+1); /*allocate(TWIN(0:KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:547:25: note: Calling 'naf_iniwin'
      /*naf_iniwin();*/ naf_iniwin(g_NAFVariable, g_NAFVariable.TWIN);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2370:11: note: Assuming field 'IW' is not equal to 0
      if (g_NAFVariable.IW==0)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2370:7: note: Taking false branch
      if (g_NAFVariable.IW==0)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2380:15: note: Assuming field 'IW' is < 0
      else if(g_NAFVariable.IW>=0)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2380:12: note: Taking false branch
      else if(g_NAFVariable.IW>=0)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2397:15: note: Assuming the condition is false
      else if(g_NAFVariable.IW==-1)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2397:12: note: Taking false branch
      else if(g_NAFVariable.IW==-1)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2416:11: note: Assuming field 'IPRT' is equal to 1
      if (g_NAFVariable.IPRT==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2416:7: note: Taking true branch
      if (g_NAFVariable.IPRT==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2419:14: note: The value 0 is assigned to 'IT'
         for(IT=0; IT<=g_NAFVariable.KTABS; (g_NAFVariable.KTABS>20?IT+=g_NAFVariable.KTABS/20:IT++))
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2419:20: note: Assuming 'IT' is <= field 'KTABS'
         for(IT=0; IT<=g_NAFVariable.KTABS; (g_NAFVariable.KTABS>20?IT+=g_NAFVariable.KTABS/20:IT++))
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2419:10: note: Loop condition is true.  Entering loop body
         for(IT=0; IT<=g_NAFVariable.KTABS; (g_NAFVariable.KTABS>20?IT+=g_NAFVariable.KTABS/20:IT++))
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2424:67: note: The left operand of '*' is a garbage value
            fprintf(g_NAFVariable.NFPRT,"%20.3E\n", p_pardTWIN[IT]*1.E6);
                                                                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2451:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int ITEST, K, I;
      ^~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2451:11: warning: variable 'ITEST' is not initialized [cppcoreguidelines-init-variables]
      int ITEST, K, I;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2451:18: warning: variable 'K' is not initialized [cppcoreguidelines-init-variables]
      int ITEST, K, I;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2451:21: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int ITEST, K, I;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2452:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double zomreel, zomimag;
      ^~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2452:14: warning: variable 'zomreel' is not initialized [cppcoreguidelines-init-variables]
      double zomreel, zomimag;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2452:23: warning: variable 'zomimag' is not initialized [cppcoreguidelines-init-variables]
      double zomreel, zomimag;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2453:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double zomreeltemp, zomimagtemp;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2453:14: warning: variable 'zomreeltemp' is not initialized [cppcoreguidelines-init-variables]
      double zomreeltemp, zomimagtemp;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2453:27: warning: variable 'zomimagtemp' is not initialized [cppcoreguidelines-init-variables]
      double zomreeltemp, zomimagtemp;
                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2454:7: warning: use auto when initializing with a cast to avoid duplicating the type name [hicpp-use-auto,modernize-use-auto]
      double *pdZT=(double*)(ZT);
      ^~~~~~
      auto
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2454:20: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      double *pdZT=(double*)(ZT);
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2459:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         Myyerror("naf_zradyd - N N'EST PAS UN MULTIPLE DE 6\n");
         ^
./src/naff_utils.h:38:18: note: expanded from macro 'Myyerror'
#define Myyerror printf
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2493:18: warning: The right operand of '*' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
      zomreel=41 * ( *pdZT++); zomimag=41 * ( *pdZT++);
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is > field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is false. Execution continues on line 936
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:22: note: 'IFR' is > field 'NFS'
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:938:8: note: Loop condition is false. Execution continues on line 948
       for( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:950:11: note: Calling 'naf_mftnaf'
      if (naf_mftnaf (g_NAFVariable, NVTERM,EPS)==FALSE)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: 'iFrMin' is > 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking true branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: 'iFrMax' is > 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking true branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:650:10: note: Calling 'naf_frefin'
         naf_frefin(g_NAFVariable, &FR,&A,&B,&RM,STAREP,EPS);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2190:11: note: Assuming field 'ISEC' is equal to 1
      if (g_NAFVariable.ISEC==1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2190:7: note: Taking true branch
      if (g_NAFVariable.ISEC==1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2195:13: note: Calling 'naf_func'
         YM=naf_func(g_NAFVariable, XM);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1631:7: note: Calling 'naf_profre'
      naf_profre(g_NAFVariable, X,&g_NAFVariable.AF,&g_NAFVariable.BF,&RMD);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: note: Storing uninitialized value
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2238:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = g_NAFVariable.NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2252:7: note: Calling 'naf_ztpow2'
      naf_ztpow2(g_NAFVariable.KTABS,64,ZTF,g_NAFVariable.ZTABS,g_NAFVariable.TWIN,ZINC,ZEX); /*CALL  ZTPOW2(g_NAFVariable.KTABS+1,64,ZTF,g_NAFVariable.ZTABS,TWIN,ZINC,ZEX)*/
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2287:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT,t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2288:7: note: Taking true branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2252:7: note: Returning from 'naf_ztpow2'
      naf_ztpow2(g_NAFVariable.KTABS,64,ZTF,g_NAFVariable.ZTABS,g_NAFVariable.TWIN,ZINC,ZEX); /*CALL  ZTPOW2(g_NAFVariable.KTABS+1,64,ZTF,g_NAFVariable.ZTABS,TWIN,ZINC,ZEX)*/
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2255:11: note: Calling 'naf_zardyd'
      if (naf_zardyd(ZTF,LTF,H,&ZA)==FALSE)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2457:11: note: Assuming 'ITEST' is equal to 0
      if (ITEST!=0)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2457:7: note: Taking false branch
      if (ITEST!=0)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2493:18: note: The right operand of '*' is a garbage value
      zomreel=41 * ( *pdZT++); zomimag=41 * ( *pdZT++);
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2493:27: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel=41 * ( *pdZT++); zomimag=41 * ( *pdZT++);
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2493:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel=41 * ( *pdZT++); zomimag=41 * ( *pdZT++);
                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2494:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=216 * ( *pdZT++); zomimag+=216 * ( *pdZT++);
                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2494:56: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=216 * ( *pdZT++); zomimag+=216 * ( *pdZT++);
                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2495:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=27 * ( *pdZT++); zomimag+=27 * ( *pdZT++);
                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2495:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=27 * ( *pdZT++); zomimag+=27 * ( *pdZT++);
                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2496:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=272 * ( *pdZT++); zomimag+=272 * ( *pdZT++);
                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2496:56: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=272 * ( *pdZT++); zomimag+=272 * ( *pdZT++);
                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2497:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=27 * ( *pdZT++); zomimag+=27 * ( *pdZT++);
                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2497:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=27 * ( *pdZT++); zomimag+=27 * ( *pdZT++);
                                                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2498:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=216 * ( *pdZT++); zomimag+=216 * ( *pdZT++);
                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2498:56: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=216 * ( *pdZT++); zomimag+=216 * ( *pdZT++);
                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2499:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=41 * ( ZT[N].reel); zomimag+=41 * ( ZT[N].imag);
                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2499:52: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      zomreel+=41 * ( ZT[N].reel); zomimag+=41 * ( ZT[N].imag);
                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2505:32: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp=82 * ( *pdZT++); zomimagtemp=82 * ( *pdZT++);
                               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2505:61: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp=82 * ( *pdZT++); zomimagtemp=82 * ( *pdZT++);
                                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2506:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=216 * ( *pdZT++); zomimagtemp+=216 * ( *pdZT++);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2506:65: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=216 * ( *pdZT++); zomimagtemp+=216 * ( *pdZT++);
                                                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2507:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=27 * ( *pdZT++); zomimagtemp+=27 * ( *pdZT++);
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2507:63: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=27 * ( *pdZT++); zomimagtemp+=27 * ( *pdZT++);
                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2508:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=272 * ( *pdZT++); zomimagtemp+=272 * ( *pdZT++);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2508:65: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=272 * ( *pdZT++); zomimagtemp+=272 * ( *pdZT++);
                                                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2509:33: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=27 * ( *pdZT++); zomimagtemp+=27 * ( *pdZT++);
                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2509:63: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=27 * ( *pdZT++); zomimagtemp+=27 * ( *pdZT++);
                                                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2510:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=216 * ( *pdZT++); zomimagtemp+=216 * ( *pdZT++);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2510:65: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
       zomreeltemp+=216 * ( *pdZT++); zomimagtemp+=216 * ( *pdZT++);
                                                                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2542:11: warning: variable 'LTF' is not initialized [cppcoreguidelines-init-variables]
      int LTF;
          ^
              = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2543:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double OM,ANG0,ANGI,H;
      ^~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2543:14: warning: variable 'OM' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2543:17: warning: variable 'ANG0' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2543:22: warning: variable 'ANGI' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
                     ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2543:27: warning: variable 'H' is not initialized [cppcoreguidelines-init-variables]
      double OM,ANG0,ANGI,H;
                          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2544:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZAC,ZINC,ZEX;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2545:23: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZTF=NULL;
                      ^~~~
                      nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:62: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
                                                             ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2564:8: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
       SYSFREE(ZTF);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2564:8: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
       SYSFREE(ZTF);
       ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2567:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZTF);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2567:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZTF);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2587:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      int I,INC,IT, NX,NT;
      ^~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2587:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,IT, NX,NT;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2587:13: warning: variable 'INC' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,IT, NX,NT;
            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2587:17: warning: variable 'IT' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,IT, NX,NT;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2587:21: warning: variable 'NX' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,IT, NX,NT;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2587:24: warning: variable 'NT' is not initialized [cppcoreguidelines-init-variables]
      int I,INC,IT, NX,NT;
                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2588:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZT1,ZINC;
      ^~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2589:22: warning: use nullptr [modernize-use-nullptr]
      t_complexe *ZT=NULL;
                     ^~~~
                     nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: warning: function is not thread safe [concurrency-mt-unsafe]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:48:41: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:17: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:48:5: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:26: warning: assigning newly created 'gsl::owner<>' to non-owner 't_complexe *' (aka 'complexe *') [cppcoreguidelines-owning-memory]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
                         ^
./src/naff_utils.h:47:8: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:42: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
                                         ^
./src/naff_utils.h:47:45: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                                            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2594:10: warning: Potential leak of memory pointed to by 'ZT' [clang-analyzer-unix.Malloc]
         fprintf(stdout,"DANS ZTPOW, N = %d\n",N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: Assuming the condition is false
  auto ndata = re.size() < im.size() ? re.size() : im.size();
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:103:16: note: '?' condition is false
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:7: note: Assuming the condition is false
  if ((r = n_interval % 6) != 0) {
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:106:3: note: Taking false branch
  if ((r = n_interval % 6) != 0) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: 'i' is <= 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is true.  Entering loop body
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:20: note: Assuming 'i' is > 'n_interval'
  for (auto i = 0; i <= n_interval; i++) {
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:117:3: note: Loop condition is false. Execution continues on line 125
  for (auto i = 0; i <= n_interval; i++) {
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:125:3: note: Calling 'naf_mftnaf'
  naf_mftnaf(g_NAFVariable, nr_ff,fabs(g_NAFVariable.FREFON)/g_NAFVariable.m_dneps);
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:11: note: Assuming 'NBTERM' is <= field 'NTERM'
      if (NBTERM >g_NAFVariable.NTERM)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:604:7: note: Taking false branch
      if (NBTERM >g_NAFVariable.NTERM)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:11: note: Assuming field 'm_pListFen' is not equal to NULL
      if (g_NAFVariable.m_pListFen==NULL)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:616:7: note: Taking false branch
      if (g_NAFVariable.m_pListFen==NULL)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:12: note: Assuming 'iFrMin' is <= 'iFrMax'
       if (iFrMin>iFrMax)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:628:8: note: Taking false branch
       if (iFrMin>iFrMax)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:12: note: Assuming the condition is false
       if (iFrMin<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:635:8: note: Taking false branch
       if (iFrMin<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:17: note: Assuming 'iFrMin' is <= 'iMaxValue'
       else if (iFrMin>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:637:13: note: Taking false branch
       else if (iFrMin>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:12: note: Assuming the condition is false
       if (iFrMax<-iMaxValue)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:639:8: note: Taking false branch
       if (iFrMax<-iMaxValue)
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:17: note: Assuming 'iFrMax' is <= 'iMaxValue'
       else if (iFrMax>iMaxValue)
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:641:13: note: Taking false branch
       else if (iFrMax>iMaxValue)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:15: note: Assuming 'I' is <= 'NBTERM'
      for(I=1;I<=NBTERM; I++)
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:645:7: note: Loop condition is true.  Entering loop body
      for(I=1;I<=NBTERM; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:652:14: note: 'IFLAG' is not equal to 0
         if (IFLAG == 0) break; /*GOTO 999*/
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:652:10: note: Taking false branch
         if (IFLAG == 0) break; /*GOTO 999*/
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:653:14: note: 'IFLAG' is equal to 1
         if (IFLAG == 1)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:653:10: note: Taking true branch
         if (IFLAG == 1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:655:16: note: Calling 'naf_gramsc'
            if(naf_gramsc(g_NAFVariable, FR,A,B)==FALSE)
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1440:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZT(0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1441:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZTEE, t_complexe, g_NAFVariable.NTERM+1); /*allocate(ZTEE(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1444:7: note: Loop condition is true.  Entering loop body
      for(I =1;I<=g_NAFVariable.NFS;I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1446:12: note: Calling 'naf_proscaa'
        if(naf_proscaa(g_NAFVariable, FS,g_NAFVariable.TFS[I],ZTEE+I)==FALSE)
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2547:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZTF, t_complexe, g_NAFVariable.KTABS+1); /*allocate(ZTF(0:g_NAFVariable.KTABS),stat = nerror)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2557:7: note: Calling 'naf_ztpow2a'
      naf_ztpow2a(g_NAFVariable.KTABS,64,ZTF,g_NAFVariable.TWIN,ZINC,ZEX);/*CALL  ZTPOW2A(g_NAFVariable.KTABS+1,64,ZTF,TWIN,ZINC,ZEX)*/
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: note: Memory is allocated
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2591:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, N1); /*allocate(ZT(0:N1-1),stat = nerror)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2592:11: note: Assuming the condition is true
      if (N<N1-1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2592:7: note: Taking true branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2594:10: note: Potential leak of memory pointed to by 'ZT'
         fprintf(stdout,"DANS ZTPOW, N = %d\n",N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2594:10: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
         fprintf(stdout,"DANS ZTPOW, N = %d\n",N);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2598:7: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT[0] = i_compl_mul(ZAST,ZA);
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2601:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZT[I] = i_compl_mul(ZT[I-1],ZA);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2601:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZT[I] = i_compl_mul(ZT[I-1],ZA);
                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2605:10: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl(TW[I],ZT[I]);
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2605:36: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl(TW[I],ZT[I]);
                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2605:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         ZTF[I] = i_compl_muldoubl(TW[I],ZT[I]);
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2607:25: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
      ZT1 = i_compl_div(ZT[N1-1],ZAST); /*ZT1 = ZT(N1-1)/ZAST*/
                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2617:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I],i_compl_mul(ZT[I],ZINC));/*ZTF(INC +I) = TW(INC+I)*ZT(I)*ZINC*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2617:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I],i_compl_mul(ZT[I],ZINC));/*ZTF(INC +I) = TW(INC+I)*ZT(I)*ZINC*/
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2617:66: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I],i_compl_mul(ZT[I],ZINC));/*ZTF(INC +I) = TW(INC+I)*ZT(I)*ZINC*/
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2626:13: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I],i_compl_mul(ZT[I],ZINC));/*ZTF(INC +I) = TW(INC+I)*ZT(I)*ZINC*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2626:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I],i_compl_mul(ZT[I],ZINC));/*ZTF(INC +I) = TW(INC+I)*ZT(I)*ZINC*/
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2626:66: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            ZTF[INC +I] = i_compl_muldoubl(TW[INC+I],i_compl_mul(ZT[I],ZINC));/*ZTF(INC +I) = TW(INC+I)*ZT(I)*ZINC*/
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2628:7: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2628:7: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
      SYSFREE(ZT);
      ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2649:11: warning: variable 'I' is not initialized [cppcoreguidelines-init-variables]
      int I;
          ^
            = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:14: warning: variable 'TL' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:17: warning: variable 'TM2' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:21: warning: variable 'PICARRE' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:29: warning: variable 'TM' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                            ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:32: warning: variable 'FACTEUR' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:40: warning: variable 'A' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                                       ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:42: warning: variable 'COR' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                                         ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:46: warning: variable 'OMEGA' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                                             ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2651:52: warning: variable 'DELTA' is not initialized [cppcoreguidelines-init-variables]
      double TL,TM2,PICARRE,TM,FACTEUR,A,COR,OMEGA,DELTA;
                                                   ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2652:7: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
      t_complexe ZI,ZALPHA;
      ^~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2673:18: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          OMEGA=(g_NAFVariable.TFS[I]-g_NAFVariable.TFS[1])/g_NAFVariable.UNIANG;
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2673:39: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          OMEGA=(g_NAFVariable.TFS[I]-g_NAFVariable.TFS[1])/g_NAFVariable.UNIANG;
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2674:44: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          ZALPHA = i_compl_mul(i_compl_div(g_NAFVariable.ZAMP[I],g_NAFVariable.ZAMP[1]),
                                           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2674:66: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
          ZALPHA = i_compl_mul(i_compl_div(g_NAFVariable.ZAMP[I],g_NAFVariable.ZAMP[1]),
                                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2681:14: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
             fprintf(g_NAFVariable.NFPRT,"OMEGA=%g, DELTA=%g ,COR=%g\n",OMEGA,DELTA,COR);
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2685:16: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
         *FREQ=g_NAFVariable.TFS[1]+COR;
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2688:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(g_NAFVariable.NFPRT,"CORRECTION DE LA 1ERE FREQUENCE\n");
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2689:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(g_NAFVariable.NFPRT, "FREQ. DE DEPART=%20.15E, CORRECTION=%20.15E\n",g_NAFVariable.TFS[1],COR);
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2689:89: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
           fprintf(g_NAFVariable.NFPRT, "FREQ. DE DEPART=%20.15E, CORRECTION=%20.15E\n",g_NAFVariable.TFS[1],COR);
                                                                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2690:12: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
           fprintf(g_NAFVariable.NFPRT, "FREQUENCE CORRIGEE:%20.15E\n", *FREQ);
           ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2697:14: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
             fprintf(g_NAFVariable.NFPRT, "PAS DE CALCUL\n");
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2711:21: warning: unused function 'cree_list_fenetre_naf' [clang-diagnostic-unused-function]
t_list_fenetre_naf *cree_list_fenetre_naf(const double p_dFreqMin, const double p_dFreqMax, const int p_iNbTerm){
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2712:25: warning: variable 'pListRes' is not initialized [cppcoreguidelines-init-variables]
    t_list_fenetre_naf *pListRes;
                        ^
                                 = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2720:5: warning: function is not thread safe [concurrency-mt-unsafe]
    SYSCHECKMALLOC(pListRes, t_list_fenetre_naf);
    ^
./src/naff_utils.h:51:41: note: expanded from macro 'SYSCHECKMALLOC'
  { printf("error : malloc failed!\n"); exit(1);}
                                        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2720:5: warning: do not manage memory manually; consider a container or a smart pointer [cppcoreguidelines-no-malloc,hicpp-no-malloc]
    SYSCHECKMALLOC(pListRes, t_list_fenetre_naf);
    ^
./src/naff_utils.h:50:24: note: expanded from macro 'SYSCHECKMALLOC'
  if ((variable=(type*)malloc(sizeof(type)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2720:5: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
    SYSCHECKMALLOC(pListRes, t_list_fenetre_naf);
    ^
./src/naff_utils.h:50:17: note: expanded from macro 'SYSCHECKMALLOC'
  if ((variable=(type*)malloc(sizeof(type)))==NULL)\
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2720:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    SYSCHECKMALLOC(pListRes, t_list_fenetre_naf);
    ^
./src/naff_utils.h:51:5: note: expanded from macro 'SYSCHECKMALLOC'
  { printf("error : malloc failed!\n"); exit(1);}
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2720:20: warning: assigning newly created 'gsl::owner<>' to non-owner 't_list_fenetre_naf *' (aka 'list_fenetre_naf *') [cppcoreguidelines-owning-memory]
    SYSCHECKMALLOC(pListRes, t_list_fenetre_naf);
                   ^
./src/naff_utils.h:50:8: note: expanded from macro 'SYSCHECKMALLOC'
  if ((variable=(type*)malloc(sizeof(type)))==NULL)\
       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2721:25: warning: use nullptr [modernize-use-nullptr]
    pListRes->suivant = NULL;
                        ^~~~
                        nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2744:26: warning: use nullptr [modernize-use-nullptr]
    while(p_pListFenNaf!=NULL)
                         ^~~~
                         nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2747:9: warning: do not manage memory manually; use RAII [cppcoreguidelines-no-malloc,hicpp-no-malloc]
        SYSFREE(p_pListFenNaf);
        ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2747:9: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
        SYSFREE(p_pListFenNaf);
        ^
./src/naff_utils.h:76:27: note: expanded from macro 'SYSFREE'
#define SYSFREE(variable) free(variable)
                          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2764:21: warning: unused function 'concat_list_fenetre_naf' [clang-diagnostic-unused-function]
t_list_fenetre_naf *concat_list_fenetre_naf(t_list_fenetre_naf *p_pListFenHead, t_list_fenetre_naf *p_pListFenEnd){
                    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2765:25: warning: variable 'pListTemp' is not initialized [cppcoreguidelines-init-variables]
    t_list_fenetre_naf *pListTemp;
                        ^
                                  = nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2770:25: warning: use nullptr [modernize-use-nullptr]
    if (p_pListFenHead==NULL)
                        ^~~~
                        nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2774:29: warning: use nullptr [modernize-use-nullptr]
    else if (p_pListFenEnd==NULL)
                            ^~~~
                            nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2781:33: warning: use nullptr [modernize-use-nullptr]
            pListTemp->suivant!=NULL;
                                ^~~~
                                nullptr
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2857:14: warning: Assigned value is garbage or undefined [clang-analyzer-core.uninitialized.Assign]
    c1->reel += c2->reel;
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:888:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZAMPT, t_complexe, g_NAFVariable.NTERM+1); /* allocate(ZAMPT(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:68:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(pdata, type,(row) * (col));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Taking false branch
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:69:3: note: expanded from macro 'DIM2'
  SYSCHECKMALLOCSIZE(prow, type *,(row));\
  ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Assuming the condition is false
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:15: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:889:7: note: Loop condition is false. Execution continues on line 890
      DIM2(ZALPT, (g_NAFVariable.NTERM+1), (g_NAFVariable.NTERM+1), t_complexe, "ZALPT"); /*allocate(ZALPT(1:g_NAFVariable.NTERM,1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:70:3: note: expanded from macro 'DIM2'
  for (I = 0; I < (row); I++)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:890:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(TFST, double, g_NAFVariable.NTERM+1);/* allocate(TFST(1:g_NAFVariable.NTERM),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Uninitialized value stored to field 'reel'
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:24: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:891:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT, t_complexe, g_NAFVariable.KTABS+1);/* allocate (ZT (0:g_NAFVariable.KTABS),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is <= field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is true.  Entering loop body
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:897:13: note: Assuming 'IT' is > field 'KTABS'
            IT<=g_NAFVariable.KTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:896:7: note: Loop condition is false. Execution continues on line 903
      for ( IT=0, pzarTab=g_NAFVariable.ZTABS;
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:22: note: Assuming 'IFR' is <= field 'NFS'
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
                     ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:904:7: note: Loop condition is true.  Entering loop body
      for ( IFR = 1; IFR<=g_NAFVariable.NFS; IFR++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:912:14: note: Assuming field 'ICPLX' is equal to 1
         if (g_NAFVariable.ICPLX==1)
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:912:10: note: Taking true branch
         if (g_NAFVariable.ICPLX==1)
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:916:13: note: Calling 'naf_ztpow'
            naf_ztpow(g_NAFVariable.KTABS,64,ZT,ZINC,ZEX); /*naf_ztpow(g_NAFVariable.KTABS+1,64,ZT,ZINC,ZEX);*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:820:7: note: Taking true branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:823:10: note: Returning without writing to 'ZT->reel'
         return;
         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:916:13: note: Returning from 'naf_ztpow'
            naf_ztpow(g_NAFVariable.KTABS,64,ZT,ZINC,ZEX); /*naf_ztpow(g_NAFVariable.KTABS+1,64,ZT,ZINC,ZEX);*/
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:917:13: note: Loop condition is true.  Entering loop body
            for (IT=0, pzarTab=g_NAFVariable.ZTABS;
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:921:16: note: Calling 'i_compl_padd'
               i_compl_padd(pzarTab,ZT+IT); /*g_NAFVariable.ZTABS(IT)=g_NAFVariable.ZTABS(IT)+ZT(IT)*/
               ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2857:14: note: Assigned value is garbage or undefined
    c1->reel += c2->reel;
             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2874:30: warning: The left operand of '*' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
    i_compl_cmplx(&c, c1.reel*c2.reel-c1.imag*c2.imag,c1.reel*c2.imag+c1.imag*c2.reel);
                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:11: note: Assuming the condition is false
      if (N<N1-1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:7: note: Taking false branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:19: note: Assuming 'I' is < 'N1'
      for( I = 1; I<N1; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:7: note: Loop condition is true.  Entering loop body
      for( I = 1; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:19: note: Assuming 'I' is >= 'N1'
      for( I = 1; I<N1; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:7: note: Loop condition is false. Execution continues on line 1736
      for( I = 1; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:7: note: Loop condition is true.  Entering loop body
      for(I = 0; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:7: note: Loop condition is true.  Entering loop body
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:7: note: Loop condition is false. Execution continues on line 1741
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1745:20: note: Assuming 'IT' is > 'NT'
      for( IT = 2; IT<= NT; IT++)
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1745:7: note: Loop condition is false. Execution continues on line 1755
      for( IT = 2; IT<= NT; IT++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1758:19: note: Assuming 'I' is < 'NX'
      for (I = 0; I<NX; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1758:7: note: Loop condition is true.  Entering loop body
      for (I = 0; I<NX; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1758:19: note: Assuming 'I' is < 'NX'
      for (I = 0; I<NX; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1758:7: note: Loop condition is true.  Entering loop body
      for (I = 0; I<NX; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1758:19: note: Assuming 'I' is < 'NX'
      for (I = 0; I<NX; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1758:7: note: Loop condition is true.  Entering loop body
      for (I = 0; I<NX; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1760:100: note: Uninitialized value stored to 'c1.reel'
        ZTF[INC+I]=i_compl_muldoubl(TW[INC+I]*(T0+(INC+I)*XH), i_compl_mul(ZTA[INC+I], i_compl_mul(ZT[I],ZINC)));
                                                                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1760:88: note: Calling 'i_compl_mul'
        ZTF[INC+I]=i_compl_muldoubl(TW[INC+I]*(T0+(INC+I)*XH), i_compl_mul(ZTA[INC+I], i_compl_mul(ZT[I],ZINC)));
                                                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2874:30: note: The left operand of '*' is a garbage value
    i_compl_cmplx(&c, c1.reel*c2.reel-c1.imag*c2.imag,c1.reel*c2.imag+c1.imag*c2.reel);
                             ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2900:54: warning: pointer parameter 'c1' can be pointer to const [readability-non-const-parameter]
void i_compl_pmuldoubl(t_complexe *c2, double* const c1){
                                                     ^
                                       const 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2908:48: warning: pointer parameter 'c1' can be pointer to const [readability-non-const-parameter]
void i_compl_pdivdoubl(t_complexe *c2, double *c1){
                                               ^
                                       const 
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2926:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double ratio, den;
        ^~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2926:9: warning: variable 'ratio' is not initialized [cppcoreguidelines-init-variables]
        double ratio, den;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2926:16: warning: variable 'den' is not initialized [cppcoreguidelines-init-variables]
        double ratio, den;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2927:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double abr, abi, cr;
        ^~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2927:9: warning: variable 'abr' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi, cr;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2927:14: warning: variable 'abi' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi, cr;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2927:19: warning: variable 'cr' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi, cr;
                         ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2929:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if( (abr = c2->reel) < 0.)
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2931:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if( (abi = c2->imag) < 0.)
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2937:17: warning: The left operand of '*' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
                cr = (c1->reel*ratio + c1->imag) / den;
                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
/home/carneirofc/CNPEM/trackcpp/./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
/home/carneirofc/CNPEM/trackcpp/./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:11: note: Assuming the condition is false
      if (N<N1-1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:7: note: Taking false branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:19: note: Assuming 'I' is >= 'N1'
      for( I = 1; I<N1; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:7: note: Loop condition is false. Execution continues on line 1736
      for( I = 1; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:18: note: Assuming 'I' is >= 'N1'
      for(I = 0; I<N1; I++)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:7: note: Loop condition is false. Execution continues on line 1741
      for(I = 0; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1741:13: note: Calling 'i_compl_div'
      ZT1 = i_compl_div(ZT[N1-1],ZAST);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3018:5: note: Calling 'i_compl_pdiv'
    i_compl_pdiv(&c,&c2);
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2929:6: note: Assuming the condition is false
        if( (abr = c2->reel) < 0.)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2929:2: note: Taking false branch
        if( (abr = c2->reel) < 0.)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2931:6: note: Assuming the condition is false
        if( (abi = c2->imag) < 0.)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2931:2: note: Taking false branch
        if( (abi = c2->imag) < 0.)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2933:6: note: Assuming 'abr' is <= 'abi'
        if( abr <= abi )
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2933:2: note: Taking true branch
        if( abr <= abi )
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2937:17: note: The left operand of '*' is a garbage value
                cr = (c1->reel*ratio + c1->imag) / den;
                              ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2945:28: warning: The left operand of '*' is a garbage value [clang-analyzer-core.UndefinedBinaryOperatorResult]
                cr = (c1->reel + c1->imag*ratio) / den;
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Assuming the condition is false
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
/home/carneirofc/CNPEM/trackcpp/./src/naff_utils.h:47:7: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1724:7: note: Taking false branch
      SYSCHECKMALLOCSIZE(ZT,t_complexe,N1); /*allocate(ZT(0:N1-1),stat = NERROR)*/
      ^
/home/carneirofc/CNPEM/trackcpp/./src/naff_utils.h:47:3: note: expanded from macro 'SYSCHECKMALLOCSIZE'
  if ((variable=(type*)malloc(sizeof(type)*(size)))==NULL)\
  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:11: note: Assuming the condition is false
      if (N<N1-1)
          ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1725:7: note: Taking false branch
      if (N<N1-1)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:19: note: Assuming 'I' is >= 'N1'
      for( I = 1; I<N1; I++)
                  ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1732:7: note: Loop condition is false. Execution continues on line 1736
      for( I = 1; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:18: note: Assuming 'I' is >= 'N1'
      for(I = 0; I<N1; I++)
                 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1736:7: note: Loop condition is false. Execution continues on line 1741
      for(I = 0; I<N1; I++)
      ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:1741:13: note: Calling 'i_compl_div'
      ZT1 = i_compl_div(ZT[N1-1],ZAST);
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3018:5: note: Calling 'i_compl_pdiv'
    i_compl_pdiv(&c,&c2);
    ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2929:6: note: Assuming the condition is false
        if( (abr = c2->reel) < 0.)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2929:2: note: Taking false branch
        if( (abr = c2->reel) < 0.)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2931:6: note: Assuming the condition is false
        if( (abi = c2->imag) < 0.)
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2931:2: note: Taking false branch
        if( (abi = c2->imag) < 0.)
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2933:6: note: Assuming 'abr' is > 'abi'
        if( abr <= abi )
            ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2933:2: note: Taking false branch
        if( abr <= abi )
        ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2945:28: note: The left operand of '*' is a garbage value
                cr = (c1->reel + c1->imag*ratio) / den;
                                         ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2957:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  double ratio, den;
  ^~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2957:10: warning: variable 'ratio' is not initialized [cppcoreguidelines-init-variables]
  double ratio, den;
         ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2957:17: warning: variable 'den' is not initialized [cppcoreguidelines-init-variables]
  double ratio, den;
                ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2958:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double abr, abi;
        ^~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2958:9: warning: variable 'abr' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2958:14: warning: variable 'abi' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2961:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if( (abr = c2_r) < 0.)
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2963:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if( (abi = c2_i) < 0.)
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2987:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double ratio, den;
        ^~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2987:9: warning: variable 'ratio' is not initialized [cppcoreguidelines-init-variables]
        double ratio, den;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2987:16: warning: variable 'den' is not initialized [cppcoreguidelines-init-variables]
        double ratio, den;
                      ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2988:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double abr, abi;
        ^~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2988:9: warning: variable 'abr' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi;
               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2988:14: warning: variable 'abi' is not initialized [cppcoreguidelines-init-variables]
        double abr, abi;
                    ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2991:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if( (abr = c2_r) < 0.)
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:2993:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if( (abi = c2_i) < 0.)
                              ^
                               {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3027:16: warning: variable 'u' is not initialized [cppcoreguidelines-init-variables]
        unsigned long u;
                      ^
                        = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3028:9: warning: variable 't' is not initialized [cppcoreguidelines-init-variables]
        double t;
               ^
                 = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3029:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        double q_r=1,q_i=0,x_r,x_i;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3029:21: warning: variable 'x_r' is not initialized [cppcoreguidelines-init-variables]
        double q_r=1,q_i=0,x_r,x_i;
                           ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3029:25: warning: variable 'x_i' is not initialized [cppcoreguidelines-init-variables]
        double q_r=1,q_i=0,x_r,x_i;
                               ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3032:12: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if(n == 0)
                  ^
                   {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3033:3: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
                goto done;
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3064:2: note: label defined here
 done:
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3047:10: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
        for(u = n; ; )
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3049:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if(u & 01)
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3049:6: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
                if(u & 01)
                   ^
                   (     ) != 0u
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3055:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if(u >>= 1)
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3055:6: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
                if(u >>= 1)
                   ^
                           != 0u
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3061:7: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                else
                    ^
                     {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3089:16: warning: variable 'u' is not initialized [cppcoreguidelines-init-variables]
        unsigned long u;
                      ^
                        = 0
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3090:9: warning: variable 't' is not initialized [cppcoreguidelines-init-variables]
        double t;
               ^
                 = NAN
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3091:2: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        t_complexe q={1.0, 0.0}, x;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3093:12: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if(n == 0)
                  ^
                   {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3094:3: warning: avoid using 'goto' for flow control [cppcoreguidelines-avoid-goto,hicpp-avoid-goto]
                goto done;
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3125:2: note: label defined here
 done:
 ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3108:10: warning: implicit conversion changes signedness: 'int' to 'unsigned long' [clang-diagnostic-sign-conversion]
        for(u = n; ; )
                ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3110:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if(u & 01)
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3110:6: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
                if(u & 01)
                   ^
                   (     ) != 0u
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3116:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                if(u >>= 1)
                   ^
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3116:6: warning: implicit conversion 'unsigned long' -> bool [readability-implicit-bool-conversion]
                if(u >>= 1)
                   ^
                           != 0u
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3122:7: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                else
                    ^
                     {
/home/carneirofc/CNPEM/trackcpp/src/naff.cpp:3152:12: warning: variable 'expx' is not initialized [cppcoreguidelines-init-variables]
    double expx;
           ^
                = NAN
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:82:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:85:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status != Status::success) return status;
                                ^
                                 {
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:100:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (status != Status::success) return status;
                                ^
                                 {
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:140:18: warning: declaration shadows a local variable [clang-diagnostic-shadow]
    Status::type status = track_findorbit4(accelerator, codp, fpp);
                 ^
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:84:16: note: previous declaration is here
  Status::type status = track_linepass(accelerator, fp, closed_orbit, element_offset, lost_plane, true);
               ^
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:141:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (status != Status::success) return status;
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:151:18: warning: declaration shadows a local variable [clang-diagnostic-shadow]
    Status::type status = track_linepass(accelerator, fpp, codp, element_offset, lost_plane, true);
                 ^
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:84:16: note: previous declaration is here
  Status::type status = track_linepass(accelerator, fp, closed_orbit, element_offset, lost_plane, true);
               ^
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:152:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (status != Status::success) return status;
                                  ^
                                   {
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:208:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (twiss[i].mux < twiss[i-1].mux) jumpx[i] = jumpx[i-1] + M_PI; else jumpx[i] = jumpx[i-1];
                                      ^
                                       {                             } 
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:208:74: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (twiss[i].mux < twiss[i-1].mux) jumpx[i] = jumpx[i-1] + M_PI; else jumpx[i] = jumpx[i-1];
                                                                         ^
                                                                          {
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:209:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (twiss[i].muy < twiss[i-1].muy) jumpy[i] = jumpy[i-1] + M_PI; else jumpy[i] = jumpy[i-1];
                                      ^
                                       {                             } 
/home/carneirofc/CNPEM/trackcpp/src/optics.cpp:209:74: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (twiss[i].muy < twiss[i-1].muy) jumpy[i] = jumpy[i-1] + M_PI; else jumpy[i] = jumpy[i-1];
                                                                         ^
                                                                          {
src/output.cpp:22:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# %s\n", string_version.c_str());
        ^
src/output.cpp:23:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# Accelerator Physics Group - LNLS\n");
        ^
src/output.cpp:24:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# Campinas BRAZIL\n");
        ^
src/output.cpp:25:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# contact: xresende@gmail.com\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:30:8: warning: variable 'fp' is not initialized [cppcoreguidelines-init-variables]
        FILE* fp;
              ^
                 = nullptr
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:31:2: warning: assigning newly created 'gsl::owner<>' to non-owner 'FILE *' (aka '_IO_FILE *') [cppcoreguidelines-owning-memory]
        fp = fopen(filename.c_str(), "w");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:32:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fp == nullptr) return Status::file_not_opened;
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:36:8: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        const char str[] = "------------------------";
              ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:39:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# [closed-orbit]\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:40:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# ebeam_energy[eV] : %f\n", accelerator.energy);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:41:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# harmonic_number  : %i\n", accelerator.harmonic_number);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:42:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# cavity_state     : %s\n", accelerator.cavity_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:43:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# radiation_state  : %s\n", accelerator.radiation_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:44:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# chamber_state    : %s\n", accelerator.vchamber_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:45:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:46:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "%-5s %-15s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n", "# idx", "fam_name", "s[m]", "rx[m]", "px[rad]", "ry[m]", "py[rad]", "de", "dl[m]");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:47:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "%-5s %-15s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n", "# ---", "---------------", str, str, str, str, str, str, str);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:51:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(fp, "%05i %-15s %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n", i+1, the_ring[i].fam_name.c_str(), s, cod[i].rx, cod[i].px, cod[i].ry, cod[i].py, cod[i].de, cod[i].dl);
                ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:54:2: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
        fclose(fp);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:60:8: warning: variable 'fp' is not initialized [cppcoreguidelines-init-variables]
        FILE* fp;
              ^
                 = nullptr
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:61:2: warning: assigning newly created 'gsl::owner<>' to non-owner 'FILE *' (aka '_IO_FILE *') [cppcoreguidelines-owning-memory]
        fp = fopen(filename.c_str(), "w");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:62:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fp == nullptr) return Status::file_not_opened;
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:66:8: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        const char str[] = "------------------------";
              ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:69:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# [track_linepass]\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:70:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# ebeam_energy[eV]  : %f\n", accelerator.energy);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:71:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# harmonic_number   : %i\n", accelerator.harmonic_number);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:72:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# cavity_state      : %s\n", accelerator.cavity_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:73:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# radiation_state   : %s\n", accelerator.radiation_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:74:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# chamber_state     : %s\n", accelerator.vchamber_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:75:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:77:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "%-5s %-15s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n", "# idx", "fam_name", "s[m]", "rx[m]", "px[rad]", "ry[m]", "py[rad]", "de", "dl[m]");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:78:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "%-5s %-15s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n", "# ---", "---------------", str, str, str, str, str, str, str);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:80:49: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
        unsigned int nr_elements = accelerator.lattice.size();
                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:81:59: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        double s = 0; for(unsigned int i=0; i<start_element; ++i) s += the_ring[i].length;
                                                                 ^
                                                                  {
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:84:19: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                if (el_idx == 0) s = 0;
                                ^
                                 {
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:86:4: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                        fprintf(fp, "%05i %-15s %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n", el_idx, accelerator.lattice[el_idx].fam_name.c_str(), s, nan(""), nan(""), nan(""), nan(""), nan(""), nan(""));
                        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:88:4: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                        fprintf(fp, "%05i %-15s %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n", el_idx, accelerator.lattice[el_idx].fam_name.c_str(), s, points[i].rx, points[i].px, points[i].ry, points[i].py, points[i].de, points[i].dl);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:93:2: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
        fclose(fp);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:99:8: warning: variable 'fp' is not initialized [cppcoreguidelines-init-variables]
        FILE* fp;
              ^
                 = nullptr
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:100:2: warning: assigning newly created 'gsl::owner<>' to non-owner 'FILE *' (aka '_IO_FILE *') [cppcoreguidelines-owning-memory]
        fp = fopen(filename.c_str(), "w");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:101:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fp == nullptr) return Status::file_not_opened;
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:104:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# ebeam_energy[eV]  : %f\n", accelerator.energy);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:105:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# harmonic_number   : %i\n", accelerator.harmonic_number);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:106:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# cavity_state      : %s\n", accelerator.cavity_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:107:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# radiation_state   : %s\n", accelerator.radiation_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:108:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# chamber_state     : %s\n", accelerator.vchamber_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:109:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:111:49: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
        unsigned int nr_elements = accelerator.lattice.size();
                                                       ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:115:4: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                        fprintf(fp, "%05i %-15s %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n", el_idx, accelerator.lattice[el_idx].fam_name.c_str(), nan(""), nan(""), nan(""), nan(""), nan(""), nan(""));
                        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:117:4: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                        fprintf(fp, "%05i %-15s %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n", el_idx, accelerator.lattice[el_idx].fam_name.c_str(), points[i].rx, points[i].ry, points[i].de, points[i].px, points[i].py, points[i].dl);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:121:2: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
        fclose(fp);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:127:8: warning: variable 'fp' is not initialized [cppcoreguidelines-init-variables]
        FILE* fp;
              ^
                 = nullptr
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:128:2: warning: assigning newly created 'gsl::owner<>' to non-owner 'FILE *' (aka '_IO_FILE *') [cppcoreguidelines-owning-memory]
        fp = fopen(filename.c_str(), "w");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:129:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fp == nullptr) return Status::file_not_opened;
                          ^
                           {
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:131:8: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        const char str[] = "------------------------";
              ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:134:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# %s\n", label.c_str());
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:135:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# ebeam_energy[eV]  : %f\n", accelerator.energy);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:136:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# harmonic_number   : %i\n", accelerator.harmonic_number);
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:137:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# cavity_state      : %s\n", accelerator.cavity_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:138:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# radiation_state   : %s\n", accelerator.radiation_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:139:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "# chamber_state     : %s\n", accelerator.vchamber_on ? "on" : "off");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:140:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(fp, "\n");
        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:142:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(fp, "%-5s %-5s %-5s %-5s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n",  "# s_e", "l_t", "l_e", "l_p", "start_s[m]", "rx[m]", "ry[m]", "de", "px[rad]", "py[rad]", "dl[m]", "nux1", "nuy1", "nux2", "nuy2");
                ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:143:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(fp, "%-5s %-5s %-5s %-5s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n",  "# ---", "-----", "-----", "-----", str, str, str, str, str, str, str, str, str, str, str);
                ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:145:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(fp, "%-5s %-5s %-5s %-5s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n",  "# s_e", "l_t", "l_e", "l_p", "start_s[m]", "rx[m]", "ry[m]", "de", "px[rad]", "py[rad]", "dl[m]");
                ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:146:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                fprintf(fp, "%-5s %-5s %-5s %-5s %-24s %-24s %-24s %-24s %-24s %-24s %-24s\n",  "# ---", "-----", "-----", "-----", str, str, str, str, str, str, str);
                ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:151:3: warning: use range-based for loop instead [modernize-loop-convert]
                for(unsigned int i=0; i<grid.size(); ++i) {
                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                   (const auto & i : grid)
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:153:4: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                        fprintf(fp, "%-5i %-5i %-5i %-5i %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n",  grid[i].start_element, grid[i].lost_turn, grid[i].lost_element, grid[i].lost_plane, s[grid[i].start_element], p.rx, p.ry, p.de, p.px, p.py, p.dl, grid[i].nux1, grid[i].nuy1, grid[i].nux2, grid[i].nuy2);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:156:3: warning: use range-based for loop instead [modernize-loop-convert]
                for(unsigned int i=0; i<grid.size(); ++i) {
                ^  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                   (const auto & i : grid)
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:158:4: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
                        fprintf(fp, "%-5i %-5i %-5i %-5i %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E %+24.17E\n",  grid[i].start_element, grid[i].lost_turn, grid[i].lost_element, grid[i].lost_plane, s[grid[i].start_element], p.rx, p.ry, p.de, p.px, p.py, p.dl);
                        ^
/home/carneirofc/CNPEM/trackcpp/src/output.cpp:162:2: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
        fclose(fp);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:38:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:43:9: warning: variable 'fp' is not initialized [cppcoreguidelines-init-variables]
  FILE *fp;
        ^
           = nullptr
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:44:3: warning: assigning newly created 'gsl::owner<>' to non-owner 'FILE *' (aka '_IO_FILE *') [cppcoreguidelines-owning-memory]
  fp = fopen("orbit_trackcpp.txt", "w");
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:48:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    fprintf(stdout, "%03i: %15s  %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E \n", i+1, the_ring[i % the_ring.size()].fam_name.c_str(), c.rx, c.px, c.ry, c.py, c.de, c.dl);
    ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:49:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    fprintf(fp, "%+23.16E %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E \n", c.rx, c.px, c.ry, c.py, c.de, c.dl);
    ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:51:3: warning: calling legacy resource function without passing a 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  fclose(fp);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:57:84: warning: unused parameter 'the_ring' [clang-diagnostic-unused-parameter]
int test_linepass_tpsa(const Accelerator& accelerator, const std::vector<Element>& the_ring) {
                                                                                   ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:57:84: warning: parameter 'the_ring' is unused [misc-unused-parameters]
int test_linepass_tpsa(const Accelerator& accelerator, const std::vector<Element>& the_ring) {
                                                                                   ^~~~~~~~
                                                                                    /*the_ring*/
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:67:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:87:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  unsigned int element_offset = 0, lost_turn = 0;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:88:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:90:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  clock_t begin, end;
  ^~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:90:11: warning: variable 'begin' is not initialized [cppcoreguidelines-init-variables]
  clock_t begin, end;
          ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:90:18: warning: variable 'end' is not initialized [cppcoreguidelines-init-variables]
  clock_t begin, end;
                 ^
note: this fix will not be applied because it overlaps with another fix
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:91:10: warning: variable 'time_spent' is not initialized [cppcoreguidelines-init-variables]
  double time_spent;
         ^
                    = NAN
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:104:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    fprintf(stdout, "%03i: %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E\n", i+1, c.rx, c.px, c.ry, c.py, c.de, c.dl);
    ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:129:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    fprintf(stdout, "closed_orbit: %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E\n", c.rx, c.px, c.ry, c.py, c.de);
    ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:150:5: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
    fprintf(stdout, "closed_orbit: %+23.16E %+23.16E %+23.16E %+23.16E %+23.16E\n", c.rx, c.px, c.ry, c.py, c.de);
    ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:308:33: warning: unused parameter 'accelerator' [clang-diagnostic-unused-parameter]
int test_kicktable(Accelerator& accelerator) {
                                ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:308:33: warning: parameter 'accelerator' is unused [misc-unused-parameters]
int test_kicktable(Accelerator& accelerator) {
                                ^~~~~~~~~~~
                                 /*accelerator*/
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:311:20: warning: unused variable 'ptrKicktable' [clang-diagnostic-unused-variable]
  const Kicktable *ptrKicktable = nullptr;
                   ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:344:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "test_simple_drift\n");
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:345:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "rx: %+.16f\n", pos.rx);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:346:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "px: %+.16f\n", pos.px);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:347:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "ry: %+.16f\n", pos.ry);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:348:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "py: %+.16f\n", pos.py);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:349:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "de: %+.16f\n", pos.de);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:350:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "dl: %+.16f\n", pos.dl);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:372:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "test_simple_quadrupole\n");
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:373:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "rx: %+.16f\n", pos.rx);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:374:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "px: %+.16f\n", pos.px);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:375:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "ry: %+.16f\n", pos.ry);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:376:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "py: %+.16f\n", pos.py);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:377:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "de: %+.16f\n", pos.de);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:378:3: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
  fprintf(stdout, "dl: %+.16f\n", pos.dl);
  ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:395:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:401:16: warning: unused variable 'status' [clang-diagnostic-unused-variable]
  Status::type status = track_linepass (accelerator,
               ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:410:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(stdout, "rx: %+.16f\n", pos[i].rx);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:411:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(stdout, "px: %+.16f\n", pos[i].px);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:412:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(stdout, "ry: %+.16f\n", pos[i].ry);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:413:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(stdout, "py: %+.16f\n", pos[i].py);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:414:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(stdout, "de: %+.16f\n", pos[i].de);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:415:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        fprintf(stdout, "dl: %+.16f\n", pos[i].dl);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:449:16: warning: variable 'status' is not initialized [cppcoreguidelines-init-variables]
  Status::type status;
               ^
                      = 0
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:494:1: warning: non-void function does not return a value in all control paths [clang-diagnostic-return-type]
}
^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:538:1: warning: non-void function does not return a value [clang-diagnostic-return-type]
}
^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:542:16: warning: variable 'status' is not initialized [cppcoreguidelines-init-variables]
  Status::type status;
               ^
                      = 0
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:544:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  Accelerator accelerator, accelerator2;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:584:47: warning: unused parameter 'args' [clang-diagnostic-unused-parameter]
int cmd_tests(const std::vector<std::string>& args) {
                                              ^
/home/carneirofc/CNPEM/trackcpp/src/tests.cpp:584:47: warning: parameter 'args' is unused [misc-unused-parameters]
int cmd_tests(const std::vector<std::string>& args) {
                                              ^~~~
                                               /*args*/
src/trackcpp.cpp:23:6: warning: variable 'verbose_on' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
bool verbose_on = true;
     ^
src/trackcpp.cpp:31:2: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        char buffer[30];
        ^
/home/carneirofc/CNPEM/trackcpp/src/trackcpp.cpp:32:18: warning: use nullptr [modernize-use-nullptr]
        time_t t = time(NULL);   // get time now
                        ^~~~
                        nullptr
/home/carneirofc/CNPEM/trackcpp/src/trackcpp.cpp:33:19: warning: function is not thread safe [concurrency-mt-unsafe]
        struct tm* now = localtime(&t);
                         ^
/home/carneirofc/CNPEM/trackcpp/src/trackcpp.cpp:34:2: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg,hicpp-vararg]
        sprintf(buffer, "[%04i-%02i-%02i %02i:%02i:%02i]", 1900+now->tm_year, 1+now->tm_mon, now->tm_mday, now->tm_hour, now->tm_min, now->tm_sec);
        ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:52:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (std::isnan(fp.rx)) fp = Pos<double>(0,0,0,0,0,0);
                        ^
                         {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:54:22: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  int nr_elements  = lattice.size();
                     ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:54:30: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'int' [clang-diagnostic-shorten-64-to-32]
  int nr_elements  = lattice.size();
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:56:27: warning: implicit conversion changes signedness: 'int' to 'std::vector<bool, type-parameter-0-0>::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
        indcs.reserve(nr_elements+1);
                                 ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:57:26: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for (unsigned int i=0; i<=nr_elements; ++i) indcs[i] = false;
                                ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:57:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        for (unsigned int i=0; i<=nr_elements; ++i) indcs[i] = false;
                                                   ^
                                                    {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:58:25: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        for (auto&& i: indices) if (i<=nr_elements) indcs[i] = true;
                               ^
                                {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:58:31: warning: comparison of integers of different signs: 'unsigned int' and 'int' [clang-diagnostic-sign-compare]
        for (auto&& i: indices) if (i<=nr_elements) indcs[i] = true;
                                     ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:58:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        for (auto&& i: indices) if (i<=nr_elements) indcs[i] = true;
                                                   ^
                                                    {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:84:88: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if ((status = track_elementpass (lattice[i], map, accelerator)) != Status::success) return status;
                                                                                       ^
                                                                                        {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:102:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  if (indcs[lattice.size()]) tm.push_back(m66);
                            ^
                             {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:119:50: warning: implicit conversion loses integer precision: 'std::vector::size_type' (aka 'unsigned long') to 'unsigned int' [clang-diagnostic-shorten-64-to-32]
  unsigned int nr_elements = accelerator.lattice.size();
                                                 ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:122:45: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        for (unsigned int i=0; i<=nr_elements; ++i) indices.push_back(i);
                                                   ^
                                                    {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:140:39: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  double L0 = latt_findspos(the_ring, 1+the_ring.size());
                                      ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:140:40: warning: implicit conversion loses integer precision: 'unsigned long' to 'int' [clang-diagnostic-shorten-64-to-32]
  double L0 = latt_findspos(the_ring, 1+the_ring.size());
                                       ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:143:25: warning: implicit conversion changes signedness: '__gnu_cxx::__alloc_traits<std::allocator<int>, int>::value_type' (aka 'int') to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  double frf = the_ring[cav_idx[0]].frequency;
                        ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:148:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
  for(auto i=0; i<7; ++i) co[i] = fixed_point_guess;
                         ^
                          {
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:148:30: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [clang-diagnostic-sign-conversion]
  for(auto i=0; i<7; ++i) co[i] = fixed_point_guess;
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:161:31: warning: declaration shadows a local variable [clang-diagnostic-shadow]
    std::vector<Pos<double> > co2;
                              ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:149:29: note: previous declaration is here
  std::vector<Pos<double> > co2(7,0);
                            ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:163:17: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
    Plane::type lost_plane;
                ^
                           = 0
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:166:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[0], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:167:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[1], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:168:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[2], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:169:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[3], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:170:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[4], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:171:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[5], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:172:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[6], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:206:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:217:31: warning: unused variable 'the_ring' [clang-diagnostic-unused-variable]
  const std::vector<Element>& the_ring = accelerator.lattice;
                              ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:237:31: warning: declaration shadows a local variable [clang-diagnostic-shadow]
    std::vector<Pos<double> > co2;
                              ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:226:29: note: previous declaration is here
  std::vector<Pos<double> > co2(7,0);
                            ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:239:17: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
    Plane::type lost_plane;
                ^
                           = 0
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:241:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[0], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:242:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[1], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:243:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[2], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:244:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[3], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:245:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    status = (Status::type) ((int) status | (int) track_linepass(accelerator, co[6], co2, element_offset, lost_plane, false));
                             ^
/home/carneirofc/CNPEM/trackcpp/src/tracking.cpp:273:15: warning: variable 'lost_plane' is not initialized [cppcoreguidelines-init-variables]
  Plane::type lost_plane;
              ^
                         = 0
